<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mere Code - Comments: Bug squashing sprints</title><link href="http://code.mumak.net/2009/10/bug-squashing-sprints.html/" rel="alternate"></link><link href="http://code.mumak.net/feeds/comment.bug-squashing-sprints.atom.xml" rel="self"></link><id>http://code.mumak.net/2009/10/bug-squashing-sprints.html/</id><updated>2009-10-20T18:22:00+01:00</updated><entry><title>Posted by: james_w (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/10/bug-squashing-sprints.html/#comment-3638202102710492677.md" rel="alternate"></link><updated>2009-10-20T18:00:00+01:00</updated><author><name>james_w (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-20:2009/10/bug-squashing-sprints.html/</id><summary type="html">&lt;p&gt;Debian do this with their Bug Squashing Parties (BSPs). When approaching
a release they run these to get the number of RC bugs down.  &lt;/p&gt;
&lt;p&gt;http://wiki.debian.org/BSP  &lt;/p&gt;
&lt;p&gt;I agree that this could be a good use of sprints. For instance, bzr
currently has 1733 open bugs, around half of those ever reported and
more than are marked "Fix Released." That's quite a lot of pain points,
though I feel many were transient, since fixed or extreme edge cases.  &lt;/p&gt;
&lt;p&gt;[ Hey, this would be a better conversation if LP produced graphs of
these numbers over time. ]  &lt;/p&gt;
&lt;p&gt;Bugfixing often requires you to do feature work, or at least
re-architect some area, so discussions around the best way to do this
would be good for sprints.  &lt;/p&gt;
&lt;p&gt;Also, there is a question of how to pick the bugs, for Debian it is
quite easy, there is a list and all must be dealt with, what should
other projects do? Work from the top of the list down in terms of
priority?  &lt;/p&gt;
&lt;p&gt;I think it would be good if tags were used extensively, so you could
look at all the bugs related to “dirstate,” or “log,” and try and fix
swathes of bugs in one go. Also, if all bugs had executable test cases
then you would get TDD for free.  &lt;/p&gt;
&lt;p&gt;Or, in short, “I agree.”  &lt;/p&gt;
&lt;p&gt;Thanks,  &lt;/p&gt;
&lt;p&gt;James&lt;/p&gt;</summary></entry><entry><title>Posted by: Jamu Kakar (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/10/bug-squashing-sprints.html/#comment-446205790623051490.md" rel="alternate"></link><updated>2009-10-20T18:22:00+01:00</updated><author><name>Jamu Kakar (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-20:2009/10/bug-squashing-sprints.html/</id><summary type="html">&lt;p&gt;I think part of the problem is that two sprints a year is too few. On
the Landscape team we do things a bit differently: we have 4 sprints a
year and each one is 2 weeks (so maybe they're more like marathons). We
distinguish planning sprints from coding sprints and generally
interleave these two things.  &lt;/p&gt;
&lt;p&gt;We've aligned our development process with Ubuntu's 6 month cycle, so
this works quite well. We get together at UDS for a "planning sprint"
where we work out what we want to accomplish in the next six months.
When we get home we all start working on whatever features have been
discussed. These sprints are also a great time to review development
process and other non-coding aspects of the project.  &lt;/p&gt;
&lt;p&gt;Typically in the middle of the 6 month cycle we have a "coding sprint".
These sprints are usually about moving forward whatever tasks we've been
working on, but sometimes they focus on other things like getting the
client prepared for release, or stabilizing code that's been undergoing
a lot of churn.  &lt;/p&gt;
&lt;p&gt;We divide these 6-month cycles into 1-month milestones. One of the ways
we deal with bug accumulation is to explicitly use the 6th milestone as
polish/bug fix time.&lt;/p&gt;</summary></entry></feed>