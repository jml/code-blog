<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mere Code - Comments: Tests: Costs and Benefits</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/" rel="alternate"></link><link href="http://code.mumak.net/feeds/comment.tests-costs-and-benefits.atom.xml" rel="self"></link><id>http://code.mumak.net/2009/11/tests-costs-and-benefits.html/</id><updated>2009-11-12T12:05:00+00:00</updated><entry><title>Posted by: Gary van der Merwe (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/#comment-1781352005569485714.md" rel="alternate"></link><updated>2009-11-11T09:40:00+00:00</updated><author><name>Gary van der Merwe (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-11:2009/11/tests-costs-and-benefits.html/</id><summary type="html">&lt;p&gt;Yes - Language is very important in this debate. Test are more important
for dynamically typed languages (e.g. python), than for statically typed
languages (e.g. C#.)  &lt;/p&gt;
&lt;p&gt;For example, if you rename a method, and you don't change one of the
caller of the method (cause you missed it,) the static language will
pick this up at compile time, but with the dynamic language, if you
don't have tests, it's going to show up later as a bug.&lt;/p&gt;</summary></entry><entry><title>Posted by: Travis B. Hartwell (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/#comment-2019827508675150767.md" rel="alternate"></link><updated>2009-11-11T10:09:00+00:00</updated><author><name>Travis B. Hartwell (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-11:2009/11/tests-costs-and-benefits.html/</id><summary type="html">&lt;p&gt;Sure, you don't need as many of the unit tests in a language like
Haskell, because you can encode some of the constraints on behavior in
the type system and the compiler will handle ensure these.  &lt;/p&gt;
&lt;p&gt;But, I almost think I would be more inclined to do testing of at least
the core structures and functions of my applications if I were in
Haskell because in fact it sounds like it is easier. With tools like
QuickCheck and HPC and some more advanced checkers as well, there is a
large toolkit to do so.  &lt;/p&gt;
&lt;p&gt;I recently have been re-reading Real World Haskell and Chapter 11
Testing and Quality Assurance
(http://book.realworldhaskell.org/read/testing-and-quality-assurance.html)
makes me feel like the cost vs benefit ratio is definitely more bang for
buck.  &lt;/p&gt;
&lt;p&gt;I also remember watching a talk by Don Stewart (and perhaps another of
the xmonad developers, I can't remember right now) about the development
of xmonad and the testing that went on. It was very enlightening.  &lt;/p&gt;
&lt;p&gt;I feel like I'd be more prone to catch the TDD spirit (well, more
correctly the attitude that the code isn't done until it is tested)
while using Haskell than I have been using Python. I have not, in fact,
got into TDD in Python because it does seem onerous.&lt;/p&gt;</summary></entry><entry><title>Posted by: Bice Dibley (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/#comment-4066995166163037922.md" rel="alternate"></link><updated>2009-11-11T09:53:00+00:00</updated><author><name>Bice Dibley (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-11:2009/11/tests-costs-and-benefits.html/</id><summary type="html">&lt;p&gt;You can focus on what's right only when there is no cost to consider.&lt;/p&gt;</summary></entry><entry><title>Posted by: jml (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/#comment-6177646133725760680.md" rel="alternate"></link><updated>2009-11-11T23:28:00+00:00</updated><author><name>jml (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-11:2009/11/tests-costs-and-benefits.html/</id><summary type="html">&lt;p&gt;Cory, I wasn't talking about testing when I was talking about right
things, costs and benefits.  &lt;/p&gt;
&lt;p&gt;Bice, I disagree..&lt;/p&gt;</summary></entry><entry><title>Posted by: AmanicA (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/#comment-6540922224116896473.md" rel="alternate"></link><updated>2009-11-12T12:05:00+00:00</updated><author><name>AmanicA (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-12:2009/11/tests-costs-and-benefits.html/</id><summary type="html">&lt;p&gt;For me a major benefit is that you save time. I.e you don't have to
manually test something 100 times until it works correctly. You just run
the test and it should be able to automatically do the test in less time
than it would have taken to do it manually. With the added benefit that
you can redo the test in a months time without remembering exactly how
it works.  &lt;/p&gt;
&lt;p&gt;Another advantage for me is that it gets you thinking about what exactly
you are trying to do before you spend the time going in circles of
implementation while you are still trying to figure out what you are
trying to do.&lt;br /&gt;
Especially if you doing it right:&lt;br /&gt;
http://en.wikipedia.org/wiki/Behavior_Driven_Development&lt;/p&gt;</summary></entry><entry><title>Posted by: Cory (noreply@blogger.com)</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html/#comment-7310592420242993345.md" rel="alternate"></link><updated>2009-11-11T19:54:00+00:00</updated><author><name>Cory (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-11:2009/11/tests-costs-and-benefits.html/</id><summary type="html">&lt;p&gt;&gt; What happened to doing something because it was the right thing?  &lt;/p&gt;
&lt;p&gt;This isn't a moral issue, you won't go to hell if you didn't write any
unit tests. ;-)  &lt;/p&gt;
&lt;p&gt;Something is the right thing if the costs outweigh the benefits. Unit
tests clearly add value to the process, and for me it's just as clear
that the value is greater than the cost. Most people at least agree that
testing (of some kind) reduces the time-spent-per-bug.  &lt;/p&gt;
&lt;p&gt;I think the debate is really about the &lt;em&gt;opportunity&lt;/em&gt; cost of unit
testing; could we be doing some BETTER form of testing, if we weren't
writing unit tests?  &lt;/p&gt;
&lt;p&gt;For me, the answer is "maybe, but I haven't heard about it yet".&lt;/p&gt;</summary></entry></feed>