<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mere Code - Comments: Wheels within wheels</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html/" rel="alternate"></link><link href="http://code.mumak.net/feeds/comment.wheels-within-wheels.atom.xml" rel="self"></link><id>http://code.mumak.net/2010/04/wheels-within-wheels.html/</id><updated>2010-05-17T12:42:00+01:00</updated><entry><title>Posted by: jml (noreply@blogger.com)</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html/#comment-3539796952376235993.md" rel="alternate"></link><updated>2010-05-17T12:36:00+01:00</updated><author><name>jml (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-17:2010/04/wheels-within-wheels.html/</id><summary type="html">&lt;p&gt;Robert Collins tried to comment on this post, but ran into technical
difficulties. He emailed me his comment, which I'm pasting here:  &lt;/p&gt;
&lt;p&gt;I don't think Lean advocates would unroll everything - I wouldn't, and I
think I'm a Lean advocate. I'd treat the users request stalling at the
outside edge of each cycle, before it passes into an inner cycle,&lt;br /&gt;
as a stall, and I'd try to break each cycle into little boxes so that I
could talk sensibly about how much time e.g. running tests. I naively
expect to see a similar conclusion if modelled this way - inner loops
that don't work well consume most of the duration of the vsm.&lt;/p&gt;</summary></entry><entry><title>Posted by: jml (noreply@blogger.com)</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html/#comment-3809122509459532640.md" rel="alternate"></link><updated>2010-05-17T12:41:00+01:00</updated><author><name>jml (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-17:2010/04/wheels-within-wheels.html/</id><summary type="html">&lt;p&gt;Robert, I agree that taking an "optimize the inner loop" approach would
probably yield similar results to a value-stream-driven "optimize the
time between request and fulfilment".  &lt;/p&gt;
&lt;p&gt;However, I'm not entirely sure it's guaranteed, and the Poppendieck's
repeatedly advocate "seeing the whole" and optimizing for it, and
frequently warn against micro-optimizing.  &lt;/p&gt;
&lt;p&gt;By dividing things up into loops and cycles, I am explicitly ignoring
their advice. I can imagine that, actually, they'd approve of me doing
so.&lt;/p&gt;</summary></entry><entry><title>Posted by: jml (noreply@blogger.com)</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html/#comment-6056639184799748038.md" rel="alternate"></link><updated>2010-05-17T12:42:00+01:00</updated><author><name>jml (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-17:2010/04/wheels-within-wheels.html/</id><summary type="html">&lt;p&gt;Dean, I'll do what I can. The short answer is that I think there's a lot
of waste happening at a much finer level of granularity than we track
with our Kanban board.  &lt;/p&gt;
&lt;p&gt;Perhaps I can convince Francis (our local Kanban advocate) to say
something.&lt;/p&gt;</summary></entry><entry><title>Posted by: Dean Goodmanson (noreply@blogger.com)</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html/#comment-8308811575951022028.md" rel="alternate"></link><updated>2010-05-12T21:12:00+01:00</updated><author><name>Dean Goodmanson (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-12:2010/04/wheels-within-wheels.html/</id><summary type="html">&lt;p&gt;Looking forward to a follow-up bloag and hearing how this relates to the
use of a Kanban board/tool.  &lt;/p&gt;
&lt;p&gt;https://dev.launchpad.net/Kanban&lt;/p&gt;</summary></entry><entry><title>Posted by: jkakar (noreply@blogger.com)</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html/#comment-8867664693700216134.md" rel="alternate"></link><updated>2010-04-27T22:43:00+01:00</updated><author><name>jkakar (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-27:2010/04/wheels-within-wheels.html/</id><summary type="html">&lt;p&gt;We pretty much have the same set of cycles on the Landscape project,
with some having similar timelines. For example our planning cycle is 6
months, similar to Launchpad. I think our TDD cycle has a much faster
turn-around time than 30 minutes. It's more like 1 or 2, which is slower
than I'd like.  &lt;/p&gt;
&lt;p&gt;Something I've been thinking about recently is a 2-3 year roadmap, a set
of high-level themes for the project that we use to guide our choices
when we make decisions regarding our planning cycle. My first thought
was that this was an outer ring that you didn't include in your post,
but I don't think that's quite right. It's more like the set of forces
that affect the direction in which the wheel is rolling.  &lt;/p&gt;
&lt;p&gt;Also, I've been meaning to write this blog post for more than two years,
but have procrastinated and done nothing about this desire. Thanks for
beating me to it and describing the pieces so clearly.&lt;/p&gt;</summary></entry></feed>