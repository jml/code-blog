<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mere Code</title><link href="http://code.mumak.net/" rel="alternate"></link><link href="http://code.mumak.net/feeds/all.atom.xml" rel="self"></link><id>http://code.mumak.net/</id><updated>2014-07-11T00:00:00+01:00</updated><entry><title>Cutting edge debugging</title><link href="http://code.mumak.net/2014/07/cutting-edge-debugging.html" rel="alternate"></link><updated>2014-07-11T00:00:00+01:00</updated><author><name>Jonathan M. Lange</name></author><id>tag:code.mumak.net,2014-07-11:2014/07/cutting-edge-debugging.html</id><summary type="html">&lt;p&gt;One of the great pleasures of advancing in one's craft is the thrill of solving 
newer, more difficult problems. In the course of my work, I frequently encounter 
many bugs which appear at first glance to be impossible. Not just impossible to
solve, but intrinsically impossible. It's as if being at the very frontiers of
technology exposes one to strange new logics that the human mind is not fit to
grasp.&lt;/p&gt;
&lt;p&gt;Each of these bugs is, of course, unique, and it would be folly to suggest that
there could be any sort of &lt;em&gt;systematic method&lt;/em&gt; that could be applied at the
cutting edge of technology, as if one could push back the boundaries of ignorance
in much the same way as one fills in a tax return. Nevertheless, the following
principles have served me pretty well, and are perhaps deserve a wider audience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You're editing the wrong file&lt;/li&gt;
&lt;li&gt;You're editing the right file, but on the wrong machine&lt;/li&gt;
&lt;li&gt;You're editing the right file, but you forgot to save it&lt;/li&gt;
&lt;li&gt;You've edited the right file, but you forgot to recompile&lt;/li&gt;
&lt;li&gt;The thing you thought you turned on, you actually turned off&lt;/li&gt;
&lt;li&gt;The thing you thought you turned off, you actually turned on&lt;/li&gt;
&lt;li&gt;You're in a meeting, and you should be paying attention. They wouldn't have 
  eighteen people talking about it unless it was really important, would they?&lt;/li&gt;
&lt;li&gt;You're running the wrong version&lt;/li&gt;
&lt;li&gt;You're running the right version, but on the wrong machine&lt;/li&gt;
&lt;li&gt;You've fixed the problem, but forgot to push&lt;/li&gt;
&lt;li&gt;You've fixed the problem and remembered to push, but you forgot to commit&lt;/li&gt;
&lt;li&gt;You've fixed the problem, committed, and pushed. However, many users were 
  relying on the previous, broken behaviour and so now you must roll back.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I offer up these principles humbly: no single approach can suffice at the very
fringes of the known. I earnestly hope that by meditating on them we can
achieve things as yet undreamt of.&lt;/p&gt;</summary></entry><entry><title>conda and binstar: initial experiences</title><link href="http://code.mumak.net/2014/07/conda-and-binstar-initial-experiences.html" rel="alternate"></link><updated>2014-07-08T00:00:00+01:00</updated><author><name>Jonathan M. Lange</name></author><id>tag:code.mumak.net,2014-07-08:2014/07/conda-and-binstar-initial-experiences.html</id><summary type="html">&lt;p&gt;A while ago my friend &lt;a href="https://github.com/teh"&gt;teh&lt;/a&gt; recommended that I use
&lt;a href="http://conda.pydata.org/"&gt;conda&lt;/a&gt; for Python package management, because of
its intrinsic superiority to &lt;a href="http://pip.readthedocs.org/en/latest/"&gt;pip&lt;/a&gt; &amp;amp;
&lt;a href="http://virtualenv.readthedocs.org/en/latest/"&gt;virtualenv&lt;/a&gt;. I'm no fan of
either, and teh generally has pretty good taste, so I thought I'd check it
out.&lt;/p&gt;
&lt;p&gt;I haven't formed an overall opinion yet, but I &lt;em&gt;can&lt;/em&gt; say without reservation
that the overall experience for someone who has become used to pip &amp;amp;
virtualenv is very frustrating.&lt;/p&gt;
&lt;p&gt;What I found myself wanting was a one pager explaining conda &amp;amp; binstar to
someone familiar with pip &amp;amp; virtualenv, which are unquestionably vastly more
popular.  Alas, there's none to be found.&lt;/p&gt;
&lt;p&gt;There are some guidelines here and there on the net about how to install a
package that's available on PyPI into a conda system, but they don't always
work.&lt;/p&gt;
&lt;p&gt;For example, I'd like to play around with
&lt;a href="http://pyrsistent.readthedocs.org/en/latest/"&gt;pyrsistent&lt;/a&gt;. The recommended
approach is to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; conda skeleton pypi pyrsistent
&lt;span class="gp"&gt;$&lt;/span&gt; conda build pyrsistent
&lt;span class="gp"&gt;$&lt;/span&gt; binstar upload //anaconda/conda-bld/osx-64/pyrsistent-0.3.1-py27_0.tar.bz2
&lt;span class="gp"&gt;$&lt;/span&gt; conda install pyrsistent
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything works fine up until the &lt;code&gt;build&lt;/code&gt; step, but the upload fails because
someone has already uploaded the package. Fine. So &lt;code&gt;conda install pyrsistent&lt;/code&gt;
should work, right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; conda install pyrsistent
&lt;span class="go"&gt;Fetching package metadata: ...&lt;/span&gt;
&lt;span class="go"&gt;Error: No packages found matching: pyrsistent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wut.&lt;/p&gt;
&lt;p&gt;Searching &lt;a href="https://binstar.org/dashboard"&gt;binstar&lt;/a&gt; finds pyristent. Apparently
I have to add some kind of channel (a concept that's not well explained, and
that does not seem to appear at all on the binstar UI).&lt;/p&gt;
&lt;p&gt;I try this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; conda config --add channels https://binstar.org/auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But apparently that's not a channel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; conda install pyrsistent
&lt;span class="go"&gt;Fetching package metadata: ....Error: HTTPError: 404 Client Error: NOT FOUND: https://binstar.org/auto/osx-64/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I try this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; conda config --add channels https://binstar.org/auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that &lt;em&gt;is&lt;/em&gt; a channel, but pyrsistent it doth not find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; conda install pyrsistent
&lt;span class="go"&gt;Error: No packages found matching: pyrsistent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I take a look at the
&lt;a href="https://binstar.org/auto/pyrsistent/0.1.0/files"&gt;files page for pyrsistent&lt;/a&gt;
and it looks like the only file is &lt;code&gt;linux-64/pyrsistent-0.1.0-py27_0.tar.bz2&lt;/code&gt;.
I'm running OS X (for my sins) and my &lt;em&gt;guess&lt;/em&gt; is that the "No packages found
matching" error refers to a lack of binary builds.&lt;/p&gt;
&lt;p&gt;So, what am I supposed to do? At this point, the documentation and the error
messages from the tools leave me with no obvious way forward. Perhaps there's
some underlying concept that would illuminate all for me, if only I could
grasp it. Perhaps it's simply a bug.&lt;/p&gt;
&lt;p&gt;In any case, I'm not abandoning conda yet (in part because I have no idea how
to extricate it from my system), but it has some way to go before it is
properly better than pip &amp;amp; virtualenv.&lt;/p&gt;</summary></entry><entry><title>Migrated to Pelican</title><link href="http://code.mumak.net/2014/07/migrated-to-pelican.html" rel="alternate"></link><updated>2014-07-05T15:21:00+01:00</updated><author><name>Jonathan M. Lange</name></author><id>tag:code.mumak.net,2014-07-05:2014/07/migrated-to-pelican.html</id><summary type="html">&lt;p&gt;A while ago, I got sick of Blogger, so I switched to Octopress.&lt;/p&gt;
&lt;p&gt;I really could not be bothered learning how to manage Ruby virtual
environments, and kept running into version issues, so I have followed
&lt;a href="https://glyph.twistedmatrix.com/2014/01/and-now-for-something-completely-different.html"&gt;glyph's example&lt;/a&gt;
and migrated to &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No comments yet, and still quite a few things that ought to be done.  If you
notice something broken or missing, &lt;a href="https://github.com/jml/code.mumak.net/issues"&gt;please file a bug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm afraid I have neither the energy nor the inclination to do a full write-up
of the migration process. However, I'll provide the following notes in case
they help anyone who wants to do the same thing.&lt;/p&gt;
&lt;h2&gt;Patches required&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican-plugins/pull/235"&gt;Handle unicode authors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/pull/1390"&gt;Basic blogger import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Comment support for blogger&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/jml/106e87af1bbf6067a94c"&gt;Post-processing of extracted HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Make the blog&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican-quickstart
&lt;span class="go"&gt;Welcome to pelican-quickstart v3.3.1.dev.&lt;/span&gt;

&lt;span class="go"&gt;This script will help you create a new Pelican-based website.&lt;/span&gt;

&lt;span class="go"&gt;Please answer the following questions so this script can generate the files&lt;/span&gt;
&lt;span class="go"&gt;needed by Pelican.&lt;/span&gt;


&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Where &lt;span class="k"&gt;do &lt;/span&gt;you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; code-blog
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; What will be the title of this web site? Mere Code
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Who will be the author of this web site? Jonathan M. Lange
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://code.mumak.net
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; How many articles per page &lt;span class="k"&gt;do &lt;/span&gt;you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 20
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; Y
&lt;span class="gp"&gt;&amp;gt;&lt;/span&gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Extract the things&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican-import --blogger -m markdown &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="go"&gt;  -o output-directory/ --wp-custpost --dir-page \&lt;/span&gt;
&lt;span class="go"&gt;  blog-08-29-2013.xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Transfer the things&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cp output-directory/* blog-directory/content/
&lt;span class="gp"&gt;$&lt;/span&gt; rm -rf blog-directory/content/settings blog-directory/content/templates/
&lt;span class="gp"&gt;$&lt;/span&gt; mv blog-directory/content/comments blog-directory
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Tweak the blog&lt;/h2&gt;
&lt;p&gt;Only
&lt;a href="https://github.com/jml/code.mumak.net/commit/4ed1bdf23811d01de8d2ed2392350dd63f3ecd8a"&gt;basic tweaks&lt;/a&gt;.
Note that the &lt;code&gt;pelican_comment_system&lt;/code&gt; plugin is used in order to nicely
render the imported blogger comments.&lt;/p&gt;
&lt;p&gt;I had to
&lt;a href="https://github.com/jml/pelican-themes/commit/ae3c4d3e78d75180a4c25a22de01790b7e502bab"&gt;manually tweak the theme&lt;/a&gt;
to support the comment system.&lt;/p&gt;</summary><category term="pelican"></category><category term="blog"></category></entry><entry><title>Deliberately being naughty</title><link href="http://code.mumak.net/2013/04/deliberately-being-naughty.html" rel="alternate"></link><updated>2013-04-29T13:23:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2013-04-29:2013/04/deliberately-being-naughty.html</id><summary type="html">&lt;p&gt;I don't get a whole lot of time to hack on things outside of work. Maybe
one or two slots of about two hours in a good week. What I want is for
that time to be fun, creative, and hopefully useful for others.  &lt;/p&gt;
&lt;p&gt;When I do get such discretionary time, what I often end up doing is code
review. I believe that finishing things is more important than starting
them, and know how much it sucks to be waiting for someone to review
your code.  &lt;/p&gt;
&lt;p&gt;So, I'll do a couple of code reviews (some of which might be strictly
blocking on me). And then I'll run out of time.  &lt;/p&gt;
&lt;p&gt;This means I rarely work on anything I actually find fun. Code reviews
are rarely fun.  &lt;/p&gt;
&lt;p&gt;There's a similar, related thing working on a project that's got a
backlog of code reviews, like, say Twisted. Twisted has forty or fifty
patches right now that are waiting for someone to review them. Do I want
to fix bugs in Twisted? That would be contributing to the patch problem,
so probably not. Do I want to do code reviews? Well, I guess I should,
but I'll probably find something else to do instead.  &lt;/p&gt;
&lt;p&gt;I don't think Twisted should change its policy. I think the solution is
for people like me to volunteer more time doing something they don't
necessarily enjoy for the sake of achieving some broader, nobler
outcome.  &lt;/p&gt;
&lt;p&gt;However, for me to sustain myself and keep enjoying open source and my
chosen career, I've decided to make sure that I regularly schedule
"naughty time". That's going to be time where I don't work on the thing
that I should be working on, but instead play with something I find
interesting at the time, even if it's not the best thing to do.&lt;/p&gt;</summary></entry><entry><title>testtools moved to Github</title><link href="http://code.mumak.net/2013/02/testtools-moved-to-github.html" rel="alternate"></link><updated>2013-02-13T14:48:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2013-02-13:2013/02/testtools-moved-to-github.html</id><summary type="html">&lt;p&gt;Those who closely follow
&lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools&lt;/a&gt; development will
notice something unusual in the 0.9.28 release: we now &lt;a href="https://github.com/testing-cabal/testtools/"&gt;host the code on
Github&lt;/a&gt; rather than &lt;a href="https://launchpad.net/testtools/"&gt;on
Launchpad&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;There are a few reasons behind the switch, but the biggest one is that
the ecosystem of tools and services around Git &amp;amp; Github is much, much
larger than that around Launchpad &amp;amp; Bazaar.  Already, by using Travis
(thanks &lt;a href="https://github.com/kampka/"&gt;kampka&lt;/a&gt;!), I've been able to kill
off an old, cruddy, insecure Jenkins installation on my server, and
actually get proper testing across all of the Python versions that
testtools supports.  No more, "oops, I broke 3.2" again.  &lt;/p&gt;
&lt;p&gt;We still &lt;a href="https://bugs.launchpad.net/testtools/+bugs"&gt;track our bugs on
Launchpad&lt;/a&gt;, because
Launchpad's bug tracker is still our favourite.  &lt;/p&gt;
&lt;p&gt;Happy hacking!  &lt;/p&gt;</summary><category term="testtools"></category></entry><entry><title>Are single letter variable names evil?</title><link href="http://code.mumak.net/2013/02/are-single-variable-names-evil.html" rel="alternate"></link><updated>2013-02-11T10:49:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2013-02-11:2013/02/are-single-variable-names-evil.html</id><summary type="html">&lt;p&gt;A colleague recently asked the question, "Are single letter variable
names evil?". He was trolling, and I kind of knew it, but gosh, what an
excuse to rant about code clarity! My comments ended up being multiple
pages long, so taking one of &lt;a href="http://mary.gardiner.id.au/"&gt;Mary
Gardiner&lt;/a&gt;'s suggestions to heart (although
I'm sure she regrets it now), I've turned it into a blog post.  &lt;/p&gt;
&lt;p&gt;In a nutshell, I don't think single variable names are evil. Lots of the
time they are a bad idea though.  &lt;/p&gt;
&lt;div&gt;

The classic rule of thumb I've heard is that "the length of the variable
name should be proportional to the log of the size of the scope". I
can't find who said that originally. My [best guess is Mike
Haertel](http://www.jetcafe.org/jim/c-style.html). It seems to be a good
rule of thumb.

&lt;/div&gt;

&lt;div&gt;

But the corollary is that sometimes when the code is confusing, the
problem isn't short variable names, it's that the scope is too large.

&lt;/div&gt;

&lt;div&gt;

Perhaps there's also something to be said for shorter names being more
useful for really generic code? I'm OK with an implementation of `map`
taking either `f` and `xs` or `function` and `things`. I don't think
either is better or worse.

&lt;/div&gt;

&lt;div&gt;

And maybe single letter variable names are acceptable when they are the
standard terms for the problem domain. `(x, y)` might be clearer than
`(horizontal_position, vertical_position)`. 

&lt;/div&gt;

&lt;div&gt;

Finally, Python's idiomatic filtering strongly encourages short names,
because you have to repeat it three times within the scope of one
expression:

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;meaningfully_named_list_of_things&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relevance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;THRESHOLD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;

vs:

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;meaningful_name&lt;/span&gt;

 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;meaningful_name&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;meaningfully_named_list_of_things&lt;/span&gt;

 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;meaningful_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relevance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;THRESHOLD&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;

It's probably subjective, but I think the second one is less clear,
since it obscures what's going on.﻿ Bice Dibley points out that in these
list comprehensions, `x` functions much like a pronoun in English.

&lt;/div&gt;

&lt;div&gt;

As is the case when writing prose, being clear is hard. Rules can help –
taking knowledge and distilling it into formal principles is one of the
best ways for us to progress as a species! – but as Orwell said:

&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Break any of these rules sooner than say anything outright barbarous.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div&gt;

(And [asking](http://mumak.net/stuff/your-code-sucks.html)
[someone](http://blog.labix.org/2013/02/06/ethics-for-code-reviewers) to
[look
over](http://www.codinghorror.com/blog/2006/01/code-reviews-just-do-it.html)
it soon will probably spare [troubles
later](http://www.osnews.com/story/19266/WTFs_m))

&lt;/div&gt;</summary></entry><entry><title>Getting set up with Twisted development</title><link href="http://code.mumak.net/2012/12/getting-set-up-with-twisted-development.html" rel="alternate"></link><updated>2012-12-15T10:55:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-12-15:2012/12/getting-set-up-with-twisted-development.html</id><summary type="html">&lt;p&gt;I haven't contributed much to Twisted recently, but today I'd really
like to get my &lt;a href="http://twistedmatrix.com/trac/ticket/6180"&gt;new Deferred
documentation&lt;/a&gt; ready for
review.  &lt;/p&gt;
&lt;p&gt;To my knowledge, the only sensible way to actually work on Twisted code
is using &lt;a href="http://twistedmatrix.com/trac/wiki/Combinator"&gt;Combinator&lt;/a&gt;.
With it, I can make branches, commit to those branches, merge in updates
from trunk and when my branch is approved, actually land it. All of this
is described more fully in Twisted's pioneering &lt;a href="http://twistedmatrix.com/trac/wiki/UltimateQualityDevelopmentSystem"&gt;Ultimate Quality
Development
System&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Combinator works by convention, so its source &lt;em&gt;must&lt;/em&gt; live within a
&lt;code&gt;Divmod/trunk&lt;/code&gt; directory. Since I have the divmod.org code in a
colocated Bazaar branch in &lt;code&gt;~/src/divmod.org&lt;/code&gt;, I created a new directory
under &lt;code&gt;~/src/&lt;/code&gt; called Divmod and symlinked trunk to it, approximating
the instructions on the &lt;a href="http://twistedmatrix.com/trac/wiki/Combinator"&gt;Combinator
page&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd src&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ mkdir Divmod&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ cd Divmod&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ ln -s ~/src/divmod.org trunk&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Trying to actually use Combinator only got me stack traces and warnings
though, so I poked around in the source code and now have a shell script
in \~/src/combinator.sh that does this:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;export COMBINATOR_PROJECTS=/home/jml/src&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;eval `python ~/src/Divmod/trunk/Combinator/environment.py`&lt;/code&gt;  &lt;/p&gt;
&lt;div&gt;

Sourcing that script works:

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;combinator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;span&gt;After that, I blew away my checkout of Twisted and made a newer,
Combinator-friendly one:&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;code&gt;$ rm -rf ~/src/Twisted&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ chbranch Twisted trunk \&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;svn+ssh://svn.twistedmatrix.com/svn/Twisted/trunk&lt;/code&gt;  &lt;/p&gt;
&lt;div&gt;

&lt;span&gt;All a little bit of a hassle, but worth it to get back into the
swing of contributing to Twisted.&lt;/span&gt;

&lt;/div&gt;</summary></entry><entry><title>What's wrong with ORMs</title><link href="http://code.mumak.net/2012/11/whats-wrong-with-orms.html" rel="alternate"></link><updated>2012-11-20T15:07:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-11-20:2012/11/whats-wrong-with-orms.html</id><summary type="html">&lt;p&gt;I was recently reading about &lt;a href="http://research.google.com/pubs/pub38125.html"&gt;F1, Google's fault-tolerant distributed
RDBMS&lt;/a&gt; and came across
this neat little summary of what's wrong with ORMs.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Obscured database operations&lt;/li&gt;
&lt;li&gt;Serial reads&lt;/li&gt;
&lt;li&gt;Implicit traversal&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;

*Obscured database operations* essentially means that when scanning
code, you cannot easily tell which code is going to kick off a network
round-trip to the database. If you care about writing code that performs
well, it's pretty important to know.

&lt;/div&gt;

&lt;div&gt;

*Serial reads* are what many in my circles know as "[potato
programming](http://divmod.readthedocs.org/en/latest/philosophy/potato.html)".
When you have a loop, and something inside that loop is doing a query,
that's potato programming. Again, disastrous for performance.

&lt;/div&gt;

&lt;div&gt;

*Implicit traversal* is doing unwanted joins and loading unnecessary
data. ORMs tend to load up an object with all of its instance variables,
which often means traversing the graph of references.

&lt;/div&gt;

&lt;div&gt;

Anyway, this is a much handier answer to have than 'google for "[Vietnam
of Computer
Science](http://blogs.tedneward.com/2006/06/26/The+Vietnam+Of+Computer+Science.aspx)"',
which is fascinating but rather lengthy. (See also [Jeff Atwood's
summary](http://www.codinghorror.com/blog/2006/06/object-relational-mapping-is-the-vietnam-of-computer-science.html)).

&lt;/div&gt;

&lt;div&gt;

For bonus points, these three things are also what's wrong
with [Launchpad's API](https://help.launchpad.net/API).

&lt;/div&gt;</summary></entry><entry><title>A Modest Success</title><link href="http://code.mumak.net/2012/11/a-modest-success.html" rel="alternate"></link><updated>2012-11-09T14:18:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-11-09:2012/11/a-modest-success.html</id><summary type="html">&lt;p&gt;Over the last few months, James Westby and I have been working on
automatic packaging. I want to talk today not about the thing itself but
rather how we go about making it, because I think that we have got a
fairly good process going.  &lt;/p&gt;
&lt;p&gt;Here's what it looks like.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conception&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;We pull the work that we do from a backlog of ideas and requests. For
example, a little while ago, we did some experiments that showed that if
we changed the way we mapped libraries to Ubuntu packages, we could get
much better results for automatically packaging binary apps. The project
to change this ended up in our backlog, and we recently decided to work
on it.  &lt;/p&gt;
&lt;p&gt;Before we begin work, we like to have a definition of "done". We also
write down why we are doing this, and what our assumptions are. We then
break things up into tasks. Maybe I'll dig into this another time.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Guts&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;Most of what we do goes in a loop:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make a branch&lt;/li&gt;
&lt;li&gt;Work on it&lt;/li&gt;
&lt;li&gt;Propose for merging&lt;/li&gt;
&lt;li&gt;Code review&lt;/li&gt;
&lt;li&gt;Automated tests-then-land&lt;/li&gt;
&lt;li&gt;Automatically triggered staging deploy&lt;/li&gt;
&lt;li&gt;Manual "is it deployable" check&lt;/li&gt;
&lt;li&gt;Request production deployment from webops &lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;

We use Bazaar for version control and we use Launchpad for hosting code
and doing code review. Here's [an example
one](https://code.launchpad.net/~jml/pkgme-service/remove-django-fixture/+merge/131424).

&lt;/div&gt;

&lt;div&gt;

Code review is quite often fairly boring. My guess is that one in ten
actually provoke interesting changes. Most of our branches make small
changes, all of our changes are covered with tests, and we have
confidence in our test suite and our ability &amp; willingness to make
follow-up improvements. Thus, rather than seeing code review as our last
line of defence for ensuring code quality, it's an opportunity to learn
and to perhaps accelerate the process by spotting problems earlier.

&lt;/div&gt;

&lt;div&gt;

Once a merge proposal is approved, magic happens.

&lt;/div&gt;

&lt;div&gt;

In this case, "magic" is a Jenkins instance that uses tarmac to poll
Launchpad to figure out which merge proposal are approved and thus ready
to land.  It runs our test suite, and if it passes, lands the change. If
it fails, it posts the failure to the merge proposal and our IRC channel
and marks it as needing more work.  

It's important here that our test suite is fast, that it's reliable, and
that it gives useful error messages when things fail.

&lt;/div&gt;

&lt;div&gt;

When the change is to a dependency, then we run the tests of the things
that depend on it with the latest change.

&lt;/div&gt;

&lt;div&gt;

After a successful change to trunk, we have a Jenkins job that triggers
an automatic deployment to our staging server.

&lt;/div&gt;

&lt;div&gt;

All of this takes less than five minutes.

&lt;/div&gt;

&lt;div&gt;

Once it's on staging, our "QA" website lists it as a revision that needs
to be manually verified. What we do there isn't really QA, but instead
making sure that if we roll it out to production, we won't break
anything. As with code review, we are confident in our ability to fix
things later.   

&lt;/div&gt;

&lt;div&gt;

We tend to do these in batches, as our webops are insanely busy. Once
we've got a group of changes that are safe to deploy to production, we
ping the webops, who then (I think) run a single command that deploys to
production very quickly. Sometimes because of interrupts, it can take
twenty minutes to an hour to get someone to do this.

&lt;/div&gt;

&lt;div&gt;

**Completion**

&lt;/div&gt;

&lt;div&gt;

At this stage, we return to our definition of done and check to see if
the change actually provides the value we thought. 

&lt;/div&gt;

&lt;div&gt;

Because automatic packaging is an inherently fuzzy problem, we run a
barrage of real world data through the new system to see if the recent
changes actually help. This also generates interesting qualitative data
that gives us hints on where we might want to work next.

&lt;/div&gt;

&lt;div&gt;

**Principles**

&lt;/div&gt;

&lt;div&gt;

**  
**

&lt;/div&gt;

&lt;div&gt;

This is the end result of a lot of work, mostly by James Westby with me
cheerleading from the sidelines. We've iterated through it a lot, making
things faster and more reliable, generally by going from polling to
events, by cutting out unnecessary review steps, and by making
visibility improvements for when things are broken.

&lt;/div&gt;

&lt;div&gt;

Underlying it all are a few principles that we have found to be either
true or useful:

&lt;/div&gt;

&lt;div&gt;

-   a thing is not done until users are happily using it
-   more strongly, a thing is not valuable until users are happily using
    it, until then it is wasted effort 
-   we should be able deploy any change in the main code or a dependency
    within minutes at any time, every time
-   all deployments must be from trunk, all revisions of trunk must be
    tested and known-good
-   we can avoid a lot of needless effort by asking ourselves why we are
    doing what we doing, and by being explicit about our assumptions
-   regressions are intolerable, everything else is tolerable, because
    we can, will and do fix it

&lt;div&gt;

Rather than spend time shaping up this information into a pitch for why
doing things our way will bring you fortune and glory, we just want to
use this post to do the bare minimum of making what we are doing known
more broadly.  

Do you do something similar? Is there something above that you would
like to know more about? Are we making claims that seem a bit
far-fetched? Are any of our principles BS? Have you tried working toward
goals like these?  

We would really love to know and to hear from you. It will help us get
better. Also, I've deliberately fudged some stuff, so it'd be great to
get called out on that.  

Thanks to James Westby for reviewing this post. All errors are mine.  


&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Undistract me (redux)</title><link href="http://code.mumak.net/2012/10/undistract-me-redux.html" rel="alternate"></link><updated>2012-10-04T11:35:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-10-04:2012/10/undistract-me-redux.html</id><summary type="html">&lt;p&gt;&lt;a href="http://code.mumak.net/2012/01/undistract-me.html"&gt;In January&lt;/a&gt;, I told
you all about a terminal hack to help me recover from the inevitable
distraction that comes when I run commands that take a while to run (for
me, mostly test suites).  &lt;/p&gt;
&lt;p&gt;I've been using the hack since then, and it has given me a great deal of
pleasure. Others have watched it and said that they very much wanted
it.  &lt;/p&gt;
&lt;p&gt;As such, you can now go to the
&lt;a href="http://mumak.net/undistract-me/"&gt;undistract-me&lt;/a&gt; website to get
instruction on how to download and install it. Or, if you're using
Ubuntu:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;undistract&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packagers&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;daily&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;undistract&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;Once you've done that, and have started a new login shell, then you'll
get a notification whenever a command that takes more than 10 seconds to
run finally completes.  &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://glyph.twistedmatrix.com/"&gt;Glyph Lefkowitz&lt;/a&gt; for &lt;a href="http://www.twistedmatrix.com/users/glyph/preexec.bash.txt"&gt;the
preexec hack&lt;/a&gt;
that made this possible, and to &lt;a href="http://www.tenshu.net/"&gt;Chris Jones&lt;/a&gt;,
&lt;a href="http://fewbar.com/"&gt;Clint Byrum&lt;/a&gt; and &lt;a href="http://mvogt.wordpress.com/"&gt;Michael
Vogt&lt;/a&gt; for their help in figuring out what I
should do.&lt;/p&gt;</summary></entry><entry><title>Rigor mortis?</title><link href="http://code.mumak.net/2012/08/rigor-mortis.html" rel="alternate"></link><updated>2012-08-31T13:35:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-08-31:2012/08/rigor-mortis.html</id><summary type="html">&lt;p&gt;I've been on a bit of a sanity bender recently: science, logic,
evidence, experimentation, clarity and things like that. Here's a short
list of some of the things I've been reading:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://hpmor.com/"&gt;Harry Potter and the Methods of
    Rationality&lt;/a&gt; (H/T mwhudson)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.co.uk/Straight-Crooked-Thinking-Robert-Thouless/dp/1444117181"&gt;Straight and Crooked
    Thinking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pretotyping.org/"&gt;Pretotype It&lt;/a&gt; (H/T lifeless)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gbt.org/text/sayers.html"&gt;Lost Tools of Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Facts-Dangerous-Half-Truths-Total-Nonsense/dp/1591398622/"&gt;Hard Facts, Dangerous Half-Truths and
    Total-Nonsense&lt;/a&gt; (H/T
    lifeless)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://glinden.blogspot.co.uk/2012/07/puzzling-outcomes-in-ab-testing.html"&gt;Puzzling outcomes in A/B
    testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mtholyoke.edu/acad/intrel/orwell46.htm"&gt;Politics and the English
    Language&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're writing software then I recommend "Pretotype It" first,
because it's likely to make you write &lt;em&gt;less&lt;/em&gt; software, and that can only
be a good thing. They are all great reads though.  &lt;/p&gt;
&lt;p&gt;There are a few general themes: be explicit about your assumptions and
try to verify or falsify them as soon as you may; do experiments; beware
of certain mistakes or logical short-cuts; learn statistics; understand
what you are saying. Wonderful notions all, but I'm not sure whether
they are working out for me.  &lt;/p&gt;
&lt;p&gt;Occasionally I'll get an email that has a couple of sentences but
somehow manages to squeeze in all sorts of conflations, non sequiturs,
and general fudging. It's hard to know where to begin. I can make a fair
stab at analyzing the errors, but synthesizing a response that actually
&lt;em&gt;helps&lt;/em&gt; is very hard.  &lt;/p&gt;
&lt;p&gt;Rigour also puts a restraint on rhetoric. It's hard to say something
convincingly when you have a bunch of qualifiers dangling at the end. My
writing (even now!) is slowed down as I notice the unfounded assertions
and unstated assumptions that lie behind it.  &lt;/p&gt;
&lt;p&gt;Also, much of this doesn't help you get from a vague, interesting
intuition to a workable idea, from hunch to hypothesis, if you will.
Sometimes a notion needs to time to grow before it's rejected as
irrational or incorrect. Something like &lt;a href="http://en.wikipedia.org/wiki/Six_Thinking_Hats"&gt;Thinking
Hats&lt;/a&gt; can help here.  &lt;/p&gt;
&lt;p&gt;This is all peanuts though. Do more science. Really.&lt;/p&gt;</summary></entry><entry><title>testtools: history and future</title><link href="http://code.mumak.net/2012/07/testtools-history-and-future.html" rel="alternate"></link><updated>2012-07-21T20:16:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-07-21:2012/07/testtools-history-and-future.html</id><summary type="html">&lt;p&gt;Before I started &lt;a href="http://testtools.rtfd.org/"&gt;testtools&lt;/a&gt; I was switching
regularly between &lt;a href="http://bazaar.canonical.com/"&gt;bzr&lt;/a&gt;,
&lt;a href="https://launchpad.net/launchpad"&gt;Launchpad&lt;/a&gt; and
&lt;a href="http://twistedmatrix.com/"&gt;Twisted&lt;/a&gt; and was sick of one excellent
testing innovation being available in one and not the other. I tried
submitting some of the improvements to Python. They were either ignored
or rejected.  &lt;/p&gt;
&lt;p&gt;Also, as the maintainer of Twisted's testing framework, Trial, I had
been burned several times when the standard library would change its API
in backwards compatible ways, so I wanted something that would
encapsulate all of that once and for all.  &lt;/p&gt;
&lt;p&gt;So, to provide a temporary ground between big, upstream projects that
are serious about testing and Python's standard library, I made the
project that was to become testtools. (It was originally called
pyunit3k. Sorry.).  &lt;/p&gt;
&lt;p&gt;Its constraints were that it should work with Python 2.4, 2.5, 2.6, 2.7
and 3.1 (Bazaar, Launchpad &amp;amp; Twisted all cared about Python 2.4 at the
time), that any code in it should be allowed to go into Python without
special permission from contributors, and that it wasn't to have any
frivolous innovation, patches should be of code proven to be useful
elsewhere.  &lt;/p&gt;
&lt;p&gt;Then eventually Michael Foord started maintaining Python's standard
unittest. While we haven't always seen eye-to-eye on the details, it's
definitely been a huge improvement, and Michael deserves props for doing
a job that I was unwilling to do. Releasing
&lt;a href="http://pypi.python.org/pypi/unittest2/"&gt;unittest2&lt;/a&gt; was a great step,
and I think a good model of how any standard library maintenance should
be done.  &lt;/p&gt;
&lt;p&gt;Since then, we've lightened the restraint on innovation in testtools,
and the last release was our last release to support Python 2.4 and 2.5.
The people who use it really love it, we've had plenty of contributors,
I use it on heaps of projects, and it certainly makes my job much, much
easier.  &lt;span&gt;Launchpad and Bazaar use it, but Twisted probably won't
ever, so that's 66% success according to my original
motivation. &lt;/span&gt;  &lt;/p&gt;
&lt;div&gt;

I wish more people would use testtools. Actually, no, that's not right.
I wish more people would use the things in testtools. If people do that,
it makes it easier for me to contribute to their code, and makes using
their testing innovations much easier. 

&lt;/div&gt;

&lt;div&gt;

As such, I'm hoping to try to get some of the most useful bits
([matchers](http://testtools.readthedocs.org/en/latest/for-test-authors.html#matchers)
first) into upstream Python. Wish me luck.

&lt;/div&gt;</summary></entry><entry><title>Complexity and capability</title><link href="http://code.mumak.net/2012/07/complexity-and-capability.html" rel="alternate"></link><updated>2012-07-21T18:11:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-07-21:2012/07/complexity-and-capability.html</id><summary type="html">&lt;p&gt;"You might think that some people are better at understanding complexity
than others, but relative to the sheer scale of the complexity that we
can all create, we are all about the same."  &lt;/p&gt;
&lt;p&gt;I think Rich Hickey said this. It's true.&lt;/p&gt;</summary></entry><entry><title>juju debug-hooks</title><link href="http://code.mumak.net/2012/06/juju-debug-hooks.html" rel="alternate"></link><updated>2012-06-26T13:43:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-06-26:2012/06/juju-debug-hooks.html</id><summary type="html">&lt;p&gt;OK, I think I've figured it out.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://juju.ubuntu.com/docs/hook-debugging.html"&gt;juju debug-hooks&lt;/a&gt;
replaces hooks for a service unit with an interactive terminal session.
You run it, it launches &lt;a href="http://tmux.sourceforge.net/"&gt;tmux&lt;/a&gt; (which
seems to be a thing like screen or byobu), and when a hook for that
service unit runs, it &lt;em&gt;won't&lt;/em&gt; run the hook in the charm, rather it opens
a new window and you can then do whatever you want in that. Including
manually running the hook in the charm.  &lt;/p&gt;
&lt;p&gt;debug-hooks doesn't actually do anything to your hooks, nor does it
increase the amount of information available to you (e.g. by increasing
log verbosity). It just replaces hooks with terminal sessions.  &lt;/p&gt;
&lt;p&gt;You have to know the service unit first, e.g. libdep-service/41.  &lt;/p&gt;
&lt;p&gt;It seems as if it's a really common thing to want to use debug-hooks on
install. There doesn't seem to be any smooth way. As far as I can tell,
you have to run 'juju deploy', run 'juju status', quickly note the unit
name and then run 'juju debug-hooks'.  &lt;/p&gt;
&lt;p&gt;That aside, it's very useful. I found myself using it to edit hooks (and
puppet files used by my hooks) and re-run them until they worked.  &lt;/p&gt;
&lt;p&gt;Still don't know easy way of exporting changes to a charm on a unit back
down to my laptop.  &lt;/p&gt;</summary></entry><entry><title>Tricks for exploring new languages?</title><link href="http://code.mumak.net/2012/06/tricks-for-exploring-new-languages.html" rel="alternate"></link><updated>2012-06-25T09:15:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-06-25:2012/06/tricks-for-exploring-new-languages.html</id><summary type="html">&lt;p&gt;Here's my problem. There are a bunch of languages I want to explore more
(Clojure, Haskell, Go). I've wanted to do this for some time. I haven't
done it. I've &lt;a href="http://code.mumak.net/2012/02/bad-snake-joke.html"&gt;mentioned this
before&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;At it's simplest and most fundamental, this comes down to poor
self-management stemming from an inaccurate personal vision. That is,
"If it's important, you'll find a way. If not, you'll find an excuse."  &lt;/p&gt;
&lt;p&gt;But, setting aside deep-level character hacking, there's got to be
something to make this easier. Part of the problem is that Python is so
smooth, I've been with it so long and most of the technologies I want to
interact with have a strong Python component. Any time I have an itch
that needs scratching, Python is the comforting abrasive of choice. I
can do whatever it is about 10x faster with it than with another, new
language.  &lt;/p&gt;
&lt;p&gt;Perhaps all I need to do is gird my loins and prepare myself for the
confusion and time expenditure that comes with
&lt;a href="http://code.mumak.net/2012/06/further-reflections-on-my-first-juju.html"&gt;learning&lt;/a&gt;
anything
&lt;a href="http://code.mumak.net/2012/06/unfiltered-reflections-on-my-first-juju.html"&gt;new&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Gentle reader, do you have any tips for escaping the Python gravity well
and exploring languages unknown?  &lt;/p&gt;</summary></entry><entry><title>Further reflections on my first Juju charm</title><link href="http://code.mumak.net/2012/06/further-reflections-on-my-first-juju.html" rel="alternate"></link><updated>2012-06-22T18:19:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-06-22:2012/06/further-reflections-on-my-first-juju.html</id><summary type="html">&lt;p&gt;Since I wrote the notes that appear in my previous post, I've had a
chance to reflect further on my experience writing a Juju charm.&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;The thing is, even though the end result is very cool – I can just
deploy this code as a new service whenever I want without having to
think about it – the experience wasn't great. I wasn't having a fun time
getting it to work. I think there are a few reasons for this.&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;First, I was on my own. I work from home and most days I sit down
in my office and plug away at my laptop. I generally like it, but there
are times when it's not great. Most of the time I'm doing things I
already know how to do: debugging strange production problems; deleting
unnecessary Python code; encouraging people to get to the point in
meetings and &lt;a href="https://plus.google.com/115348217455779620753/posts/J8to9rW8Ef8"&gt;despairing over voice communication
technologies&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;Juju is still a fairly new technology. The &lt;a href="http://juju.ubuntu.com/docs/"&gt;published
documentation&lt;/a&gt; is still a bit raw, the
website isn't the easiest to navigate and the tools could do a better
job at being self-documenting. It's demotivating to want to do a thing,
not know how to do it and not know how to find out how to do it. That's
one of the reasons I mentioned that #juju is a much better place when
the US is awake: that's when the experts are around. T&lt;/span&gt;&lt;span&gt;he
Juju shamans know about these problems and are working now to the whole
learning experience much better.&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Tangent: I'd very much encourage you to go to a &lt;a href="https://juju.ubuntu.com/CharmSchool"&gt;Charm
School&lt;/a&gt; if you get the chance. The
Juju guys are super-helpful, fun to be around, and the whole thing is
much more pleasant when you're with other people and not the only one
asking dumb questions. I went to one, but I didn't do the
&lt;a href="https://juju.ubuntu.com/CharmSchool#Necessary_Software"&gt;preparation&lt;/a&gt;,
and had a dodgy laptop, so I spent all of my time head-butting network
issues rather than actually writing charms. &lt;a href="https://juju.ubuntu.com/docs/getting-started.html#configuring-a-local-environment"&gt;Do the
preparation&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Second, the core feedback loop wasn't that great. I'm a bit spoiled.
Most of the time, I run tests, they run very quickly, I get very nicely
formatted results in colour, I fix the small, known number of failures,
I run the tests, everything works and I get a visual sweetie from
laptop. Automating the deploymment of pre-alpha software is not like
that at all.  &lt;/p&gt;
&lt;p&gt;The feedback loop is longish, about 2-5 minutes. By default, you have to
sit watching the debug-log to tell when it's done or when it hits a
fatal error. &lt;span&gt;If you accidentally run an interactive command in
your install hook, then deployment will stall. &lt;/span&gt;&lt;span&gt;You don't
get any notice of success or failure, and certainly nothing that you
could integrate into your desktop (e.g. beep when done). Over two
minutes is long enough for me to get distracted, but under five minutes
is short enough that I won't switch to any task that requires
concentration. It doesn't make for a pleasant day.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;Oh, I should mention that I got stuck for a while at the very
outset, redeploying the same version of my charm because I forgot to
update the revision file and didn't realize that I actually wanted to
run deploy with the &lt;code&gt;--upgrade&lt;/code&gt; option.&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;When you do get errors, there are likely to be many of them, and
they are messily strewn about the debug log in hard to find places,
cluttered with useless stuff. This is largely not Juju's fault: it's the
fault of the system tools that you have to call to get things set up.
Juju's debug-log does give an option to limit output to just "ERROR"
level message, but that includes noise from things like GPG and Bazaar
(which emit to stderr as part of normal behaviour, &lt;a href="https://bugs.launchpad.net/juju/+bug/955209"&gt;which Juju
interprets as ERROR&lt;/a&gt;). It
also doesn't give you enough context to debug the real errors. There are
also some &lt;a href="https://bugs.launchpad.net/juju/+bug/1015655"&gt;formatting
glitches&lt;/a&gt;, and it doesn't
have colour.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
I mentioned these things about the feedback loop to a colleague. He
rightly pointed out that I was speaking very much as a programmer,
accustomed to bouncing on &lt;code&gt;make check&lt;/code&gt;. For a sysadmin, being able to
redeploy on a fresh machine from scratch and see all the errors in one
place in under five minutes is a huge improvement.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Third, I have to pass on some of this knowledge to &lt;em&gt;my&lt;/em&gt; users. Or
at least, people who are contributing to my project ought to be able to
quickly learn how to fire up the charm. At the moment, there are still a
few too many ifs, buts, maybes and perhaps-try-thises that I'm
&lt;a href="http://paste.ubuntu.com/1054697/"&gt;compelled to include&lt;/a&gt;. I'll probably
turn the documentation into a script at some point, as others seem to
&lt;a href="https://gist.github.com/2050525"&gt;have&lt;/a&gt;
&lt;a href="https://gist.github.com/1406018"&gt;done&lt;/a&gt;.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;That's it. It's a &lt;em&gt;much&lt;/em&gt; longer post than I expected. Sorry. I
hope it helps some.&lt;/span&gt;  &lt;/p&gt;</summary></entry><entry><title>Unfiltered reflections on my first Juju charm</title><link href="http://code.mumak.net/2012/06/unfiltered-reflections-on-my-first-juju.html" rel="alternate"></link><updated>2012-06-22T13:03:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-06-22:2012/06/unfiltered-reflections-on-my-first-juju.html</id><summary type="html">&lt;div&gt;

I just finished up my first [Juju](https://juju.ubuntu.com/) charm,
designed to deploy the tiny and not-yet-useful
[libdep-service](https://launchpad.net/libdep-service/), which is going
to become a micro-service used by
[pkgme-service](https://launchpad.net/pkgme-service), which exists to
automatically package submissions by application developers to
[developer.ubuntu.com](http://developer.ubuntu.com/).

&lt;/div&gt;

&lt;div&gt;

The charm works, insofar as it brings up a Django service that
implements the API. It's not really ready for others to use, as it
doesn't provide any interfaces and doesn't make good use of Juju's
configuration system.

&lt;/div&gt;

&lt;div&gt;

It's very early days for me as a Juju user. The notes below are largely
about problems, but I'm actually fairly optimistic that having a charm
for my service will be very useful. Two big benefits so far:

&lt;/div&gt;

&lt;div&gt;

1.  There's less code than in my equivalent fabric task for deploying to
    EC2
2.  I can deploy to LXC on my laptop, which means a fast, clean, local,
    production-like environment

&lt;div&gt;

Anyway, on with the notes.

&lt;/div&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;span&gt;\#juju is heaps better when America is awake&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;upgrading with apt requires a lot of options, but this is quite a
standard&lt;/span&gt;&lt;span&gt; action&lt;/span&gt;

&lt;/li&gt;
-   &lt;span&gt;e.g.
    `sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -q -y`&lt;/span&gt;
-   You get this by default if you don't use sudo, and you don't have to
    use sudo

&lt;li&gt;
&lt;span&gt;so many [things that are just warnings are marked
as` ERROR`](https://bugs.launchpad.net/juju/+bug/955209), makes
debugging &lt;/span&gt;&lt;span&gt;much harder&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;perhaps this is intrinsic, but there are almost always four to six
errors &lt;/span&gt;&lt;span&gt;to be debugged at once&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Don't use lp: URLs to fetch branches because it generates
warnings. Use http://code.launchpad.net/ instead.&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Is there a way to have a local apt mirror or something to make
iterating&lt;/span&gt;&lt;span&gt; faster?  Is this what I've got already?&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;When translating from fabric `run("cd X &amp;&amp; Y")`, remember that
fabric &lt;/span&gt;&lt;span&gt;restores directory after `run`&lt;/span&gt;

&lt;/li&gt;
-   &lt;span&gt;&lt;span&gt;Use&lt;/span&gt;`(cd X &amp;&amp; Y)`&lt;span&gt; in bash instead, runs in a
    subshell&lt;/span&gt;&lt;/span&gt;

&lt;li&gt;
&lt;span&gt;**ACTION:** Look up 'man 8 apt-get' for --force-yes and why it's
bad&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Long-ish iteration cycle (2-5 mins) makes it a bit slow
going&lt;/span&gt;

&lt;/li&gt;
-   &lt;span&gt;See also [Users not told when deploy actually
    completes](https://bugs.launchpad.net/juju/+bug/1015644)&lt;/span&gt;
-   &lt;span&gt;Iterating with 'deploy --upgrade', watch 'debug-log',
    'destroy-service', &lt;/span&gt;&lt;span&gt;(sometimes 'bzr ci'; 'bzr
    push')&lt;/span&gt;

-   &lt;span&gt;**ACTION:** Poke around more with 'juju debug-log' (see
    also &lt;/span&gt;["juju debug-hooks -h" doesn't say what 'debug-hooks'
    does](https://bugs.launchpad.net/juju/+bug/1016003))

&lt;li&gt;
&lt;span&gt;After delegating to puppet, if that fails, the `install` hook
doesn't fail&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;&lt;span&gt;Ended up putting the puppet stuff should be in the charm to
avoid having to commit &amp;&lt;/span&gt;&lt;span&gt; push the branch up&lt;/span&gt;&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;A little bit surprised that hooks run as root.  I don't have a
credible &lt;/span&gt;&lt;span&gt;alternative to hand, but I thought that this was
what we wanted to get away&lt;/span&gt;&lt;span&gt; from with .debs.&lt;/span&gt;

&lt;/li&gt;
-   &lt;span&gt;How do I run things with less privilege&lt;/span&gt;

&lt;li&gt;
&lt;span&gt;I do server-side changes a fair bit to fix things. It's easy to
forget a &lt;/span&gt;&lt;span&gt;step when applying them back to the charm /
manifest. No easy way of&lt;/span&gt;&lt;span&gt; checking either.&lt;/span&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;span&gt;Bouncing on this command is heaps
better:&lt;/span&gt;&lt;span&gt;`juju deploy --repository=charms --upgrade \`&lt;/span&gt;`  local:libdep-service &amp;&amp; jitsu watch libdep-service \    --state=started --num-units=1`

&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Married</title><link href="http://code.mumak.net/2012/05/married.html" rel="alternate"></link><updated>2012-05-28T09:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-05-28:2012/05/married.html</id><summary type="html">&lt;p&gt;I'm back online after three weeks vacation. Purpose of said vacation was
to get married and go on honeymoon. Only thing to say about that is:
huge success. I'm very, very happy.  &lt;/p&gt;
&lt;p&gt;While I've been gone, Ubuntu has had its developer summit and decreed
that Ubuntu 12.10 will have only Python 3 on the CD. As such, a few
people have done a bunch of work on the
&lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools&lt;/a&gt; cluster
(&lt;a href="http://pypi.python.org/pypi/fixtures"&gt;fixtures&lt;/a&gt;,
&lt;a href="http://pypi.python.org/pypi/testscenarios"&gt;testscenarios&lt;/a&gt;, etc.),
making them Python 3 compatible, or fixing compatibility bugs where they
existed. It's such a nice feeling to come back from vacation and taste
the delicious fruits of other's labour. Well done all!  &lt;/p&gt;</summary></entry><entry><title>Local Juju</title><link href="http://code.mumak.net/2012/03/local-juju.html" rel="alternate"></link><updated>2012-03-02T16:45:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-03-02:2012/03/local-juju.html</id><summary type="html">&lt;p&gt;I have a bit of a fetish for being able to hack offline. It's becoming
increasingly old-fashioned, I know, but I'd like to think that
eventually it will become a quirky and charming eccentricity, such as
one might find in a British amateur sleuth.  &lt;/p&gt;
&lt;p&gt;I wanted to get up and running with &lt;a href="https://juju.ubuntu.com/"&gt;Juju&lt;/a&gt;,
&lt;a href="http://www.canonical.com/"&gt;Canonical&lt;/a&gt;'s funky cloud orchestration
thingy. We're doing a lot more service-oriented stuff in recent months,
and it's very handy to be to just deploy something without having to
faff about for a couple of hours. Since I'd like to stand a chance of
doing this without a net connection, I set it up locally.  &lt;/p&gt;
&lt;p&gt;With the help of the &lt;a href="https://juju.ubuntu.com/CharmSchool"&gt;Charm School&lt;/a&gt;
page, the &lt;a href="https://juju.ubuntu.com/docs/provider-configuration-local.html"&gt;local provider
docs&lt;/a&gt;
and the kind folk at #juju on Freenode, I got something up and running.
Some notes about the experience:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I did all of this in precise, and it seemed to work just fine. I
    substituted 'precise' for 'oneiric' wherever I saw it.&lt;/li&gt;
&lt;li&gt;I had to manually add my user to the &lt;code&gt;libvirtd&lt;/code&gt; group. The
    instructions implied that this was not necessary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;juju bootstrap&lt;/code&gt; finished very quickly for me and without any actual
    evidence that it had debootstrapped the whole OS.&lt;/li&gt;
&lt;li&gt;When I deployed services, I didn't get any feedback that anything
    was going on. The recommended &lt;code&gt;debug-log&lt;/code&gt; command showed very little
    output for a while. My guess is that this was while packages were
    downloading.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

All in all, pretty impressive. I'm really looking forward to mucking
around with this a bit more

&lt;/div&gt;</summary></entry><entry><title>Bad Snake Joke</title><link href="http://code.mumak.net/2012/02/bad-snake-joke.html" rel="alternate"></link><updated>2012-02-25T13:36:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-02-25:2012/02/bad-snake-joke.html</id><summary type="html">&lt;p&gt;Just between you and me, I'm getting a bit bored of writing Python all
the time. It's a good language: I can write code that's functional or OO
as the case may be; it has lots of libraries; it has
&lt;a href="http://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;, which is incredibly useful; it's
not &lt;em&gt;too&lt;/em&gt; hard to make &lt;a href="https://code.launchpad.net/+branch/launchpad"&gt;a big
project&lt;/a&gt; and keep it
clean. It's the least awful programming language that I know of. That
said, I'd like to do something different.  &lt;/p&gt;
&lt;p&gt;I would like to play with something makes static typing rock (like
Haskell), or that has what &lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Rich Hickey
calls&lt;/a&gt;
"polymorphism a la carte" (again, like
&lt;a href="http://book.realworldhaskell.org/read/using-typeclasses.html"&gt;Haskell&lt;/a&gt;,
or &lt;a href="http://clojure.org/Protocols"&gt;Clojure&lt;/a&gt;). I would like to make
something that stands a chance of feeling snappy (perhaps
&lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt;?), a chance to use something with richer
debugging and refactoring tools, or to get a feel for doing some serious
concurrency work outside of an event loop.  &lt;/p&gt;
&lt;p&gt;But mainly, I'm just bored of Python.  &lt;/p&gt;
&lt;p&gt;Also, I increasingly suspect that Python &lt;a href="http://www.biblegateway.com/passage/?search=gen%203:14&amp;amp;version=NIV"&gt;doesn't have
legs&lt;/a&gt;.
The Python 3 language change has increased the split between the core
developer community and people writing code in the field. Python
continues to be slow, both with start-up time and while running. The
only people who seem to care are the &lt;a href="http://speed.pypy.org/"&gt;PyPy&lt;/a&gt;
developers, but I doubt I'll ever get to use it for commercial
development. It's tricky to write code in Python that takes advantage of
multiple cores, and even my phone has multiple cores now.  &lt;/p&gt;
&lt;p&gt;When I get the chance, I'm going to do more with Haskell and Clojure in
my spare time. I'm not sure if there is something less "fringe" that I
could recommend for use at Canonical. &lt;a href="http://golang.org/"&gt;Go&lt;/a&gt; is a
possibility, if a slightly disappointing one (interfaces are cool, but
why oh why didn't they do typeclasses?).&lt;/p&gt;</summary></entry><entry><title>testtools 0.9.14 released</title><link href="http://code.mumak.net/2012/02/testtools-0914-released.html" rel="alternate"></link><updated>2012-02-16T10:55:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-02-16:2012/02/testtools-0914-released.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools&lt;/a&gt;'s sister project,
&lt;a href="https://launchpad.net/subunit"&gt;subunit&lt;/a&gt;, was using a private API that
we deleted in the 0.9.13 release.  This release restores that API in
order to smooth out the upgrade path.  &lt;/p&gt;
&lt;p&gt;If you don't use subunit, then this release won't matter very much to
you.  &lt;/p&gt;</summary></entry><entry><title>testtools 0.9.13 released</title><link href="http://code.mumak.net/2012/02/testtools-0913-released.html" rel="alternate"></link><updated>2012-02-06T15:55:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-02-06:2012/02/testtools-0913-released.html</id><summary type="html">&lt;p&gt;It has been a while, but &lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools
0.9.13&lt;/a&gt; is finally out! Lots more
matchers and bug fixes, as well as improved error reporting. Full
release notes &lt;a href="https://launchpad.net/testtools/0.9/0.9.13"&gt;on
Launchpad&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://jameswestby.net/weblog"&gt;James Westby&lt;/a&gt;, &lt;a href="http://grahambinns.com/"&gt;Graham
Binns&lt;/a&gt;, &lt;a href="https://launchpad.net/~frankban"&gt;Francesco
Banconi&lt;/a&gt; and &lt;a href="http://rbtcollins.wordpress.com/"&gt;Robert
Collins&lt;/a&gt; for making this release
possible.&lt;/p&gt;</summary><category term="testtools"></category></entry><entry><title>Simple made easy</title><link href="http://code.mumak.net/2012/02/simple-made-easy.html" rel="alternate"></link><updated>2012-02-01T13:50:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-02-01:2012/02/simple-made-easy.html</id><summary type="html">&lt;p&gt;Rich Hickey did a great talk at Strange Loop called "&lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Simple Made
Easy&lt;/a&gt;". You should
watch it.  &lt;/p&gt;
&lt;p&gt;When I tried to explain the talk to someone, I stumbled a lot and it was
obvious to me that I didn't really understand it. So I'm going through
it again and turning it into a blog post, purely for my own gain.  &lt;/p&gt;
&lt;p&gt;This is roughly the first half of the talk. Not much of my own analysis
or opinion is inserted, and I've pretty much stuck with Hickey's
illustrations and phrasings. Thus this post is pretty derivative. Oops.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simple vs Easy&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;"Simple" means one thing, "easy" another. Simple is the opposite of
complex. A thing is simple if it has no interleaving, if it has one
purpose, one concept, one dimension, one task. Being simple does not
imply one instance or one operation: it's about interleaving, not
cardinality. Importantly, this means that simplicity is &lt;em&gt;objective&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;Easy is the opposite of hard, or difficult. A thing is easy if it's near
to hand, if it's easy to get at (location), if it's near to our
understanding (familiarity) or skill set or if it's within our
capabilities. This means that ease is &lt;em&gt;relative&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;Speaking English is dead easy for me, but that doesn't mean that
speaking English is intrinsically simple. I find French quite difficult.
Little French children speak French all the time, and there's always a
part of me that thinks, "Boy, those kids are clever, being able to speak
a foreign language at that age", but that's silly. It's easy for them,
it lies near to them.  &lt;/p&gt;
&lt;p&gt;This distinction between simple &amp;amp; easy is good one, and is useful in all
sorts of areas. But how does it relate to software?  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constructs vs Artefacts&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;As programmers, when we make software we are working on &lt;em&gt;constructs&lt;/em&gt;:
source code, libraries, language concepts and so forth. Rich contends
that we focus on the ease of use of those constructs: How many lines of
code? How much boilerplate? Will new developers be familiar with our
technology?  &lt;/p&gt;
&lt;p&gt;But all of this is secondary. What actually matters is the &lt;em&gt;artefact&lt;/em&gt;,
the running programs that users actually use. Does it do what it's
supposed to do? Does it do it well? Can we rely on it working well? Can
we fix problems when they occur? Can we change it? You know, the
interesting problems.  &lt;/p&gt;
&lt;p&gt;Thus we need to be assessing our constructs – our code, our technology
choices – based on the attributes of the artefacts that we'll create,
not based on the experience of typing code in.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Limits&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;We can't make something reliable if we don't understand it. And,
actually, everyone's understanding is pretty limited. We can all only
hold a small number of things in our head at once.  &lt;/p&gt;
&lt;p&gt;When things are complex, many parts are tied together by definition. You
can't pull out just one piece and consider it because it's intertwined
with other pieces. This creates an extra burden to understanding a
system and thus makes it difficult to reason about the system.  &lt;/p&gt;
&lt;p&gt;You do need to reason about a system, both to know what to change and to
be able to do so without introducing defects. Tests, refactoring, rapid
deployment and all that are great, but to make a change to the system
safely &amp;amp; without fear still requires you to be able to reason about it.
Every bug in your product that was found in the field passed the type
checker and passed all of the tests.  Your type system doesn't tell you
what change to make next in order to get the software you want any more
than guard rails on a highway tell you how to get to Grandma's.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speed&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Focusing on ease and ignoring simplicity means that you'll go really
fast in the beginning, but will become slower and slower as the
complexity builds.  &lt;/p&gt;
&lt;p&gt;Focusing on simplicity will mean that you'll go slower in the beginning,
because you'll have to do some work to simplify the problem space, but
making sure that you only have intrinsic complexity means that your rate
of development will remain at a high constant.  &lt;/p&gt;
&lt;p&gt;There are no actual numbers for this.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Complicating constructs&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Many complicating constructs are available, familiar, succinctly
described and easy to use. But none of that matters to end users. What
matters is the complexity they yield. This complexity is &lt;em&gt;incidental&lt;/em&gt;,
it's not intrinsic to the problem.  &lt;/p&gt;
&lt;p&gt;If we build things simply, then the resulting system is easier to debug,
easier to change and easier to understand.  &lt;/p&gt;
&lt;p&gt;Compare a knitted castle to a castle made of Lego. The knitted castle
might have been great fun to make, and might have been really easy if
knitted using a loom and cutting edge knitting tools, but there's no way
that it's easier to change than a Lego castle. It's not about the &lt;em&gt;ease
of construction&lt;/em&gt;, it's about the &lt;em&gt;simplicity of the artefact&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can we make software easier?&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Well, we can install it to make it easier by location. We can learn it
and try it to make it easier by familiarity. We can't do much about our
capabilities though. If we want software to be easier to comprehend, we
are going to have to bring it down to our level. We have to make it
simpler.  &lt;/p&gt;
&lt;p&gt;Take Lisp as an example. It's hard for many people because they don't
have a Lisp installed, or their editor doesn't support paren matching,
but they can make it easier by installing a Lisp and getting a plugin
for their editor. It's also hard because it's unfamiliar. Who'd have
thought that parens could go on that side of the function? But you can
gain that familiarity quickly enough.  &lt;/p&gt;
&lt;p&gt;But parens in Lisp are used for functions and for grouping data. That's
hard to get your head around, and that's because it's complex. It braids
together two distinct notions.&lt;/p&gt;</summary></entry><entry><title>Undistract me</title><link href="http://code.mumak.net/2012/01/undistract-me.html" rel="alternate"></link><updated>2012-01-23T17:44:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2012-01-23:2012/01/undistract-me.html</id><summary type="html">&lt;p&gt;Here's a thing that happens a lot to me: I'm doing some work, and as
part of that work I need to run a command in my terminal that takes a
little while. I run the command, look at it for about a second and then
switch to doing something else – checking email, perhaps. I get deeply
involved in my email checking, and then about twenty minutes later I
switch back to the terminal and see the command has finished. For all I
know, it finished nineteen minutes ago, and I was just too engrossed to
notice it.  &lt;/p&gt;
&lt;p&gt;This is a big productivity sink for me, especially if the command
happened to fail and need retrying. I'm not disciplined enough to just
sit and watch the command, and I'm not prescient enough to add something
to each invocation telling me when a command is done. What I want is
something that alerts me whenever long running commands finish.  &lt;/p&gt;
&lt;p&gt;Well, that thing now exists, thanks to
&lt;a href="http://glyph.twistedmatrix.com/"&gt;glyph&lt;/a&gt;'s &lt;a href="http://glyph.twistedmatrix.com/2006/11/bash-shell-is-now-fully-operational.html"&gt;script that provides precmd
and postcmd support to
bash&lt;/a&gt; and
a lot of help from &lt;a href="http://www.tenshu.net/"&gt;Chris Jones&lt;/a&gt; of
&lt;a href="http://www.tenshu.net/p/terminator.html"&gt;Terminator&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To use it right now:&lt;br /&gt;
&lt;code&gt;$ bzr co lp:~jml/+junk/shell-tools&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ . shell-tools/long-running.bash&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;$ notify_when_long_running_commands_finish_install&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;You'll see that if you run a command that takes over 30 seconds to
complete, it will pop up a notification, which should hopefully take you
away from whatever it was you are doing and back to the task at hand.  &lt;/p&gt;
&lt;p&gt;If you &lt;a href="http://bazaar.launchpad.net/~jml/+junk/shell-tools/view/head:/long-running.bash"&gt;look at the
code&lt;/a&gt;,
you'll see that it installs two hooks: &lt;code&gt;precmd&lt;/code&gt; and &lt;code&gt;preexec&lt;/code&gt;. &lt;code&gt;preexec&lt;/code&gt;
runs just before the shell launches a command, and &lt;code&gt;precmd&lt;/code&gt; runs just
before it prompts for the next command. Our &lt;code&gt;preexec&lt;/code&gt; stores when the
command was launched and the &lt;code&gt;precmd&lt;/code&gt; checks to see if it finished
within a certain time frame. If not, it sends out a notification.  &lt;/p&gt;
&lt;p&gt;Currently, you'll get a notification when you finish reading a long
document, since the command finishes a long time after the command
starts. Obviously this isn't ideal. I think the fix is to only send
notifications when the shell doesn't have focus. Unfortunately, that's a
little tricky and I think is going to be highly terminal specific.  &lt;/p&gt;
&lt;p&gt;Anyway, I'm a total shell newbie, so I'd love to know if there's any way
this could be done better.  Also let me know if you find this useful, or
you know of someone who has already done this.&lt;/p&gt;</summary></entry><entry><title>What are my projects?</title><link href="http://code.mumak.net/2011/12/what-are-my-projects.html" rel="alternate"></link><updated>2011-12-26T04:54:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-12-26:2011/12/what-are-my-projects.html</id><summary type="html">&lt;p&gt;Launchpad doesn't really have any good mechanism for letting you review
a list of "your" projects.  &lt;/p&gt;
&lt;p&gt;That's partly because there are a lot of different ways that it
&lt;em&gt;could&lt;/em&gt; do it. You could be the maintainer of a project, or its driver,
or its bug supervisor, or you might have commit access to its trunk
branch. All of this could be direct, or through membership of a team.
It's tough.  &lt;/p&gt;
&lt;p&gt;Since it's that time of year when I review my projects,
responsibilities, goals and the like and start to figure out what I want
to do next year, I want to figure out what are my projects on
Launchpad.  &lt;/p&gt;
&lt;p&gt;Luckily, Launchpad has an API. I can't use it to figure out what
projects I'm the maintainer of, but I can use it to figure out &lt;a href="http://paste.ubuntu.com/783038/"&gt;what
trunk branches I have commit access
to&lt;/a&gt;.  The link has the Python code for
the script.  &lt;/p&gt;
&lt;p&gt;Really, Launchpad should allow me to curate my own list of projects,
with input to that list coming from all of the sources mentioned above,
as well as arbitrarily selecting projects.&lt;/p&gt;</summary></entry><entry><title>pyflakes update</title><link href="http://code.mumak.net/2011/11/pyflakes-update.html" rel="alternate"></link><updated>2011-11-21T14:29:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-11-21:2011/11/pyflakes-update.html</id><summary type="html">&lt;p&gt;Thanks to &lt;a href="http://radix.twistedmatrix.com/"&gt;radix&lt;/a&gt;,
&lt;a href="http://as.ynchrono.us/"&gt;exarkun&lt;/a&gt; &amp;amp; &lt;a href="http://as.ynchrono.us/"&gt;dash&lt;/a&gt;, my
branch to &lt;a href="http://pypi.python.org/pypi/pyflakes"&gt;pyflakes&lt;/a&gt; to warn about
duplicate definitions of classes finally landed. I did the work a year
ago as an outrage-powered, opportunistic fix after I saw a co-worker
struggle with tests weirdly not failing (Turned out it was a huge test
module and there was another class at the bottom with the same name).
I'm very happy to see it landed.  &lt;/p&gt;
&lt;p&gt;For those who haven't been paying attention, official pyflakes
development is now taking place on &lt;a href="https://launchpad.net/"&gt;Launchpad&lt;/a&gt;
as part of the &lt;a href="http://launchpad.net/divmod.org"&gt;divmod.org&lt;/a&gt; project.
The trunk of that project now has the best version of pyflakes known to
man.  &lt;/p&gt;
&lt;p&gt;pyflakes is the best static Python checker. It's fast, and has very few
false positives.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; A couple of people have asked me about
&lt;a href="https://launchpad.net/pyflakes"&gt;lp:pyflakes&lt;/a&gt;. It's dead. It died when
the divmorg.org trac instance died ages ago. Don't use it. To get
pyflakes or any other divmod project, use
&lt;a href="https://launchpad.net/divmod.org"&gt;lp:divmod.org&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Automatic packaging update</title><link href="http://code.mumak.net/2011/11/automatic-packaging-update.html" rel="alternate"></link><updated>2011-11-10T12:40:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-11-10:2011/11/automatic-packaging-update.html</id><summary type="html">&lt;p&gt;I just blogged on developer.ubuntu.com about &lt;a href="http://developer.ubuntu.com/2011/11/automatic-packaging-progress/"&gt;the work we're doing with
automatic
packaging&lt;/a&gt;.
Read it!&lt;/p&gt;</summary></entry><entry><title>How to feel better (or, some tips on refactoring)</title><link href="http://code.mumak.net/2011/11/how-to-feel-better-or-some-tips-on.html" rel="alternate"></link><updated>2011-11-04T18:29:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-11-04:2011/11/how-to-feel-better-or-some-tips-on.html</id><summary type="html">&lt;p&gt;&lt;span&gt;A few months back I gave a lightning talk at the
&lt;a href="https://launchpad.net/"&gt;Launchpad&lt;/a&gt; Thunderdome about how I do
refactoring.  It's very opinionated, and mostly applies to big, old code
bases, but worth writing up anyway.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;The core idea here is that very few things make me feel as good as
deleting code. I love cleaning up code and the clean code base that
results, and I'm sure that many others feel like me. As such, this is a
guide on how to feel better.&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Know your enemy&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;“Functionality is an asset, code is a liability”. Truer words were never
spoken. Every line of code is a potential source of bugs and a barrier
to understanding, and thus carries a maintenance cost.  &lt;/p&gt;
&lt;p&gt;Maintain an awareness of things that need refactoring. Here's a quick
and incomplete list:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;unused code – this can be deleted&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;boilerplate – this should become a function or class&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;wrong documentation – these should be updated&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;two ways of doing something – perhaps there should be
    one&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;bad names – change them to something that makes you think
    less&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Keep a "yak stack"&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html"&gt;Yak
shaving&lt;/a&gt;&lt;span&gt; is
"any seemingly pointless activity which is actually necessary to solve a
problem which solves a problem which, several levels of recursion later,
solves the real problem you're working on." (&lt;a href="http://catb.org/jargon/html/Y/yak-shaving.html"&gt;Jargon
File&lt;/a&gt;)&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;A few of us have extended the concept beyond the "actually necessary" to
include anything that's making the task at hand more difficult and less
fun but is not worth fixing &lt;em&gt;right&lt;/em&gt; now. Hence the yak stack. Here's how
it works:  &lt;/p&gt;
&lt;p&gt;Whenever you come across something in your code base that is difficult
to understand or that slows you down: make a note of it. When you've
finished the task at hand, fix the problem. If you encounter other
things that slow you down, write them down. Work through the list.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Every option is wrong&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;In a big, old code base, there are probably many, many areas that need
refactoring.  Don't worry about which is the "best" place to start –
there is no best place.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Start from green, stay green&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Never, ever refactor while your tests are failing. Refactoring is about
changing the shape of code while preserving its behaviour. It's much
harder to be sure you're keeping the behaviour if you are comparing one
set of thirty tracebacks with another set of thirty tracebacks. Better
to compare a passing ("green") test run with another passing test run.  &lt;/p&gt;
&lt;p&gt;Run tests frequently. More often then you think you should. Commit often
– think of it like quick save in a tough level of a video game. It frees
you up to experiment more and means you have less in your head at any
one time.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Do not nest&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Don't begin a refactoring while you are in the middle of another
refactoring. If you find you must, use tools like '&lt;a href="http://doc.bazaar.canonical.com/beta/en/user-guide/shelving_changes.html"&gt;bzr
shelve&lt;/a&gt;'
to store your current diff and then work from the clean head of your
branch.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Keep moving, leave a trail&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Don't get bogged down in details, otherwise you'll never finish.
Literally. Someone will come along and distract you and before you know
it, three months will pass and your refactoring branch will be full of
conflicts. If you see something you are unsure of, mark it with a XXX or
a FIXME or a TODO or whatever works for you and then continue with what
you are doing.  &lt;/p&gt;
&lt;p&gt;Tools like '&lt;a href="http://launchpad.net/difftodo"&gt;bzr todo&lt;/a&gt;' can make it
really easy to check to see if you've added any XXX comments.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. Translate tests with care&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;As said above, refactoring is about changing the shape of code while
preserving its behaviour. When you update tests, you risk changing your
definition of the system's behaviour – so be careful.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. Confront uncertainty with destruction&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;If you see some code and you are not sure if it's needed, delete it.
Doesn't matter if it's a whole function or just an odd line. If you have
a test suite, and it was important, that will catch the failure. If you
have version control, and it was important, one of your collaborators
will notice and revert the change.  &lt;/p&gt;
&lt;p&gt;If it was important and neither of these happened, then your whole
project has learned something new about itself, and that's probably
worth the hassle. (Oh, add tests &amp;amp; better docs after this happens.)  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. Good grep tools&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Remember that symbols aren't only referenced from files that match
*.py.  In big code bases there are often other sorts of files that
refer to symbols in the main code. In Launchpad, for example, we have
ZCML and doctest files that refer to symbols. When you want to know how
something is used or you want to rename something, make sure you use a
grep command that actually finds everything.  &lt;/p&gt;
&lt;p&gt;Ideally, you should be able to run this command faster than you can
think about wanting to do it.  &lt;/p&gt;
&lt;p&gt;Personally, I use 'bzr grep' a lot. Others recommend 'ack'.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;10. There will be failures&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Mentally prepare yourself for the fact that the first two or three full
test runs after your refactoring will fail.  This is especially
important for code bases that have multi-hour test run times.  &lt;/p&gt;
&lt;p&gt;If you think this way, then you won't be as discouraged when it actually
happens.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;11. Finish the job&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Busy people refactoring a big code base are often tempted to apply a
refactoring to only a single part.  For example, some useful function is
extracted from repeated boilerplate in a few other functions. However,
many, many other instances in the code base continue to use the repeated
boilerplate.  &lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;almost&lt;/em&gt; worse than just leaving the repeated boilerplate.
 There are now two idiomatic ways of doing the activity.  Further, other
developers who work on other parts of the code base probably won't find
out about it, and might end up repeating your refactoring. Ugh. How is
anyone new expected to get to grips with this code?  &lt;/p&gt;
&lt;p&gt;Similarly, if a class, function or concept is renamed, rename it
everywhere, especially in the documentation.  &lt;/p&gt;
&lt;p&gt;It's difficult and often tedious, but it really is worth taking
refactorings to completion. Apply them to the whole code base, or not at
all.  &lt;/p&gt;
&lt;p&gt;Note that I'm referring to completeness, not perfection. If you block on
perfection, you never get anything useful done. If you aim for frequent
incremental improvements, you soar.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;12. Read these books&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;I highly recommend
"&lt;a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1320430812&amp;amp;sr=1-1"&gt;Refactoring&lt;/a&gt;"
by Martin Fowler and "&lt;a href="http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1320430812&amp;amp;sr=1-1"&gt;TDD by
Example&lt;/a&gt;"
by Kent Beck. I stole many of these ideas from them.  &lt;/p&gt;
&lt;div&gt;

**Over to you**

&lt;/div&gt;

&lt;div&gt;

**  
**

&lt;/div&gt;

&lt;div&gt;

This was very much just a dump of how I do refactoring when hacking on
Launchpad. I'm always keen to learn more, and would love to hear about
what works for you.

&lt;/div&gt;</summary></entry><entry><title>testtools 0.9.12 out</title><link href="http://code.mumak.net/2011/09/testtools-0912-out.html" rel="alternate"></link><updated>2011-09-14T11:01:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-09-14:2011/09/testtools-0912-out.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools&lt;/a&gt; 0.9.12 has just been
released!  &lt;/p&gt;
&lt;p&gt;It's a huge release, this one. We normally try to release much more
frequently, but for this release I wanted to wait until &lt;a href="https://bugs.launchpad.net/testtools/+bugs?field.tag=unicode&amp;amp;field.status=Fix+Released"&gt;all of our
known unicode handling bugs were
fixed&lt;/a&gt;.
Today, &lt;a href="https://launchpad.net/~gz"&gt;Martin [gz]&lt;/a&gt; finished off his &lt;a href="https://code.launchpad.net/~gz/testtools/unprintable-assertThat-804127/+merge/72641"&gt;heroic
branch&lt;/a&gt;
to fix up
&lt;a href="http://testtools.readthedocs.org/en/latest/for-test-authors.html#matchers"&gt;&lt;code&gt;assertThat&lt;/code&gt;&lt;/a&gt;,
and I figured it was time to release.  &lt;/p&gt;
&lt;p&gt;In addition to all of the unicode fixes, we've really cleaned up the way
test failures are displayed. A lot of the boilerplate around the
traceback has been removed, a lot of levels of the stack are gone
(although you can get them back if you want), and &lt;code&gt;assertThat&lt;/code&gt; is way
less repetitive. This all really adds up. If you're using an old
release, you want to upgrade right now. Honest.  &lt;/p&gt;
&lt;p&gt;For me, this release is the one where using
&lt;a href="http://testtools.readthedocs.org/en/latest/for-test-authors.html#matchers"&gt;matchers&lt;/a&gt;
becomes really and properly fun. As such, all of our &lt;code&gt;assertFoo&lt;/code&gt; methods
are now implemented in terms of matchers.  &lt;/p&gt;
&lt;p&gt;Of course, we have our usual raft of fixes, helpers and new matchers
too. The &lt;a href="https://launchpad.net/testtools/0.9/0.9.12"&gt;full changelog&lt;/a&gt; is
on Launchpad.  &lt;/p&gt;
&lt;p&gt;In addition to Martin [gz], thanks to &lt;a href="https://launchpad.net/~kampka"&gt;Christian
Kampka&lt;/a&gt;, &lt;a href="https://launchpad.net/~lifeless"&gt;Robert
Collins&lt;/a&gt; and
&lt;a href="http://canonical.com/"&gt;Canonical&lt;/a&gt; for making this release what it is.  &lt;/p&gt;
&lt;p&gt;If you're new to testtools, it's basically a way to do serious,
&lt;a href="http://testtools.readthedocs.org/en/latest/overview.html"&gt;tasteful unit testing in
Python&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Documentation lives at &lt;a href="http://testtools.readthedocs.org/en/latest/"&gt;http://testtools.readthedocs.org/en/latest/&lt;/a&gt;.&lt;br /&gt;
PyPI: &lt;a href="http://pypi.python.org/pypi/testtools"&gt;http://pypi.python.org/pypi/testtools&lt;/a&gt;&lt;br /&gt;
All development takes place on
Launchpad: &lt;a href="https://launchpad.net/testtools"&gt;https://launchpad.net/testtools&lt;/a&gt;&lt;br /&gt;
Join us on #python-testing on Freenode  &lt;/p&gt;
&lt;p&gt;We don't currently have a release PPA, but we do have a &lt;a href="https://launchpad.net/~testing-cabal/+archive/archive"&gt;daily builds
PPA&lt;/a&gt;. The trunk
is kept stable using &lt;a href="http://mumak.net:8080/job/testtools/"&gt;Jenkins&lt;/a&gt;, so
it's fairly safe to use.&lt;/p&gt;</summary></entry><entry><title>doctest really isn't very good</title><link href="http://code.mumak.net/2011/09/doctest-really-isnt-very-good.html" rel="alternate"></link><updated>2011-09-09T17:39:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-09-09:2011/09/doctest-really-isnt-very-good.html</id><summary type="html">&lt;p&gt;&lt;span&gt;I just got sick of trying to decode obtuse doctest diff errors
when using NORMALIZE_WHITESPACE and ELLIPSIS options. Although doctest
gives you hooks to do something about this, it's really hard to actually
write the logic.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;See, NORMALIZE_WHITESPACE also normalizes line breaks, and '...'
can match across multiple lines. That means that you can't take a
line-based approach, which makes it really hard to clean up a diff.
Anyway, here's my
attempt: &lt;/span&gt;&lt;a href="https://code.launchpad.net/~jml/testtools/better-doctest-output-checker/+merge/74842"&gt;https://code.launchpad.net/~jml/testtools/better-doctest-output-checker/+merge/74842&lt;/a&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;It's a pain, because both of them would be very useful without
their line-spanning behaviour. I guess without the line-spanning
behaviour of '...' there'd be no way to indicate multiple lines of crap
in output.&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;br /&gt;
&lt;/span&gt;&lt;br /&gt;
&lt;span&gt;&lt;span&gt;My suggestion in the mean time? Don't use
doctest.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary></entry><entry><title>Progress on auto packaging</title><link href="http://code.mumak.net/2011/08/progress-on-auto-packaging.html" rel="alternate"></link><updated>2011-08-23T18:09:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-08-23:2011/08/progress-on-auto-packaging.html</id><summary type="html">&lt;p&gt;Instead of a junk branch, the auto packaging code now has &lt;a href="https://launchpad.net/pkgme-binary"&gt;a proper home
on Launchpad&lt;/a&gt;. I've filed bugs for
all of the things that I could think of that were wrong with it.
Actually, that's a lie. When I spot something wrong in code or behaviour
I make a note, usually a XXX comment. The bugs up there are the ones I
got from grepping my notes.  &lt;/p&gt;
&lt;p&gt;Anyway, minor rant on effective use of brain and the gift of literacy
aside, I've also done a &lt;a href="https://wiki.ubuntu.com/AutomagicBinaryPackaging"&gt;reasonably detailed
specification&lt;/a&gt;. It's
been a long time since I've done a spec this technical &amp;amp; detailed, but I
hope it works out. If you have any comments or questions, ask here or on
the spec itself.&lt;/p&gt;</summary></entry><entry><title>How dependency guessing works</title><link href="http://code.mumak.net/2011/08/how-dependency-guessing-works.html" rel="alternate"></link><updated>2011-08-18T12:18:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-08-18:2011/08/how-dependency-guessing-works.html</id><summary type="html">&lt;p&gt;Although in my &lt;a href="http://code.mumak.net/2011/08/automagic-packaging-of-binary-apps-for.html"&gt;last
post&lt;/a&gt;
I talked about our proof of concept tool, I didn't actually explain how
to use it. That's mostly because it's not quite ready to be used by
others. There's a good reason.  &lt;/p&gt;
&lt;p&gt;The most interesting thing that
&lt;a href="https://code.launchpad.net/~jml/+junk/pkgme-binary"&gt;pkgme-binary&lt;/a&gt; does
is to guess the dependencies of an application given only its tarball.
The way it does this is by finding all of the ELF objects (executables,
shared libraries etc.), reading the symbols from them, and figuring out
the packages based on those.  &lt;/p&gt;
&lt;p&gt;Canny readers are already thinking, "Yes, that is what dpkg-shlibdeps
does" – which is true. As some background, Debian packages that export
symbols for linking also provide explicit metadata about those symbols
and what versions they appear in, in order to allow Debian packagers to
figure out dependencies easily using dpkg-shlibdeps. Fascinating reading
can be found in the &lt;a href="http://www.debian.org/doc/debian-policy/ch-sharedlibs.html"&gt;Debian policy
manual&lt;/a&gt;, a
&lt;a href="http://wiki.debian.org/Projects/ImprovedDpkgShlibdeps"&gt;spec on improving
dpkg-shlibdeps&lt;/a&gt;
and &lt;a href="http://wiki.debian.org/UsingSymbolsFiles"&gt;the guide on using the new symbol
files&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Unfortunately, dpkg-shlibdeps can only query packages that are installed
on your system. If you have a binary with symbols that are not provided
by any library on your system, you cannot use it to calculate
dependencies. Debian (or the Debian flavour of your choosing) might have
a perfectly good package to satisfy that dependency, but you won't be
able to find it.  &lt;/p&gt;
&lt;p&gt;So, to do dependency guessing properly, you need to have a database
mapping symbols back to packages. Debian already has something like this
in its &lt;a href="http://qa.debian.org/cgi-bin/mole/seedsymbols/"&gt;mole database&lt;/a&gt;.
Ubuntu doesn't have anything like this that I know about.  &lt;/p&gt;
&lt;p&gt;Assembling and maintaining such a database is pretty much a simple
matter of programming, but it's still work that I wanted to avoid for
the proof-of-concept. Instead, I used the mole database in Debian for
the calculations. That means we'll get wrong answers for Ubuntu, but it
demonstrates that the concept works.  &lt;/p&gt;
&lt;p&gt;Since I have a copy of that mole database locally, and since it's about
1.5GB, I'm not distributing it with the branch. Which means that the
&lt;a href="https://code.launchpad.net/~jml/+junk/pkgme-binary"&gt;automagic binary packaging
branch&lt;/a&gt; won't
actually work for you.  &lt;/p&gt;</summary></entry><entry><title>Automagic packaging of binary apps for Ubuntu</title><link href="http://code.mumak.net/2011/08/automagic-packaging-of-binary-apps-for.html" rel="alternate"></link><updated>2011-08-18T11:57:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-08-18:2011/08/automagic-packaging-of-binary-apps-for.html</id><summary type="html">&lt;p&gt;For the last few weeks I've been working on a tool to automagically
package binary applications for Ubuntu. The idea is that anyone who
wants to distribute a binary app on Ubuntu should be able to do so
without having to learn how to package it.  &lt;/p&gt;
&lt;p&gt;I've used &lt;a href="http://pkgme.net/"&gt;pkgme&lt;/a&gt; to build a proof-of-concept: which
you can look at here:
&lt;a href="https://code.launchpad.net/~jml/+junk/pkgme-binary"&gt;lp:\~jml/+junk/pkgme-binary&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Or, you can watch the demo:  &lt;/p&gt;
&lt;div class="separator" style="clear: both; text-align: center;"&gt;

&lt;/div&gt;

&lt;p&gt;Right now, the tool assumes that the tarball:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is an application&lt;/li&gt;
&lt;li&gt;contains ELF objects that can be scanned for symbols, which
    determine the dependencies&lt;/li&gt;
&lt;li&gt;has one main executable file&lt;/li&gt;
&lt;li&gt;that its contents can be copied into &lt;code&gt;/opt/$PACKAGE/&lt;/code&gt; and can be run
    from there by an ordinary user&lt;/li&gt;
&lt;li&gt;comes with a JSON file specifying extra metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

Our hope is that 90% of the binary applications we get will meet these
requirements.

&lt;/div&gt;

&lt;div&gt;

The plan is to take this proof-of-concept and turn it into something
that will run server-side behind the [Ubuntu Developer
Portal](http://developer.ubuntu.com/). Next steps are to spec it out,
create a project, start filing bugs and fix the bugs I already know
about.

&lt;/div&gt;

&lt;div&gt;

Watch this space for more updates.  

Thanks to James Westby and Adam Conrad for their help in doing the
proof-of-concept and to the dozen or so people who helped me get the
darn screencast out.

&lt;/div&gt;</summary></entry><entry><title>launchpadlib helper</title><link href="http://code.mumak.net/2011/08/launchpadlib-helper.html" rel="alternate"></link><updated>2011-08-02T11:05:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-08-02:2011/08/launchpadlib-helper.html</id><summary type="html">&lt;p&gt;I often need to muck around in a Python interpreter to figure out what I
need to do with &lt;a href="https://help.launchpad.net/API"&gt;Launchpad's API&lt;/a&gt;. As it
is, I write out the same commands over and over.  &lt;/p&gt;
&lt;p&gt;Since repetition is a stupid boring job that we should force machines to
do while they are still subservient, I wrote &lt;a href="http://paste.ubuntu.com/657088/"&gt;a
harness&lt;/a&gt; that, when run, gives you a
Python interpreter and a few useful objects for playing with the
Launchpad API.  &lt;/p&gt;
&lt;p&gt;For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lpharness&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;authenticated&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt; &lt;span class="n"&gt;objectme&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;logged&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;useranon&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;anonymous&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt; &lt;span class="n"&gt;objecterrors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;launchpadlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errorsuris&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;launchpadlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urispprint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pretty&lt;/span&gt; &lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;Progress&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bug_task&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//api.launchpad.net/1.0/launchpad/+bug/240067&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/launchpad/+bug/418932&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/hydrazine/+bug/535414&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/hydrazine/+bug/574981&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/hydrazine/+bug/612641&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/tarmac/+bug/683351&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/wikkid/+bug/695232&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/launchpad/+bug/721166&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/ensemble/+bug/728320&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/bughugger/+bug/731075&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/tarmac/+bug/807785&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/pkgme/+bug/809447&amp;gt;, &amp;lt;bug_task at https://api.launchpad.net/1.0/ubuntu-archive-tools/+bug/805634&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://paste.ubuntu.com/657088/"&gt;http://paste.ubuntu.com/657088/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;You are free to do whatever you like with it. I hope that someone puts
it into some useful, &lt;em&gt;maintained&lt;/em&gt;, centralized place for doing stuff
with Launchpad. Perhaps launchpadlib itself.  &lt;/p&gt;</summary></entry><entry><title>Command line apps</title><link href="http://code.mumak.net/2011/08/command-line-apps.html" rel="alternate"></link><updated>2011-08-01T10:59:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-08-01:2011/08/command-line-apps.html</id><summary type="html">&lt;p&gt;Back in the day, I used to want to use
&lt;a href="http://twistedmatrix.com/projects/core/documentation/howto/options.html"&gt;twisted.python.usage&lt;/a&gt;
for all of my command-line apps. It's a fairly nice
&lt;a href="http://twistedmatrix.com/documents/8.2.0/api/twisted.python.usage.html"&gt;API&lt;/a&gt;
&amp;amp; a good way of writing code.  &lt;/p&gt;
&lt;div&gt;

Since I started writing Bazaar plugins though, I've fallen in love with
Bazaar's command interface.
[Jamu](https://code.edge.launchpad.net/~jkakar) has too, so he wrote
[Commandant](https://edge.launchpad.net/commandant). I don't really
understand it though, which is mostly for lack of trying.

&lt;/div&gt;

&lt;div&gt;

Michael turned our internal EC2-using testing tool into a bzr-a-like app
[using the Bazaar
APIs](http://bazaar.launchpad.net/~launchpad-pqm/launchpad/stable/annotate/head:/lib/devscripts/ec2test/builtins.py).
There's a bit of duplication, but it works pretty well.

&lt;/div&gt;

&lt;div&gt;

The Bazaar developers are aware that their command-line interface code
rocks and that it's too closely bound to Bazaar. I'm not sure whether
anyone has filed bugs about it or not, but here's what I actually want:

&lt;/div&gt;

&lt;div&gt;

-   The subcommand interface, e.g. "bzr foo"
-   Option parsing
-   Help
-   Command aliasing
-   Error handling
-   Progress display
-   Verbosity control 
-   Logging
-   Debug helpers (e.g. The way bzr handles Ctrl-\\)

&lt;div&gt;

There's also a bunch of cool stuff in Bazaar that's useful for a lot of
applications, command-line or not.

&lt;/div&gt;

&lt;div&gt;

-   Registries
-   Transports
-   Hooks
-   Configuration files
-   Oh yeah, **plugins**. (How could I have forgotten this?)

&lt;div&gt;

Sometimes I wish projects like Bazaar and Twisted split this sort of
stuff out into separate packages. That would probably change the way the
packages are maintained, and I don't know whether it would be for better
or for worse.

&lt;/div&gt;

&lt;div&gt;

Sadly, no moral or action for this post. Just stuff that's been on my
mind that I wanted to write down and publish. I'd very much welcome
input.  

**Update:** Was rewriting this post, then realized that, umm, well, it
was a rewrite.

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Ubuntu on my iMac</title><link href="http://code.mumak.net/2011/07/ubuntu-on-my-imac.html" rel="alternate"></link><updated>2011-07-10T13:52:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-07-10:2011/07/ubuntu-on-my-imac.html</id><summary type="html">&lt;p&gt;Long time readers will know of my attempts to get Ubuntu running on my
iMac. Now that I'm working within the Ubuntu Engineering team at
Canonical, I figured it would be a good time to try again.  &lt;/p&gt;
&lt;p&gt;Installing natively fails on 11.04 in the same way that it failed on
10.10: the installer sends output to the Mini DisplayPort rather than
the actual screen. I don't have an external monitor that I can hook up
to the DisplayPort, so that's pretty much that.  &lt;/p&gt;
&lt;p&gt;I can still run a VM, right? VirtualBox is pretty good, and I got me a
running install of Ubuntu with the Unity shell without too much fuss.
Problem comes with keyboard configuration. The literal keypresses Cmd+H
and Cmd+Q are not passed through to the guest OS. With a Dvorak layout
these become Cmd+D and Cmd+", and if one maps Cmd to Meta then you
cannot easily kill-word in Emacs. That means for me to have a useful
environment, I'd have to make do with Super and Meta swapped around from
the usual PC layout.  &lt;/p&gt;
&lt;p&gt;VM Fusion doesn't have this problem and has a nicer UI, but I can't run
Unity or compiz under it. This makes Ubuntu feel really old and clunky,
and I'd rather not do that.  &lt;/p&gt;
&lt;p&gt;Parallels, well, at this point I'm running out of the will.  &lt;/p&gt;
&lt;p&gt;Think I'll settle on VirtualBox for the time being.&lt;/p&gt;</summary></entry><entry><title>Leaving Launchpad, going to work on Ubuntu</title><link href="http://code.mumak.net/2011/06/leaving-launchpad-going-to-work-on.html" rel="alternate"></link><updated>2011-06-20T11:10:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-06-20:2011/06/leaving-launchpad-going-to-work-on.html</id><summary type="html">&lt;p&gt;After four and a half years of working on
&lt;a href="https://launchpad.net/"&gt;Launchpad&lt;/a&gt;, I'm moving on within Canonical,
taking a &lt;a href="http://t.co/R37ybBu"&gt;position&lt;/a&gt; on the Ubuntu Engineering team,
working to get more and better apps on &lt;a href="http://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I am very excited about the change, but also a little sad, since it will
mean leaving what has been &lt;em&gt;the&lt;/em&gt; best team I've worked on. They are a
wonderful bunch of people who not only get a lot of great stuff done,
but consistently surprise me with their constant drive to get better at
what they do.  &lt;/p&gt;
&lt;p&gt;Over the last couple of years, we have changed the way we are organized
so that we can focus on building a small number of features at a time,
the features that we do churn out are much, much better, we are rolling
out new versions of Launchpad multiple times a week and we are actually
paying off technical debt.  &lt;/p&gt;
&lt;p&gt;And they've needed to: Launchpad is a massive, ambitious application.
I've never worked on something so big that aims to do so much, and with
so few people actually hacking on it.  &lt;/p&gt;
&lt;p&gt;I still care a lot about Launchpad, It's crammed with potential and has
so much to offer the open source world. It's going to be hard for me to
move on.  &lt;/p&gt;
&lt;p&gt;But, wow, what a place to move on to, and what a time to do it. Ubuntu
is aiming to go from about 20 million users to about 200 million, and to
do that is going to need way, way more apps than they have now. To do
&lt;em&gt;that&lt;/em&gt;, we'll need a spiffing developer programme, and that's where I
come in. I'll be loading up on information, plans and more concrete
goals in a couple of week's time in Dublin, and will share them as I
can.  &lt;/p&gt;
&lt;p&gt;Oh, and if you want to guide the world's &lt;a href="https://launchpad.net/"&gt;best open source development
collaboration platform&lt;/a&gt; into the future, do drop
me or &lt;a href="https://launchpad.net/~flacoste"&gt;Francis Lacoste&lt;/a&gt; a line.&lt;/p&gt;</summary></entry><entry><title>testtools 0.9.11 released</title><link href="http://code.mumak.net/2011/06/testtools-0911-released.html" rel="alternate"></link><updated>2011-06-12T13:08:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-06-12:2011/06/testtools-0911-released.html</id><summary type="html">&lt;p&gt;While I slept, &lt;a href="https://launchpad.net/~lifeless"&gt;Robert Collins&lt;/a&gt;
released &lt;a href="http://pypi.python.org/pypi/testtools/0.9.11"&gt;testtools
0.9.11&lt;/a&gt;. This release is
mostly a bug fix release, but the fixes are very much worthwhile.  &lt;/p&gt;
&lt;p&gt;In particular, &lt;a href="https://launchpad.net/~gz"&gt;Martin [gz]&lt;/a&gt; got our Python 3
support going again, &lt;a href="http://gavinpanella.com/"&gt;Gavin Panella&lt;/a&gt; fixed up
a dodgy Matcher and fixed a bug in how we feed information from fixtures
into test results.  &lt;/p&gt;
&lt;p&gt;Also in this release, &lt;a href="https://launchpad.net/~tcole"&gt;Tim Cole&lt;/a&gt; and
&lt;a href="http://sourcefrog.net/"&gt;Martin Pool&lt;/a&gt; made their first ever patches, for
which they have my hearty thanks and congratulations. (The
congratulations are also hearty.)  &lt;/p&gt;
&lt;p&gt;As always, it's just so darn &lt;em&gt;pleasant&lt;/em&gt; to see so many fine people
working together to make an open source project work.&lt;/p&gt;</summary><category term="testtools"></category></entry><entry><title>testtools 0.9.10 released</title><link href="http://code.mumak.net/2011/04/testtools-0910-released.html" rel="alternate"></link><updated>2011-04-11T12:44:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-04-11:2011/04/testtools-0910-released.html</id><summary type="html">&lt;p&gt;There was a bug in testtools 0.9.9 that prevented it from being
easy_installed. Tres Seaver has fixed this bug, and I've rolled out a
new release: &lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools 0.9.10&lt;/a&gt;.
Sorry for the inconvenience folks.&lt;/p&gt;</summary><category term="testtools"></category></entry><entry><title>testtools 0.9.9 released</title><link href="http://code.mumak.net/2011/04/testtools-099-released.html" rel="alternate"></link><updated>2011-04-08T12:00:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-04-08:2011/04/testtools-099-released.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools&lt;/a&gt; 0.9.9 has been
released today. For me, the twin pillars of this release have been our
&lt;a href="http://readthedocs.org/docs/testtools/en/latest/"&gt;vast documentation
improvements&lt;/a&gt; and &lt;a href="http://readthedocs.org/docs/testtools/en/latest/for-test-authors.html#matchers"&gt;the
new
matchers&lt;/a&gt;,
which make it very, very easy to make meaningful assertions about
complex objects. Well worth checking out.&lt;/p&gt;
&lt;div&gt;

Thanks to Christian Kampka, Robert Collins, Aaron Bentley, Jelmer
Vernooij and Michael Hudson-Doyle their contributions.

&lt;/div&gt;</summary></entry><entry><title>mdz on listening to users</title><link href="http://code.mumak.net/2011/03/mdz-on-listening-to-users.html" rel="alternate"></link><updated>2011-03-08T09:02:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-03-08:2011/03/mdz-on-listening-to-users.html</id><summary type="html">&lt;p&gt;&lt;a href="http://mdzlog.alcor.net/"&gt;Matt Zimmerman&lt;/a&gt; writes about whether we
should &lt;a href="http://mdzlog.alcor.net/2011/03/07/listening-to-users/"&gt;listen to
users&lt;/a&gt;. It's a
great post, and you should read it, but the summary is:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you want inspiration for a new product, don't listen to users,
    watch them&lt;/li&gt;
&lt;li&gt;To test whether a product is a good fit, ask users for feedback and
    listen to it&lt;/li&gt;
&lt;li&gt;If you want to incrementally improve an existing offering, don't
    listen, gather data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm over-simplifying, you should read the original post. I also wonder
whether it should be "when is it safe to not act on user feedback",
rather than "not listening" per se.&lt;/p&gt;</summary></entry><entry><title>Music is too hard</title><link href="http://code.mumak.net/2011/02/music-is-too-hard.html" rel="alternate"></link><updated>2011-02-02T12:04:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-02-02:2011/02/music-is-too-hard.html</id><summary type="html">&lt;p&gt;It's way too hard to keep all of my music stored on one machine in a
lossless format, have it backed up to another machine, synced to my iPod
in MP3 and have it pleasingly playable on my OS X computer. Way too
hard. Really.&lt;br /&gt;
Especially since fixes to track listings and so forth seem to vanish
like smoke in the breeze. Banshee and Rhythmbox both pretend to help,
but that's only so they can mess with my life more.&lt;/p&gt;</summary></entry><entry><title>Expressing agreement and disagreement numerically</title><link href="http://code.mumak.net/2011/01/expressing-agreement-and-disagreement.html" rel="alternate"></link><updated>2011-01-25T18:02:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2011-01-25:2011/01/expressing-agreement-and-disagreement.html</id><summary type="html">&lt;p&gt;There's a habit within Canonical on expressing agreement and
disagreement numerically. If we agree with something someone says in
email or IRC, we'll often say "+1", which means "I agree!" or "if we
were to vote about this, you would have my vote". I sometimes hear
people actually say the words "plus one" in conversation.  &lt;/p&gt;
&lt;p&gt;Some have extrapolated from this to say "-1" to mean "I disagree", which
is a pretty natural thing to do. However, it confuses me a lot.  &lt;/p&gt;
&lt;p&gt;&lt;div
style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"&gt;&lt;/p&gt;
&lt;p&gt;You see, the "+1" thing is a little bit like the &lt;a href="http://httpd.apache.org/dev/guidelines.html"&gt;Apache voting
system&lt;/a&gt;, which I met in my
early days of open source, back when I lurked on the Subversion
development mailing list. The voting rules there were burned into my
mind, and I foolishly assume that they are equally fundamental to
everyone else.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In the Apache system, "-1" means "veto", which is a very strong way of
disagreeing. When people on the Launchpad say "-1", I never really know
what they mean. I don't blame them, "-1" is a bit of a silly way of
vetoing a proposal. I bet if keyboards had a key for ∞, there'd be a
much more sensible way.  &lt;/p&gt;
&lt;p&gt;I guess the moral of the story is, "ambiguous shorthand is ambiguous".  &lt;/p&gt;
&lt;p&gt;Incidentally, how does the Apache voting system work out in practice
these days?&lt;/p&gt;</summary></entry><entry><title>Larval prototype for Launchpad dashboards</title><link href="http://code.mumak.net/2010/12/larval-prototype-for-launchpad.html" rel="alternate"></link><updated>2010-12-23T16:09:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-12-23:2010/12/larval-prototype-for-launchpad.html</id><summary type="html">&lt;p&gt;I mentioned &lt;a href="http://code.mumak.net/2010/11/and-then-what.html"&gt;a while
ago&lt;/a&gt; that I really
want to see something like a dashboard in Launchpad, some kind of view
that shows you everything that you &lt;em&gt;must&lt;/em&gt; do, everything that you are
waiting on from others and all of your current work-in-progress.
Launchpad could do this really well, since it has rich, inter-linked
data about what's going on and since it can show you this information
for all of your projects.  &lt;/p&gt;
&lt;p&gt;Today, I knocked up a very quick-and-dirty prototype for this. It shows
all of the work-in-progress for a person across all of Launchpad,
grouped by project.  &lt;/p&gt;
&lt;p&gt;The code lives at
&lt;a href="https://code.launchpad.net/~jml/+junk/whip"&gt;lp:\~jml/+junk/whip&lt;/a&gt; and
you can see examples of &lt;a href="http://people.canonical.com/~jml/jml-wip.html"&gt;my
work-in-progress&lt;/a&gt; and
&lt;a href="http://people.canonical.com/~jml/jelmer-wip.html"&gt;jelmer's
work-in-progress&lt;/a&gt;
online. You should be able to make your own with './bin/whip \$LP-NAME
&gt; wip.html'. Note that there'll be some PYTHONPATH shenanigans.  &lt;/p&gt;
&lt;p&gt;Hackers, I'd love to see if you could turn this prototype into a
web-app, or even a page on Launchpad. There's a NOTES file in there with
whatever ideas I've had.  &lt;/p&gt;
&lt;p&gt;Designers, there's got to be a better way of showing this data than what
I've picked. Take a look at the examples and see what you can turn them
into.&lt;/p&gt;</summary><category term="launchpad"></category></entry><entry><title>testtools 0.9.8 released</title><link href="http://code.mumak.net/2010/12/testtools-098-released.html" rel="alternate"></link><updated>2010-12-22T19:19:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-12-22:2010/12/testtools-098-released.html</id><summary type="html">&lt;p&gt;The announcement is a few days late, but I thought that you'd like to
know that &lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools 0.9.8&lt;/a&gt; has
been released.  &lt;/p&gt;
&lt;p&gt;This is one of our biggest releases, we have fixed &lt;a href="https://launchpad.net/testtools/0.9/0.9.8"&gt;a lot of
bugs&lt;/a&gt;, added experimental
support for running tests inside Twisted's reactor and added a stack of
new matchers and convenience methods. It's well worth upgrading.  &lt;/p&gt;
&lt;p&gt;We've also got some good stuff in the pipeline, including a full
re-working of our documentation, better error messages and still more
matchers.  &lt;/p&gt;
&lt;p&gt;The "more matchers" thing is significant. More and more people are
starting to use testtools because of the way our matchers let them build
domain-specific assertions with rich, useful error messages. We continue
to get contributions for basic matchers and for new ways of combining
matchers. Also, projects like James Westby's
&lt;a href="https://launchpad.net/soupmatchers"&gt;soupmatchers&lt;/a&gt; show just how useful
matchers can be. It makes me think that eventually matchers will become
part of the normal way that people write tests in Python.  &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://launchpad.net/~lifeless"&gt;Robert Collins&lt;/a&gt;, &lt;a href="https://launchpad.net/~gz"&gt;Martin
[gz]&lt;/a&gt;, &lt;a href="https://launchpad.net/~jelmer"&gt;Jelmer
Vernooij&lt;/a&gt;, &lt;a href="https://launchpad.net/~mwhudson"&gt;Michael
Hudson-Doyle&lt;/a&gt; and &lt;a href="https://launchpad.net/~james-w"&gt;James
Westby&lt;/a&gt; for making this our best release
ever.&lt;/p&gt;</summary><category term="testtools"></category></entry><entry><title>testtools bug update</title><link href="http://code.mumak.net/2010/12/testtools-bug-update.html" rel="alternate"></link><updated>2010-12-10T23:03:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-12-10:2010/12/testtools-bug-update.html</id><summary type="html">&lt;p&gt;Hello &lt;a href="https://launchpad.net/testtools"&gt;testtools&lt;/a&gt; fans.  &lt;/p&gt;
&lt;p&gt;If you are wondering what all the recent bug mail was about, wonder no
more, for I shall explain. Thus.  &lt;/p&gt;
&lt;p&gt;We're using only three different levels of importance for testtools
bugs: Critical, Medium and Wishlist. Critical is reserved for release
blockers: regressions, test failures and other disasters. Medium is for
genuine defects and other things that we think are important. Wishlist
is for everything else. I think of them as Critical, Important and
Someday.  &lt;/p&gt;
&lt;p&gt;All of this is in preparation for the 0.9.8 release, which promises to
be a doozy.  Stay tuned.&lt;/p&gt;</summary><category term="testtools"></category></entry><entry><title>testtools manuals</title><link href="http://code.mumak.net/2010/11/testtools-manuals.html" rel="alternate"></link><updated>2010-11-29T00:31:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-29:2010/11/testtools-manuals.html</id><summary type="html">&lt;p&gt;I wrote a whole pile of documentation for
&lt;a href="https://launchpad.net/testtools"&gt;testtools&lt;/a&gt; over the weekend. You can
read it &lt;a href="http://mumak.net/testtools/docs/"&gt;here&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I would very much appreciate it if you could read over the docs there
and tell me if anything is unclear, wrong or otherwise unhelpful.
 Telling me what's good would also be appreciated.  &lt;/p&gt;
&lt;p&gt;Please leave whatever feedback you have either as comments on this post
or on the &lt;a href="https://code.launchpad.net/~jml/testtools/more-doc-improvements/+merge/42045"&gt;merge
proposal&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Tests that print stuff</title><link href="http://code.mumak.net/2010/11/tests-that-print-stuff.html" rel="alternate"></link><updated>2010-11-26T16:01:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-26:2010/11/tests-that-print-stuff.html</id><summary type="html">&lt;p&gt;Tests that print stuff to stdout or stderr annoy me.  They make a
successful test run much less satisfying to watch, and they clutter logs
when you are trying to debug a failure.  &lt;/p&gt;
&lt;p&gt;Launchpad has quite a few tests that print stuff.  I was going to fix
them up today, but I've got a Launchpad branch in progress and I've
promised myself that I'll have only one in progress at a time. Besides,
the build is broken.  &lt;/p&gt;
&lt;p&gt;Anyway, I've written a quick hack that lets you analyze a
&lt;a href="http://launchpad.net/subunit"&gt;subunit&lt;/a&gt; stream to &lt;a href="http://paste.ubuntu.com/536731/"&gt;see which tests print
stuff&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To get a subunit stream including the output itself:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$ &lt;/span&gt;&lt;span class="n"&gt;gzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="n"&gt;testtools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r11753&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subunit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get a list of the tests:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$ &lt;/span&gt;&lt;span class="n"&gt;gzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="n"&gt;testtools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r11753&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subunit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;subunit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;passthrough&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those interested, Launchpad has roughly one hundred such tests.  &lt;/p&gt;
&lt;p&gt;As with my last post, I'm left with the feeling that subunit is great
but needs a lot more polish.  I guess my next step is to figure out how
to upstream these.&lt;/p&gt;</summary><category term="subunit data"></category></entry><entry><title>Boiling kettles, unit tests and data</title><link href="http://code.mumak.net/2010/11/boiling-kettles-unit-tests-and-data.html" rel="alternate"></link><updated>2010-11-26T13:34:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-26:2010/11/boiling-kettles-unit-tests-and-data.html</id><summary type="html">&lt;p&gt;The Launchpad test suite takes way too long to run: somewhere between
three and four hours.  Incidentally,
&lt;a href="http://rbtcollins.wordpress.com/"&gt;Rob&lt;/a&gt; has just started &lt;a href="https://dev.launchpad.net/LEP/PersistenceLayer"&gt;some
work&lt;/a&gt; that ought to make
it run a lot faster, for which I am truly thankful.  Anyway, over the
last three (almost four!) years, I've watched the test suite run many,
many times, waiting for it to finish or at least reveal a failure.  &lt;/p&gt;
&lt;p&gt;It has been easy to see that not all tests are created equal. Some are
very slow, others are very fast. &lt;a href="http://code.mumak.net/2009/09/layers-are-terrible.html"&gt;Zope's terrible layer
mechanism&lt;/a&gt; means
that these are often grouped together: slow with slow, fast with fast.
Watching the test suite churn away for the umpteenth time made me
wonder, exactly how are the tests distributed over time.  &lt;/p&gt;
&lt;p&gt;Luckily, thanks to &lt;a href="https://launchpad.net/subunit"&gt;subunit&lt;/a&gt;, a &lt;a href="http://paste.ubuntu.com/536368/"&gt;bit of
Python glue&lt;/a&gt;, and OpenOffice it's
really easy to get a picture:  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://people.canonical.com/~jml/Tests-finished-each-minute.png"&gt;&lt;img alt="" src="http://people.canonical.com/~jml/Tests-finished-each-minute.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That's a graph of the number of tests that complete within each minute
of the Launchpad test suite run.  What it means is that you are more
likely to see an actual test result if you watch at a random time during
the first half of the test run. It also means that we have a relatively
small number of very slow tests.  &lt;/p&gt;
&lt;p&gt;Sometimes these graphs are more useful at lower granularity, so I made
this one:  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://people.canonical.com/~jml/Tests-finished-each-ten-minutes.png"&gt;&lt;img alt="" src="http://people.canonical.com/~jml/Tests-finished-each-ten-minutes.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And this one:  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://people.canonical.com/~jml/Tests-finished-each-hour.png"&gt;&lt;img alt="" src="http://people.canonical.com/~jml/Tests-finished-each-hour.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The &lt;a href="http://people.canonical.com/~jml/testtools-experiment-r11753.subunit.gz"&gt;raw
data&lt;/a&gt;
is taken from a successful run of one of my recent branches. If you
download it and open it up, you'll see that the subunit output includes
a large number of "time:" statements. Each of these indicates that all
subunit statements following it should be considered as taking place at
the time given in the original statement.  &lt;/p&gt;
&lt;p&gt;I used a &lt;a href="http://paste.ubuntu.com/536368/"&gt;small Python script&lt;/a&gt; to
generate the CSVs, running it like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gzip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dc&lt;/span&gt; &lt;span class="n"&gt;testtools&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r11753&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subunit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Desktop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tests&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where "60" is the number of seconds of granularity.  &lt;/p&gt;
&lt;p&gt;It was about twenty minutes work all up, and subunit made much of it
dead simple. subunit has its flaws, but it's a really good idea.  &lt;/p&gt;
&lt;p&gt;That said, I can't help but feel that it should have been less
work. Partly, subunit should have a way to convert data to a format more
amenable to analysis by third party tools. Mostly though, those third
party tools ought to exist and be known to me.  &lt;/p&gt;
&lt;p&gt;I can easily imagine a tool where I wouldn't have to run the script each
time to get a different level of granularity, but rather I could use a
slider in a UI and watch the graph update itself in real time. That
would be cool, and relatively easy. How come nobody has done that yet?  &lt;/p&gt;
&lt;p&gt;Also, although OpenOffice's graphing thing is fairly nice, why isn't
there a better tool? One that makes it easier to share graphs as images
on the web without having to take crummy screenshots.&lt;/p&gt;</summary><category term="launchpad subunit data"></category></entry><entry><title>Big or small?</title><link href="http://code.mumak.net/2010/11/big-or-small.html" rel="alternate"></link><updated>2010-11-24T16:12:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-24:2010/11/big-or-small.html</id><summary type="html">&lt;p&gt;I've been thinking a bit about whether it is better to have one big code
base that has a lot of different components and features, or whether
there should be many small code bases that each do one thing well.  &lt;/p&gt;
&lt;p&gt;I don't have any answers, but perhaps these half-formed thoughts will
help: positive, negative and interesting things about having many small
related projects. These thoughts are mostly inspired by working on a
bunch of different testing-related projects.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Positive&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
"Do one thing and do it well"

&lt;/li&gt;
&lt;li&gt;
Enforces a certain kind of interface discipline

&lt;/li&gt;
&lt;li&gt;
Avoids/postpones scaling problems with big projects

&lt;/li&gt;
-   test suite run times
-   documentation navigation
-   bug triage
-   forking mailing lists etc.

&lt;li&gt;
Newcomers only need to "buy in" to one idea at a time

&lt;/li&gt;
&lt;li&gt;
Aligns with conceptual understanding of the problem

&lt;/li&gt;
&lt;li&gt;
Better separation of commit privs etc

&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;

**Negative**

&lt;/div&gt;

&lt;div&gt;

&lt;ul&gt;
&lt;li&gt;
Release overhead
&lt;/li&gt;
&lt;li&gt;
Duplication of infrastructure
&lt;/li&gt;
-   buildbot / hudson / pqm
-   bug tracker
-   mailing list

&lt;li&gt;
Duplication of license / copyright games
&lt;/li&gt;
&lt;li&gt;
Harder for newcomers to see the big picture
&lt;/li&gt;
&lt;li&gt;
Problems caused by interactions between different versions
&lt;/li&gt;
&lt;li&gt;
Depending on multiple libraries is a pain on many platforms
&lt;/li&gt;
&lt;li&gt;
Lag with commit privs etc
&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

**Interesting**

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

-   Perhaps smaller &amp; self-contained means easier to upstream
-   Some projects like adding only small dependencies, other projects
    like adding few dependencies

&lt;div&gt;

Do these make sense? What would you add?

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

Twisted is in a sense the opposite of the small/many paradigm, in that
it includes a great deal of extra features along with its core.

&lt;/div&gt;</summary></entry><entry><title>"Don't Make Me Think", thoughts for Launchpad</title><link href="http://code.mumak.net/2010/11/dont-make-me-think-thoughts-for.html" rel="alternate"></link><updated>2010-11-19T15:29:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-19:2010/11/dont-make-me-think-thoughts-for.html</id><summary type="html">&lt;p&gt;I just read &lt;a href="http://www.amazon.co.uk/Dont-Make-Think-Usability-Circle-Com/dp/0789723107"&gt;Don't Make Me
Think&lt;/a&gt;,
by &lt;a href="http://www.sensible.com/"&gt;Steve Krug&lt;/a&gt;. It's a good book. Sadly, I
read it over a fairly long chunk of time so a lot of the punch has been
spread out.  &lt;/p&gt;
&lt;p&gt;Here are my thoughts about how we can apply some of the ideas to
Launchpad.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tighten up our visual design&lt;/strong&gt;&lt;br /&gt;
Launchpad doesn't look &lt;em&gt;too&lt;/em&gt; bad, I don't think, but it could look a
whole lot better.  Doing that would cover over other sins, make people
more comfortable and is just the right thing to do.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error recovery &amp;amp; undoability&lt;/strong&gt;&lt;br /&gt;
We're not great at this. You can't rename teams, you can't rename PPAs,
you can't rename branches that other branches  are stacked on. You can't
delete bug tasks. Many forms just say "Invalid value" when you enter bad
input.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Keep up with the user testing&lt;/strong&gt;&lt;br /&gt;
We do a fair chunk of user testing, mostly thanks to Matthew Revell. We
should do it more often, and more readily.  Also, we should wave some
kind of magic wand that makes it easier for developers to observe the
user tests as they happen.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Home page&lt;/strong&gt;&lt;br /&gt;
Make it better.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remove more stuff&lt;/strong&gt;&lt;br /&gt;
Way too often in our design discussions, we talk about adding stuff to
the page: widgets, links, explanatory text. We should lean toward
removing before we add. Especially with text: fewer words. Be suspicious
when the solution to a usability problem is "more documentation".  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discuss things less&lt;/strong&gt;&lt;br /&gt;
Sometimes, we really do talk too much about whether a thing should be
one way or it should be another.  Krug leads me to believe that most of
things we agonize about aren't actually the things that are important to
users.&lt;/p&gt;</summary></entry><entry><title>What else have you got?</title><link href="http://code.mumak.net/2010/11/what-else-have-you-got.html" rel="alternate"></link><updated>2010-11-18T18:16:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-18:2010/11/what-else-have-you-got.html</id><summary type="html">&lt;p&gt;I recently mentioned some of the &lt;a href="http://code.mumak.net/2010/11/what-to-do-what-to-do.html"&gt;very important things we're doing on
Launchpad&lt;/a&gt;
(performance, privacy, derived archives and desktop integration) and
some of the equally &lt;a href="http://code.mumak.net/2010/11/still-going.html"&gt;important things that
we're&lt;em&gt;still&lt;/em&gt; doing&lt;/a&gt;
(making links, importing upstream translations, daily builds). We've
also got a few other things on the hob.  &lt;/p&gt;
&lt;p&gt;In particular, there's some corking great work going on in making our
&lt;strong&gt;build farm more scalable&lt;/strong&gt;. The build farm is used for building
&lt;a href="http://ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, PPAs, building recipes and doing upstream
translation imports, so it's a critical part of our infrastructure.
We've been working to make better use of the machines we have, and make
sure that we don't actually degrade in performance as we add more
machines. There's also been a lot of good work here in making the code
more understandable and robust.  &lt;/p&gt;
&lt;p&gt;Since we're now using the build farm for more things that just building
packages, we've had to give the UI some love, particularly in making
&lt;strong&gt;&lt;a href="https://dev.launchpad.net/LEP/GeneralBuildHistories"&gt;generalized build
histories&lt;/a&gt;&lt;/strong&gt; for
the builders. This just means making builder and archive pages on
Launchpad show all of the builds nicely, regardless of what type of
build they are. We're kind of finished here, we just need that lousy
&lt;a href="https://launchpad.net/~jml"&gt;product strategist&lt;/a&gt; to get around to
reviewing the feature.  &lt;/p&gt;
&lt;p&gt;On the bug tracker, we're adding a new facility that will &lt;strong&gt;disable the
automatic duplicate detection on a package-by-package basis&lt;/strong&gt;. The dupe
finder is one of my favourite parts of Launchpad, and I would never
disable it for anything I do. However, the packages that take care of
providing sound, graphics and networking get a lot of bugs that have the
same symptoms but are actually completely different, and only an expert
can tell them apart. In these cases, auto dupe detection does more harm
than good, so we're providing a way to turn it off.  &lt;/p&gt;
&lt;p&gt;Perhaps most excitingly of all the "non-core" work, we're working on
giving you &lt;strong&gt;&lt;a href="https://dev.launchpad.net/LEP/BetterBugSubscriptionsAndNotifications"&gt;far more control over your bug
mail&lt;/a&gt;&lt;/strong&gt;.
Launchpad has long been known for sending way too much email. We're
changing that.  &lt;/p&gt;
&lt;p&gt;There's also some great stuff being done outside the Launchpad team:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.launchpad.net/LEP/DKIMAuthenticatedMail"&gt;DKIM-based mail
    authentication&lt;/a&gt;
    (aka "Change bug statuses from GMail")&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.launchpad.net/LEP/ForkingLPServe"&gt;Pre-forking lp-serve&lt;/a&gt;
    (aka "Shave two seconds off every bzr push to Launchpad")&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.launchpad.net/LEP/BugzillaComponents"&gt;Bugzilla
    components&lt;/a&gt; (aka
    "One step closer to smooth upstreaming of bugs")&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.launchpad.net/Code/MergeQueues/LEP"&gt;&lt;strong&gt;Branch merge
    queues&lt;/strong&gt;&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

And that's all of the stuff that's going on in Launchpad, as far as I
know.  Actually, there's a fair bit of work going on to make it so we
can deploy Launchpad way more often and work on features for as long as
we want without exposing them to unsuspecting users. And we're also
working on simplifying our branch landing machinery.  But that's it.

&lt;/div&gt;

&lt;div&gt;

As you can see, there are a lot of things.  That means that progress on
any one thing is much slower than anyone would like.  However, progress
is being made.  Give us a few months and we might be working on only
three things at once, rather than over a dozen.

&lt;/div&gt;

&lt;div&gt;

As always, if you're keen on following Launchpad development, you can
join \#launchpad-dev on Freenode, or our [developer mailing
list](https://launchpad.net/~launchpad-dev).

&lt;/div&gt;

&lt;div&gt;

Coming soon: ideas for the not-so-distant future.  

**Edit:** Oops! Forgot merge queues.

&lt;/div&gt;</summary><category term="launchpad"></category></entry><entry><title>Reviewing specs, rock on!</title><link href="http://code.mumak.net/2010/11/reviewing-specs-rock-on.html" rel="alternate"></link><updated>2010-11-18T18:14:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-18:2010/11/reviewing-specs-rock-on.html</id><summary type="html">&lt;p&gt;I just finished reviewing a bunch of
&lt;a href="https://dev.launchpad.net/LEP"&gt;LEP&lt;/a&gt;s, which are the specs Launchpadders
write for doing new feature work. I've been looking at a bunch of the
&lt;a href="https://dev.launchpad.net/LEP/PrivateProjectsAndDistributions"&gt;privacy&lt;/a&gt;
LEPs and one on &lt;a href="https://dev.launchpad.net/Code/MergeQueues/LEP"&gt;merge
queues&lt;/a&gt;.  It's been
great to see such good, clear thinking, and also to see people thinking
and writing in terms of constraints and requirements ("What do we want?
Why?") instead of implementation or potential solutions.  &lt;/p&gt;
&lt;p&gt;Basically I've got a bunch of scribbled-on bits of paper right now.
Tomorrow I'm going to update the wiki &amp;amp; schedule calls with the
developers so we can kick them along.&lt;/p&gt;</summary></entry><entry><title>Having an extra feature never hurts, rebutted</title><link href="http://code.mumak.net/2010/11/having-extra-feature-never-hurts.html" rel="alternate"></link><updated>2010-11-16T18:10:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-16:2010/11/having-extra-feature-never-hurts.html</id><summary type="html">&lt;p&gt;On the Launchpad user list, we're having a bit of a chat about whether
&lt;a href="https://lists.launchpad.net/launchpad-users/msg06098.html"&gt;or not to remove team
polls&lt;/a&gt;.  One
commenter suggested that "having an extra feature never hurts".
&lt;a href="http://curtis.hovey.name/"&gt;Curtis&lt;/a&gt;'s
&lt;a href="https://lists.launchpad.net/launchpad-users/msg06110.html"&gt;reply&lt;/a&gt; is so
good I want to quote it here in full:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Actually&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;hurts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;bad&lt;/span&gt; &lt;span class="n"&gt;UI&lt;/span&gt; &lt;span class="n"&gt;experience&lt;/span&gt; &lt;span class="n"&gt;reflects&lt;/span&gt; &lt;span class="n"&gt;poorly&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;tried&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;mess&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;URLs&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;UI&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;caused&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt;        &lt;span class="n"&gt;oops&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;spent&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;couple&lt;/span&gt; &lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="n"&gt;fixing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;personally&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;        &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;think&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;ever&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Certainly&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt;        &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;oops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt;        &lt;span class="n"&gt;believe&lt;/span&gt; &lt;span class="n"&gt;oopses&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Pages&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;slower&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;because&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;looks&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;poll&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;libraries&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;infrastructure&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="mf"&gt;5.&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;triage&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;retriage&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;poll&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;     &lt;span class="mf"&gt;6.&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;Lp&lt;/span&gt; &lt;span class="n"&gt;Answers&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;IRC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;It&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="n"&gt;great&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;toprovide&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;mediocre&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;prefer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;thecommunity&lt;/span&gt; &lt;span class="n"&gt;believes&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;might&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;theupcoming&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt; &lt;span class="n"&gt;bugjam&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;possible&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Icannot&lt;/span&gt; &lt;span class="n"&gt;foresee&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;feature&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;compelling&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="n"&gt;yearswithout&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;contributor&lt;/span&gt; &lt;span class="n"&gt;dedicating&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;situation&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;eloquently&lt;/span&gt; &lt;span class="n"&gt;stated&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Antoine&lt;/span&gt; &lt;span class="n"&gt;de&lt;/span&gt; &lt;span class="n"&gt;Saint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Exup&lt;/span&gt;&lt;span class="err"&gt;é&lt;/span&gt;&lt;span class="n"&gt;ry&lt;/span&gt;        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;designer&lt;/span&gt; &lt;span class="n"&gt;knows&lt;/span&gt; &lt;span class="n"&gt;he&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;achieved&lt;/span&gt; &lt;span class="n"&gt;perfection&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;        &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt;        &lt;span class="n"&gt;away&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/blockquote&gt;
&lt;p&gt;That is all.&lt;/p&gt;</summary><category term="launchpad"></category></entry><entry><title>And then what?</title><link href="http://code.mumak.net/2010/11/and-then-what.html" rel="alternate"></link><updated>2010-11-16T15:03:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-16:2010/11/and-then-what.html</id><summary type="html">&lt;p&gt;By now, you know where Launchpad is at. You know what &lt;a href="http://code.mumak.net/2010/11/what-to-do-what-to-do.html"&gt;our top
priorities&lt;/a&gt;
are, you know the &lt;a href="http://code.mumak.net/2010/11/still-going.html"&gt;other important stuff that we're still working
on&lt;/a&gt;, you know &lt;a href="http://code.mumak.net/2010/11/what-else-have-you-got.html"&gt;the other
bits and pieces we've got
going&lt;/a&gt;. You
might even know why.  &lt;/p&gt;
&lt;p&gt;What you might not know, and what this post hopes to tell you, is what
we are &lt;em&gt;thinking&lt;/em&gt; about right now. Humans are plan-making creatures, and
product strategists perhaps more so than most. What follows is a brief
description of the half-formed thoughts and plans that I have for
Launchpad. (Also, have I mentioned the
&lt;a href="http://dev.launchpad.net/RoadMap"&gt;roadmap&lt;/a&gt; yet?)  &lt;/p&gt;
&lt;p&gt;Strategically speaking, there are two major approaches we can take to
our work on Launchpad. The first is working on things that bring new
users and new projects to us. This would mean finding something that we
can provide that alternatives don't and potential users want, &lt;em&gt;or&lt;/em&gt;
assuming that we already have such a thing, find the blockers that stop
people from using Launchpad and remove them (the blockers, not the
people).  &lt;/p&gt;
&lt;p&gt;For example, if we thought that open source developers wanted their
hosting site, say, to be part of the semantic web, we could go and do
that and be relatively confident that no one else will. That would be
finding a competitive advantage.  &lt;/p&gt;
&lt;p&gt;Or, to take another example, we could say that our awesome bug tracker,
our translation support and daily builds are heaps plenty good
advantages, but people don't use Launchpad because we only have full
support for one VCS and we provide no place to host a project shop-front
web site. That would mean adding Git, Subversion and Mercurial support,
and adding some kind of wiki / webhosting. Personally, I find this much
more appealing than semantic web shenanigans.  &lt;/p&gt;
&lt;p&gt;All of that's one strategic approach: attract new users. There's another
major approach that we could take: make things better for our current
users. All things considered, I think I want to take the second
approach.  &lt;/p&gt;
&lt;p&gt;There's so much we could do here, partly because Launchpad itself is so
broad. Some key things stand out though.  &lt;/p&gt;
&lt;p&gt;First, there is a cluster of problems related to the way that people
approach the website. Although we tout cross-project collaboration as
one of our big things, we don't make it particularly easy. We need to
provide each user and each team with a view that shows them all of the
things that are interesting to them across all of Launchpad. In fact, we
probably need to give them two views: one that's historical and
chronological, and another that's forward looking and more
dashboard-like. In my head, I've been thinking of this as &lt;strong&gt;walls&lt;/strong&gt; (ala
Facebook) and &lt;strong&gt;dashboards&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;If we dig into this, there'll be other changes: better, fairer karma;
more social interaction; better person, project and team pages; a
"waiting for" section in the dashboard so you can see who to hassle; a
better experience for new users; and probably death to the home page for
users who've got accounts. Lots of goodness here.  &lt;/p&gt;
&lt;p&gt;Second, it's becoming increasingly clear that blueprints are a good idea
with a sub-standard implementation. Persuaded largely by Matthew Paul
Thomas, I think that we should merge the blueprint tracker with the bug
tracker to make a &lt;strong&gt;&lt;a href="http://dev.launchpad.net/IssueTracker"&gt;combined issue
tracker&lt;/a&gt;&lt;/strong&gt;. A lot of people get
worried when I say this, because they really like blueprints and they
understand that bugs and blueprints are actually two different things.
Please don't worry. There will almost certainly always be something in
Launchpad like a blueprint or specification that is visibly different
from a bug. However, I think we ought to change what lists they appear
in, what statuses they have and many other things. The loss of
distinctiveness will be more than made up for with an increase in
capability.  &lt;/p&gt;
&lt;p&gt;Third, the way we &lt;strong&gt;search&lt;/strong&gt; and the way we display results of searches
needs to be revamped to be faster and more flexible. I want to see easy
forms, a good search string mini-language, sexy URLs, searches that can
be saved and shared.  &lt;/p&gt;
&lt;p&gt;There's so much more that we could do, that we ought to do: make mailing
lists rock; inline commenting on merge proposals; eliminate all of the
silly "refresh this page" business that we still have; go to series and
milestones with a sharp axe and a clear conscience; provide top-notch
tools for QA teams; show way more cool stuff based on our data; make
filing bugs upstream a complete no-brainer; clean up the terminology we
use for naming things; provide an event sending interface for
launchpadlib so that people don't have to poll. I could go on for a very
long time.  &lt;/p&gt;
&lt;p&gt;I call out the three things above – cross-project views, merging bugs
and blueprints and better search – because I think they are things that
will make Launchpad better for absolutely everyone who uses it. In
particular, done right, good cross-project views turns a weakness into a
strength. It takes the vast, daunting size of Launchpad and instead
turns it into a huge realm of opportunity.  &lt;/p&gt;
&lt;p&gt;Now, none of this is fixed in concrete. There's still plenty of time to
discuss, plan out, change our minds and what not. But it's what's in my
head right now.  &lt;/p&gt;
&lt;p&gt;That's it. Right now, we're working on &lt;strong&gt;privacy&lt;/strong&gt;, &lt;strong&gt;performance&lt;/strong&gt;,
&lt;strong&gt;derived archives&lt;/strong&gt; and &lt;strong&gt;desktop integration&lt;/strong&gt; as our top priorities.
We're still plugging away at &lt;strong&gt;daily builds&lt;/strong&gt; and &lt;strong&gt;making links&lt;/strong&gt;
between distributions and upstreams, and we're working on a host of
useful, important things. In the future, if my plans go as … planned,
then we'll have &lt;strong&gt;dashboards&lt;/strong&gt;, activity &lt;strong&gt;walls&lt;/strong&gt;, a &lt;strong&gt;combined issue
tracker&lt;/strong&gt; and excellent &lt;strong&gt;search&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;</summary><category term="launchpad"></category></entry><entry><title>Make it really easy to fix bugs on Ubuntu</title><link href="http://code.mumak.net/2010/11/make-it-really-easy-to-fix-bugs-on.html" rel="alternate"></link><updated>2010-11-15T14:36:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-15:2010/11/make-it-really-easy-to-fix-bugs-on.html</id><summary type="html">&lt;p&gt;One of the best things that anyone ever said was, "not enough gets said
about the importance of abandoning crap". Mr Glass was probably talking
about writing, but his words could well have been aimed squarely at any
well-established software development process.  &lt;/p&gt;
&lt;p&gt;Right now, it's too hard to &lt;a href="http://people.canonical.com/~dholbach/Fixing%20a%20bug.png"&gt;fix a bug in
Ubuntu&lt;/a&gt;.
There are &lt;a href="https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-community-n-improve-fixing-a-bug-workflow"&gt;a lot of things that we can
do&lt;/a&gt;
to make it easier, let me tell you about mine.  &lt;/p&gt;
&lt;p&gt;If you see a small bug in a program on your desktop, you want to
something like this:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Figure out what package it's in&lt;/li&gt;
&lt;li&gt;Look for an existing bug, if not file one&lt;/li&gt;
&lt;li&gt;Get the source&lt;/li&gt;
&lt;li&gt;Build it, try to reproduce the bug&lt;/li&gt;
&lt;li&gt;Actually fix the bug&lt;/li&gt;
&lt;li&gt;Test to see that it's actually fixed&lt;/li&gt;
&lt;li&gt;Submit it then shepherd it through whatever processes come next&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;

Much of this is monkey work if you know how to do it, or
incomprehensible arcana if you don't. Either way, it's important that we
abandon (or *automate*) this essentially uninteresting work.

&lt;/div&gt;

&lt;div&gt;

In that spirit, at UDS I wrote a script that a lot of us have been
talking about for a long time. I called it
[start-hacking](https://launchpad.net/start-hacking), because I am
terrible at names and wanted to make a project. Right now, when you run
the script on your Ubuntu desktop, your cursor becomes a cross-hair.
When you click on an application, start-hacking will tell you the source
package that the application belongs to and where you can get the source
(both Ubuntu source and latest upstream if available).  It's very
simple, but that's because it builds on a very large amount of work that
Canonical has done, mostly through Launchpad and Apport.

&lt;/div&gt;

&lt;div&gt;

Eventually, we want to make the script a much more beautiful application
that gets you a built, runnable copy of any Ubuntu application or
library in a test environment.  Our goal is to make fixing a typo (or
typo-level bug) as fast and as smooth as possible for any application on
the desktop.

&lt;/div&gt;

&lt;div&gt;

All we need is a bit of time and a few volunteers.

&lt;/div&gt;</summary></entry><entry><title>Ubuntu in a VM on OS X?</title><link href="http://code.mumak.net/2010/11/ubuntu-in-vm-on-os-x.html" rel="alternate"></link><updated>2010-11-06T11:28:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-06:2010/11/ubuntu-in-vm-on-os-x.html</id><summary type="html">&lt;p&gt;I'm trying to get Ubuntu 10.10 running in a VM on my iMac. It mostly
works with either VirtualBox or VMWare Fusion, but I can't get 3D
acceleration working. Under VirtualBox, I can get compositing happening,
but it's very slow. Under VMWare Fusion, Ubuntu won't even acknowledge
that I have a 3D card. Help.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; If you can point me to a &lt;em&gt;working&lt;/em&gt; guide for dual booting
Ubuntu on the iMac 27", then that would also be great.&lt;/p&gt;</summary></entry><entry><title>Still going</title><link href="http://code.mumak.net/2010/11/still-going.html" rel="alternate"></link><updated>2010-11-04T17:24:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-04:2010/11/still-going.html</id><summary type="html">&lt;p&gt;Last post, I talked about the &lt;a href="http://code.mumak.net/2010/11/what-to-do-what-to-do.html"&gt;top priorities for Launchpad development
right now&lt;/a&gt;:
performance, privacy, derivative distributions and desktop integration.
In this post, I want to talk about the other things that we are doing,
and why we are doing them at all.  &lt;/p&gt;
&lt;p&gt;In September last year, we decided that we needed to put a lot of work
into something that is at the core of the very idea of Launchpad:
bridging the gap between Linux distributions (specifically Ubuntu) and
upstream open source projects. Launchpad has been intended from the very
beginning to smooth out and accelerate collaboration between these two
areas of endeavour.  &lt;/p&gt;
&lt;p&gt;Much of that work has already been done, but we have three initiatives
still going: &lt;strong&gt;making links, daily builds &lt;/strong&gt;and &lt;strong&gt;importing upstream
translations&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Making links&lt;/strong&gt; is all about making it incredibly to add useful, usable
information about package / upstream relationships. Launchpad has always
had the ability to store such information, but now it's much, much
easier to use because of a whole suite of changes: automatic suggestions
for upstream / distro links; simplified project configuration; automatic
linking to projects when marking a bug as upstream; just-in-time project
registration etc. There are a few more bugs to go before we're happy to
call it done.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daily builds&lt;/strong&gt; are a very cool feature that's still in beta. You
provide us with a "recipe" that tells Launchpad how to combine branches
into something resembling a source package, then we take that recipe,
assemble the source package, build it and then publish it into a PPA of
your choice. Then, if the branches change, we'll provide a new build
each day. The feature mostly works right now – Project Neon are using it
to get &lt;a href="https://launchpad.net/~project-neon/+archive/ppa"&gt;nightly builds of
Amarok&lt;/a&gt; – but the UI
needs polish, there are a few system-level
&lt;a href="https://bugs.launchpad.net/launchpad-code/+bug/669703"&gt;glitches&lt;/a&gt; and
we're &lt;a href="https://bugs.launchpad.net/launchpad-code/+bug/608450"&gt;asking
questions&lt;/a&gt; about
the recipe format. I'll be posting later about how to get involved with
the beta.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Importing upstream translations&lt;/strong&gt; into Ubuntu makes it much easier for
Ubuntu to be the best-translated Linux distribution ever. Right now it's
already possible to import translations from upstream projects into
Launchpad. Soon those translations will be imported directly into the
equivalent Ubuntu packages too, which means that Ubuntu translators can
choose to use the upstream translation or instead provide a better one.
Before we can do that, we'll need to do some scalability work. After
that's done, we'll also want to do some UI work to make it very easy to
connect the Ubuntu package translations to the imported upstream
translations.  &lt;/p&gt;
&lt;p&gt;All in all, three very neat initiatives to bring Ubuntu and its
upstreams closer together.  &lt;/p&gt;
&lt;p&gt;So that's it right? What with &lt;strong&gt;performance&lt;/strong&gt;, &lt;strong&gt;derivative
distributions&lt;/strong&gt;, &lt;strong&gt;privacy&lt;/strong&gt; and &lt;strong&gt;desktop integration&lt;/strong&gt; as well as
&lt;strong&gt;making links, daily builds &lt;/strong&gt;and &lt;strong&gt;importing upstream translations&lt;/strong&gt;,
the Launchpad team must have its plate full? Indeed not! Stay tuned, and
I'll let you know what other things we are currently working on, as well
as the future plans that are bubbling away.&lt;/p&gt;</summary></entry><entry><title>What to do, what to do</title><link href="http://code.mumak.net/2010/11/what-to-do-what-to-do.html" rel="alternate"></link><updated>2010-11-03T09:03:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-03:2010/11/what-to-do-what-to-do.html</id><summary type="html">&lt;p&gt;One of the many things I love about going to UDS is the opportunity to
talk to so many different people about  a relatively small set of
things. Having the same conversation over again from various angles
helps jostle a few lazy thoughts into rank, allowing the now ordered
thoughts to execute a disciplined march on the bastion of uncertainty.
That is, explaining what I'm thinking makes my thinking clearer. Rather
selfishly, I'd like to start explaining here what I've been thinking
recently.  &lt;/p&gt;
&lt;p&gt;The most important things for Launchpad development right now are
&lt;strong&gt;performance&lt;/strong&gt;, &lt;strong&gt;derivative distributions&lt;/strong&gt;, &lt;strong&gt;privacy&lt;/strong&gt; and &lt;strong&gt;desktop
integration&lt;/strong&gt;. Everything else we want to do is less important than any
of these. I used to include &lt;strong&gt;software center support&lt;/strong&gt;, but we've done
that already, all the others are in progress.  &lt;/p&gt;
&lt;p&gt;A faster and more snappy Launchpad will make the lives of all of our
existing users happy, whether they are dentists hacking in their spare
time or field engineers in Taipei. Improving &lt;strong&gt;performance&lt;/strong&gt; makes the
user experience better by having less of it.  &lt;/p&gt;
&lt;p&gt;Ubuntu is being shipped by default on more and more devices. Each
version of Ubuntu on those devices can quite legitimately be thought of
as a &lt;strong&gt;&lt;a href="https://dev.launchpad.net/LEP/DerivativeDistributions"&gt;derivative
distribution&lt;/a&gt;&lt;/strong&gt;.
We want to give our hardware enablement teams the same top-notch tools
that our platform teams get to use. Also in the highly competitive world
of device manufacturing, many things need to be kept secret, so
Launchpad needs to get its
&lt;strong&gt;&lt;a href="https://dev.launchpad.net/LEP/BetterPrivacy"&gt;privacy&lt;/a&gt;&lt;/strong&gt; act
together.  &lt;/p&gt;
&lt;p&gt;Finally, I'm convinced that developing apps and fixing bugs in Ubuntu
needs to be as easy and smooth as possible. I'm also convinced,
alongside the Ubuntu One folk, that we can do some pretty neat things
when we integrate the desktop and the web. Thus I've been pushing for a
long time to improve Launchpad's &lt;strong&gt;&lt;a href="https://dev.launchpad.net/LEP/DesktopWideLaunchpadIntegration"&gt;desktop
integration&lt;/a&gt;&lt;/strong&gt;.
Unlike the others it's not an immediate need, but I think the work we do
now will pay off very quickly.  &lt;/p&gt;
&lt;p&gt;All of these four things are in progress right now. I'd love to write
more about some of the other things we have in progress and about my own
dim picture of the future, but this is enough for one post.&lt;/p&gt;</summary></entry><entry><title>Launchpad and UDS-N</title><link href="http://code.mumak.net/2010/11/launchpad-and-uds-n.html" rel="alternate"></link><updated>2010-11-02T14:23:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-11-02:2010/11/launchpad-and-uds-n.html</id><summary type="html">&lt;p&gt;Yesterday I got back from the &lt;a href="http://summit.ubuntu.com/"&gt;Ubuntu Developer
Summit&lt;/a&gt; where hundreds of people got together
to plan the next release of Ubuntu, the "Natty Narwhal".  &lt;/p&gt;
&lt;p&gt;For Natty, the Ubuntu Platform team have five foci:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unity&lt;/li&gt;
&lt;li&gt;2D Experience&lt;/li&gt;
&lt;li&gt;Software Center&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Community contributions&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;

If you have a problem with these, [talk to the
hand](http://theravingrick.blogspot.com/2010/10/this-is-it.html).

&lt;/div&gt;

&lt;div&gt;

We on the Launchpad team want to do everything we can to help Ubuntu
achieve these goals.  Partly, this will be by continuing to make
Launchpad a joy to use.  However we'll probably be able to offer some
specific help with the last three foci: Software Center; testing and
community contributions.

&lt;/div&gt;

&lt;div&gt;

I don't know of any concrete actions yet – I've yet to trawl through the
many blueprints to find them – but for the next few months, I'm hoping
that Launchpad developers will be watching for opportunities to help
make Natty the best release ever.

&lt;/div&gt;</summary></entry><entry><title>The art is long, the life short</title><link href="http://code.mumak.net/2010/10/art-is-long-life-short.html" rel="alternate"></link><updated>2010-10-28T19:41:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-10-28:2010/10/art-is-long-life-short.html</id><summary type="html">&lt;p&gt;I love the energy at UDS.  I wish I could go away from it and sit down
and do nothing but hack for three months so I could finish all of the
little, awesome things that Launchpad could do.&lt;/p&gt;</summary></entry><entry><title>testtools compatibility</title><link href="http://code.mumak.net/2010/10/testtools-compatibility.html" rel="alternate"></link><updated>2010-10-25T11:37:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-10-25:2010/10/testtools-compatibility.html</id><summary type="html">&lt;p&gt;We've recently been getting a few bugs filed on
&lt;a href="https://launchpad.net/testtools"&gt;testtools&lt;/a&gt; about compatibility with
various versions of Python. I really want to support as many versions as
I can, but I simply don't have them on my system.  &lt;/p&gt;
&lt;p&gt;What resources are available to me if I want to set up a Hudson instance
or similar that runs testtools tests against Python 2.4, 2.5, 2.6, 2.7,
3.0 and 3.1? A Windows run would also be nice.&lt;/p&gt;</summary></entry><entry><title>Off to UDS</title><link href="http://code.mumak.net/2010/10/off-to-uds.html" rel="alternate"></link><updated>2010-10-23T13:00:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-10-23:2010/10/off-to-uds.html</id><summary type="html">&lt;p&gt;I can't believe it's already time to depart dear old London and head
across the Atlantic to participate in another
&lt;a href="http://summit.ubuntu.com/"&gt;UDS&lt;/a&gt;. Although "participate in" doesn't feel
like the right verb, does it? UDS is a frantic, electric whirligig of
meetings and conversations and decisions and on-the-spot calls, cool
ideas and grand hopes, energy and exhaustion. "Almost drown in" would be
closer. I'm looking forward to it, but I'm a little bit daunted. The
last one took more out of me than I thought I had.  &lt;/p&gt;
&lt;p&gt;To make my own life easier and satisfy whatever stalkers I may have been
fortunate enough to accumulate, I thought I'd post now about what
sessions I'm planning on going to at UDS:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Monday&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;11: Linaro Roundtable / catch up with other Launchpadders&lt;/li&gt;
&lt;li&gt;12: &lt;a href="https://blueprints.edge.launchpad.net/ubuntu/+spec/other-foundations-n-distributed-development-review-and-planning"&gt;Review and planning for Ubuntu Distributed
    Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;15: &lt;a href="https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-community-n-harvest-plans"&gt;Natty Harvest
    Plans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;16: &lt;a href="https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-community-n-developer-advocacy"&gt;Ubuntu Development
    Advocacy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

**Tuesday**

&lt;/div&gt;

&lt;div&gt;

-   9: [BOF for metrics for release and project
    management](https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-launchpad-n-metrichooks)
-   10: Either [Enhancements to the Software Center
    UI](https://blueprints.edge.launchpad.net/ubuntu/+spec/appdevs-desktop-n-software-center-ui-enhancements) or
    [Patch tracking for
    Linaro](https://wiki.linaro.org/Platform/Infrastructure/Specs/PatchTracking)

&lt;div&gt;

**Wednesday**

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

-   10: [Launchpad and
    Upstreams](https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-community-n-launchpad-for-upstreams)
-   11: [Replace the Partner repository with
    PPAs](https://blueprints.edge.launchpad.net/software-center/+spec/other-foundations-n-partner-repository)

&lt;div&gt;

**Thursday**

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

-   10: [Git for Bazaar
    users](https://blueprints.edge.launchpad.net/ubuntu/+spec/other-general-n-git-for-bzr-users)
-   11: [Discussion of topics related to Canonical-wide
    QA](https://wiki.canonical.com/CoP/QA/UDS-NAgenda)
-   12: [Improve the workflow for "fixing a
    bug"](https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-community-n-improve-fixing-a-bug-workflow)
    or [Define the end-to-end process for commercial apps in the
    software
    center](https://blueprints.edge.launchpad.net/ubuntu/+spec/appdevs-n-commercial-apps)

&lt;div&gt;

**Friday**

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

-   9: [Discuss Soyuz work to be done in preparation for Archive
    Reorganization](https://wiki.ubuntu.com/ArchiveReorganisation/Components/Preparation)
-   10: Either [Improve the image-building service for
    Linaro](https://wiki.linaro.org/Platform/Infrastructure/Specs/ImageBuildPolish)
    or [Handling non-English
    bugs](https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-qa-n-handling-nonenglish-bugs)
-   11: [Launchpad/Bazaar
    introduction](https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-launchpad-n-launchpad-bazaar-introduction)
-   12: [Linaro infrastructure stakeholder
    process](https://wiki.linaro.org/Platform/Infrastructure/StakeholderProcess)
-   15: [High-level development
    overview](https://blueprints.edge.launchpad.net/ubuntu/+spec/ubuntutheproject-community-n-high-level-dev-overview)

&lt;div&gt;

Of course, I'll probably be going to sessions other than the ones I've
mentioned above. Sessions about how to design applications well or how
to write code for Ubuntu One always catch my eye.

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

However, my job is about improving developer collaboration – that's
pretty much the whole point of Launchpad. So any session about
development tools, development process or interactions between different
groups of people always take precedence. I'm at UDS to listen and to
learn, and to contribute what little I can.

&lt;/div&gt;</summary></entry><entry><title>testtools 0.9.7 released</title><link href="http://code.mumak.net/2010/10/testtools-097-released.html" rel="alternate"></link><updated>2010-10-17T13:00:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-10-17:2010/10/testtools-097-released.html</id><summary type="html">&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/testtools"&gt;testtools&lt;/a&gt; 0.9.7 has just been
released. Thanks to &lt;a href="https://launchpad.net/~lifeless"&gt;Robert Collins&lt;/a&gt;,
&lt;a href="http://jameswestby.net/weblog"&gt;James Westby&lt;/a&gt;, &lt;a href="http://bemusement.org/"&gt;Andrew
Bennetts&lt;/a&gt;, &lt;a href="https://edge.launchpad.net/~gz"&gt;Martin
[gz]&lt;/a&gt; and &lt;a href="http://canonical.com/"&gt;Canonical
Ltd&lt;/a&gt; for their contributions.  &lt;/p&gt;
&lt;p&gt;testtools is pretty much the best way to write unit tests in Python.&lt;/p&gt;</summary></entry><entry><title>Get Xchat-Gnome completing with colon</title><link href="http://code.mumak.net/2010/09/get-xchat-gnome-completing-with-colon.html" rel="alternate"></link><updated>2010-09-29T17:14:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-29:2010/09/get-xchat-gnome-completing-with-colon.html</id><summary type="html">&lt;p&gt;Since the late nineties, I've had my IRC clients configured to complete
nicks with a colon. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;jml&amp;gt;&lt;/span&gt; dash: there&amp;#39;s an otherwise normal guy at work who uses tcl as his scripting language of choice
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But during some Ubuntu upgrade at some point in the last couple of
years, Xchat-Gnome changed my settings without telling me. Now it
completes nicks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;jml&amp;gt;&lt;/span&gt; itamar, a cunning, enviable balance between argument and unsupported assertion
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is so clearly inferior to a colon-based nick-completion that I do
not have to list the reasons. There are many.  &lt;/p&gt;
&lt;p&gt;In any case, today I figured out how to change it:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;completion_suffix&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it. Xchat will take care of saving the configuration for you. I'm
so happy.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Actually, no, Xchat does &lt;em&gt;not&lt;/em&gt; take care of saving the
configuration for you.  &lt;/p&gt;
&lt;p&gt;You must open &lt;code&gt;~/.xchat2/xchat.conf&lt;/code&gt;, find the line that says
&lt;code&gt;completion_suffix = ,&lt;/code&gt; and change it to say &lt;code&gt;completion_suffix = :&lt;/code&gt; and
then, crucially, &lt;em&gt;save&lt;/em&gt; your changes to that file. You'll probably have
to restart Xchat as well.&lt;/p&gt;</summary></entry><entry><title>Maverick notes</title><link href="http://code.mumak.net/2010/09/maverick-notes.html" rel="alternate"></link><updated>2010-09-16T10:20:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-16:2010/09/maverick-notes.html</id><summary type="html">&lt;p&gt;I recently upgraded to Maverick beta. Here are my thoughts and
observations:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Despite the huge number of PPAs and unofficial debs I had on my
    system, the upgrade itself was very smooth&lt;/li&gt;
&lt;li&gt;Everything looks much crisper, probably due to the
    &lt;a href="http://design.canonical.com/2010/08/an-update-to-the-ubuntu-light-themes/"&gt;two&lt;/a&gt;
    &lt;a href="http://design.canonical.com/2010/08/second-update-to-the-ubuntu-light-themes/"&gt;updates&lt;/a&gt;
    to the Light themes&lt;/li&gt;
&lt;li&gt;Python 2.5 was removed. I work on software that still supports
    Python 2.4, so that's a pain&lt;/li&gt;
&lt;li&gt;The keyboard indicator is nicer (I can read it), but it says "USA"
    when I want it to say "Dvorak"&lt;/li&gt;
&lt;li&gt;The booting process is still flashes between screen resolutions,
    switches to black then back again&lt;/li&gt;
&lt;li&gt;I still have to rmmod iwlagn; modprobe iwlagn sometimes&lt;/li&gt;
&lt;li&gt;"Print to file" from Chrome produced a single blank page of PDF&lt;/li&gt;
&lt;li&gt;I don't know how I feel about the Me &amp;amp; Message menus&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

I guess lots of these are bugs. They are, after all, easier to notice.

&lt;/div&gt;</summary></entry><entry><title>What we do</title><link href="http://code.mumak.net/2010/09/what-we-do.html" rel="alternate"></link><updated>2010-09-15T13:09:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-15:2010/09/what-we-do.html</id><summary type="html">&lt;p&gt;I've just come back from a couple of weeks off. Unusually, I didn't
spend much time programming or thinking about work, instead I was just
enjoying life and getting enough sleep. How fortunate then to return and
find out that we're being encouraged to think about what we do at
Canonical.  &lt;/p&gt;
&lt;p&gt;I work on Launchpad, readers will know this by now. Launchpad is a very,
very big web application that has the fundamental purpose of
accelerating open source collaboration, particularly within the Ubuntu
sphere.  &lt;/p&gt;
&lt;p&gt;This rather happily meshes with a deep passion of mine, which is to make
programming better.  &lt;/p&gt;
&lt;p&gt;The main reason I am personally involved with open source, and the
reason I sometimes make sacrifices in order to support it, is because I
believe that sharing and talking about code is the only way to get
better at programming. That's why I care so much about &lt;a href="http://mumak.net/stuff/your-code-sucks.html"&gt;code
review&lt;/a&gt;. When I look
critically at a proprietary product like Gmail or OmniFocus, I can learn
much about user interface and product design, but I can't learn anything
about programming. With open source, I can learn from the world, and
perhaps make my own small contribution back.  &lt;/p&gt;
&lt;p&gt;But so often with open source software, the barrier to entry is high for
silly reasons. It's often hard to find the bug tracker, you can trawl
around a website for minutes losing valuable interest looking for an svn
checkout URL, sometimes it's hard to figure out the name of the project.
Then, once you've got the project, you have to figure out how to build
it and run it. Once your patch is done you have to figure out where to
submit it.  &lt;/p&gt;
&lt;p&gt;All of this can be tedious even when you are already heavily involved in
a project. The first time, though, it's often impossibly difficult.  &lt;/p&gt;
&lt;p&gt;Some of my colleagues would perhaps tell you how angry this makes me.
Human beings are meant for engaging work that requires intelligence, not
arbitrary drudgery that can be solved by a mere machine. For
programmers, it's doubly worse, since our trade is entirely about
automating the automatable.  &lt;/p&gt;
&lt;p&gt;To really get to the heart of the problem though, serious investment is
needed in collaboration tools. And that is exactly what Canonical is
doing to this day with Launchpad and Bazaar.  &lt;/p&gt;
&lt;p&gt;We are working to make much of the above simpler: predictable URLs for
Git, Subversion, CVS and Bazaar repositories using our imports and 'bzr
get lp:project', one bug tracker that can forward bugs to whatever it is
that a project uses, a consistent user interface across projects.  &lt;/p&gt;
&lt;p&gt;To take one recent example, &lt;a href="http://www.markshuttleworth.com/archives/507"&gt;Launchpad and Bazaar combine to make it a
doddle to always be running trunk on your Ubuntu
desktop&lt;/a&gt;. Imagine that!
End users running fresh trunk every day without having to build it.  &lt;/p&gt;
&lt;p&gt;Or you might consider &lt;a href="https://launchpad.net/lernid"&gt;Lernid&lt;/a&gt;. It's a
small project that helps people learn and teach over IRC, started by
&lt;a href="http://www.jonobacon.org/"&gt;Jono Bacon&lt;/a&gt;. Jono speaks only roughly
dialect of English, but Launchpad connected his project with a bunch of
wonderful people who translated it into their own languages. My rough
count puts it at &lt;a href="https://translations.edge.launchpad.net/lernid/trunk"&gt;twelve different
languages&lt;/a&gt;. The
same thing has happened with many, many projects on Launchpad.  &lt;/p&gt;
&lt;p&gt;There's still much to be done, but we have already made an impact.
Thousands of people have used Launchpad to share code, hundreds of
thousands have reported bugs, many projects exist that wouldn't have
before. And all of this flows into an open, free, Linux desktop that I
am proud to say I have contributed to.&lt;/p&gt;</summary></entry><entry><title>Leaps and bounds</title><link href="http://code.mumak.net/2010/09/leaps-and-bounds.html" rel="alternate"></link><updated>2010-09-13T17:28:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-13:2010/09/leaps-and-bounds.html</id><summary type="html">&lt;p&gt;If your development process has something like "before you run
\$CUSTOM_SCRIPT_1, run \$CUSTOM_SCRIPT_2 to make sure everything is
OK", then you are doing it wrong. Couple leaping with looking.&lt;/p&gt;</summary></entry><entry><title>Back</title><link href="http://code.mumak.net/2010/09/back.html" rel="alternate"></link><updated>2010-09-13T09:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-13:2010/09/back.html</id><summary type="html">&lt;p&gt;After a wonderful two week break, I'm now back in high-backed chair of
Launchpad strategy. Can't wait to see what's been happening.&lt;/p&gt;</summary></entry><entry><title>Why you should write your tests first</title><link href="http://code.mumak.net/2010/09/why-you-should-write-your-tests-first.html" rel="alternate"></link><updated>2010-09-07T10:44:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-07:2010/09/why-you-should-write-your-tests-first.html</id><summary type="html">&lt;p&gt;We're all agreed that any Python code that's even a little serious needs
unit tests, right? However, sometimes we end up writing our tests after
we've written our code rather than doing test-driven development, what
&lt;a href="http://curtis.hovey.name/"&gt;Curtis&lt;/a&gt; calls "code and cover". That's bad.
Here's why.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's dull. Really dull.&lt;/li&gt;
&lt;li&gt;You find bugs, but it's somehow more frustrating. Perhaps because
    you thought your code was correct already.&lt;/li&gt;
&lt;li&gt;The code is probably not written for testability, which means you
    have to mix refactoring up with verifying behaviour. Messy &amp;amp;
    perilous.&lt;/li&gt;
&lt;li&gt;Alternatively, you write tests with a &lt;a href="http://martinfowler.com/articles/mocksArentStubs.html"&gt;lot of
    mocks&lt;/a&gt;. Not
    bad in itself, but risky.&lt;/li&gt;
&lt;li&gt;It's much harder to get full coverage.&lt;/li&gt;
&lt;li&gt;You write tests for things that you don't care about, just to
    exercise a particular code path. This makes the tests more
    &lt;a href="http://xunitpatterns.com/Fragile%20Test.html"&gt;fragile&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You never really know when you are finished.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;

Are you a TDDer or a code-and-cover person? Why do you prefer it that
way?

&lt;/div&gt;</summary></entry><entry><title>unittest API, part 4</title><link href="http://code.mumak.net/2010/09/unittest-api-part-4.html" rel="alternate"></link><updated>2010-09-06T09:47:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-09-06:2010/09/unittest-api-part-4.html</id><summary type="html">&lt;p&gt;As I said at the very beginning, unittest has an API with lots of
interfaces. You can read about the interfaces for test frameworks in
&lt;a href="http://code.mumak.net/2010/07/unittest-api-part-1.html"&gt;part 1&lt;/a&gt;, &lt;a href="http://code.mumak.net/2010/07/unittest-api-part-2.html"&gt;part
2&lt;/a&gt; and &lt;a href="http://code.mumak.net/2010/08/unittest-part-3.html"&gt;part
3&lt;/a&gt; of this series.
This post is about the interface for test authors.  &lt;/p&gt;
&lt;p&gt;If the other posts are fresh in your mind, it's important to remember
that this post is focused on the standard implementation of &lt;code&gt;TestCase&lt;/code&gt;.
After all, it's that implementation which creates the interface for test
authors. There are other implementations (e.g. &lt;code&gt;FunctionTestCase&lt;/code&gt; and
&lt;code&gt;DocTestCase&lt;/code&gt;) which provide completely different interfaces for test
authors, and one could write one's own implementation that provided
something else entirely.  &lt;/p&gt;
&lt;div&gt;

**Subclassing `TestCase`**

&lt;/div&gt;

&lt;div&gt;

Almost all of the time that you want to write tests, you subclass
unittest.TestCase. It's not the only way to write unit tests with
unittest, but it's rather handy, particularly since the default test
loader looks for subclasses of `TestCase`.  

This is going to be much easier for all of us if I work from an example.

&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;SomeTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setUp&amp;quot;&lt;/span&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;tearDown&amp;quot;&lt;/span&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;  &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;

The test loader will make something that looks like
`unittest.TestSuite([SomeTests("test_a"), SomeTests("test_b")])`. That
is, it constructs an instance of `SomeTests` for each method beginning
with "test".  

The tests will only be run when `TestCase.run(result)` is called. The
tests do not get access to the result object, instead the run() method
mediates between the tests and the result.  

The default `TestCase.run(result)` method will run `setUp()`, then the
test method given in the constructor (e.g. `test_a`), then
`tearDown()`.  

If `setUp()` raises any exception, `tearDown()` will not be run. The
result object will have `addError` called on it with the test and the
error.  

If the test method raises an exception, one of two things can happen. If
the exception is an instance of `self.failureException`, then
`result.addFailure(test, exc_info)` is called, where test is the
`TestCase` instance and `exc_info` is the `sys.exc_info()` tuple.
Otherwise, `result.addError(test, exc_info)` is called. In either case,
`tearDown()` is then run.  

If `tearDown()` raises an exception, `result.addError(test, exc_info)`
is called.  

There are lots of built-in assertion methods on `unittest.TestCase`.
These all raise `self.failureException` if their assertion fails. These
are part of the interface for test authors, but they are already very
well documented. Just note that if you write your own, remember to raise
`self.failureException`, or better yet call `self.fail()`, rather than
raising `AssertionError` or something crazy like that.  

That's pretty much it.  

Of course, you could write your own object that implemented **`ITest`**
and **`ITestCase`**, and use your own test loader, and then you don't
have to care about anything in this post. But don't do that. Better to
subclass `unittest.TestCase`.  

As always, feedback welcome.

&lt;/div&gt;</summary></entry><entry><title>unittest, part 3</title><link href="http://code.mumak.net/2010/08/unittest-part-3.html" rel="alternate"></link><updated>2010-08-14T14:34:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-08-14:2010/08/unittest-part-3.html</id><summary type="html">&lt;p&gt;So far, we've talked about &lt;code&gt;TestSuite&lt;/code&gt;s, &lt;code&gt;TestCase&lt;/code&gt;s and &lt;code&gt;TestResult&lt;/code&gt;s.
We've seen how these objects interact with each other  and how they can
generally be thought about as having more than one interface.
&lt;code&gt;TestResult&lt;/code&gt; has an interface for the &lt;code&gt;TestCase&lt;/code&gt; and an interface used
for querying the results, &lt;code&gt;TestCase&lt;/code&gt; has an interface for test runners
and an interface for test authors, and so forth.  &lt;/p&gt;
&lt;p&gt;Now we need to give some time to the bits that glue everything together:
the test runner and the test loader.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;TestRunner&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;You will not find a class in unittest.py called &lt;code&gt;TestRunner&lt;/code&gt;. A test
runner is simply something that takes user input about a test run – what
tests to run, what manner to run them in, how to display the results –
and does it.  &lt;/p&gt;
&lt;p&gt;Essentially, it does something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestLoader&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;loadTests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_specified_test_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeTestResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options_specified_by_user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startTestRun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stopTestRun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it.  &lt;/p&gt;
&lt;p&gt;You see that the test runner is responsible for instantiating the test
loader and the test result. It's perhaps excusable for a test runner to
be tightly bound to particular implementations of test loader and test
result. Certainly, before &lt;code&gt;TestResult&lt;/code&gt; grew &lt;code&gt;startTestRun&lt;/code&gt; and
&lt;code&gt;stopTestRun&lt;/code&gt; it was inevitable: since the test runner was responsible
for summarizing the results of a test run, overall responsibility for
displaying the results was split between the runner and the result.  &lt;/p&gt;
&lt;p&gt;Nowadays, the tight coupling can be limited. If your test runner has an
option to display stack traces as it gets them, then that's pretty much
going to force you to use a particular result. However, you can still
write your code internally such that someone could pass in a different
result that still works, even though it doesn't do exactly what the user
asked for.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;TestLoader&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;From the point of view of interfaces and compatibility, this is a pretty
boring class, and that's a good thing. The test loader's job is to find
tests based on some user input and construct a single &lt;code&gt;ITest&lt;/code&gt; object for
them.  &lt;/p&gt;
&lt;p&gt;When it does more than this, one runs the risk of having the behaviour
of a test suite depend too much on the runner itself. The ideal is to
have the test suite run in any runner: trial, nose, unittest2, py.test,
whatever.  &lt;/p&gt;
&lt;p&gt;Some &lt;code&gt;TestLoader&lt;/code&gt;s provide hooks so that users with complicated test
suites can customize the way their tests are loaded. Whenever the Trial
&lt;code&gt;TestLoader&lt;/code&gt; sees a &lt;code&gt;test_suite()&lt;/code&gt; function in a module, it lets that
function take charge of the loading.  &lt;/p&gt;
&lt;p&gt;The standard library in 2.7 has a new hook, inspired by an innovation in
bzrlib, but slightly different.
&lt;code&gt;load_tests(loader, standard_tests, pattern)&lt;/code&gt; is given the loader used
by the test runner, the tests that the loader would have loaded, and if
appropriate, a glob used for matching test module files. The advantage
of this hook is that it reduces the danger of customizations made to the
loader, since the test suite has access to the same loader. It also
makes custom loading easier by giving the standard tests as a starting
point. bzrlib uses this to run the same set of tests against many
implementations.  &lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; that's all I have to say about these two, which means that's
pretty much all I have to say about unittest's API for test frameworks.
Still one more post to go though: interfaces for test authors.  &lt;/p&gt;
&lt;p&gt;Let me know if I've missed anything, if anything here surprises you or
contradicts something I said in the past or if things are unclear. The
comments on the previous two posts have really helped!&lt;/p&gt;</summary></entry><entry><title>unittest API, part 2</title><link href="http://code.mumak.net/2010/08/unittest-api-part-2.html" rel="alternate"></link><updated>2010-08-02T11:15:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-08-02:2010/08/unittest-api-part-2.html</id><summary type="html">&lt;p&gt;In &lt;a href="http://code.mumak.net/2010/07/unittest-api-part-1.html"&gt;part 1&lt;/a&gt; of
this humble attempt to document the interfaces and contracts that
unittest actually cares about, we talked about &lt;code&gt;TestSuite&lt;/code&gt; and
&lt;code&gt;TestCase&lt;/code&gt;, how they both implement a common interface that's used for
running tests, &lt;strong&gt;&lt;code&gt;ITest&lt;/code&gt;&lt;/strong&gt; and how they each implement their own
interfaces, &lt;strong&gt;&lt;code&gt;ITestSuite&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;ITestCase&lt;/code&gt;&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;Now we're moving on to a much more complicated object, &lt;code&gt;TestResult&lt;/code&gt;, to
see how we can pick apart the ways it interacts with the rest of the
system.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;A &lt;code&gt;TestResult&lt;/code&gt; object is all about dealing with the results of tests, as
you might expect. However, it doesn't generally represent a &lt;em&gt;single&lt;/em&gt;
test result. You could say it represents the results of a number of
tests, but I don't think that's terribly helpful.  &lt;/p&gt;
&lt;p&gt;Better to think of a &lt;code&gt;TestResult&lt;/code&gt; object as an event handler. A
&lt;code&gt;TestResult&lt;/code&gt; object receives events from a test run and then does
something with them.  &lt;/p&gt;
&lt;p&gt;Just as &lt;code&gt;TestCase&lt;/code&gt; has a two-faced nature, presenting one interface to
the testing framework and another to test authors, so to &lt;code&gt;TestResult&lt;/code&gt;
can be thought of has having many interfaces:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Its interface to a &lt;code&gt;TestCase&lt;/code&gt;. This can be thought of as the &lt;em&gt;test
    event handling&lt;/em&gt; interface&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;result querying&lt;/em&gt; interface, normally used by a test runner&lt;/li&gt;
&lt;li&gt;An interface for events that come from the test runner, the &lt;em&gt;runner
    event handling&lt;/em&gt; interface.&lt;/li&gt;
&lt;li&gt;An &lt;em&gt;execution control&lt;/em&gt; interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the &lt;em&gt;result querying&lt;/em&gt; interface and the &lt;em&gt;runner event
handling&lt;/em&gt; interface together make up the interface between the
&lt;code&gt;TestResult&lt;/code&gt; and test runner.  &lt;/p&gt;
&lt;p&gt;Let's start with the &lt;em&gt;test event handling&lt;/em&gt; interface. The methods below
are the interface between &lt;code&gt;TestCase.run()&lt;/code&gt; and &lt;code&gt;TestResult&lt;/code&gt;. (I guess
&lt;code&gt;TestCase.debug&lt;/code&gt; too, but no one cares about it).  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;startTest(test)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; commences running. Although not enforced, it's
impolite to provide any results for &lt;code&gt;test&lt;/code&gt; before calling this.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;stopTest(test)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; is completely finished. Although not enforced,
it's impolite to provide any more results for &lt;code&gt;test&lt;/code&gt; after calling
this, unless you call &lt;code&gt;startTest(test)&lt;/code&gt; again first.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;addSuccess(test)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; has been shown to be successful. The default
implementation does nothing.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;addError(test, err)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; raises an unexpected error. &lt;code&gt;err&lt;/code&gt; is a tuple such
as you might get from &lt;code&gt;sys.exc_info()&lt;/code&gt;. Calling this method for the
first time must change the result of &lt;code&gt;wasSuccessful()&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;addFailure(test, err)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; has failed one of its assertions. &lt;code&gt;err&lt;/code&gt; is a
tuple such as you might get from &lt;code&gt;sys.exc_info()&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The above interface is tightly coupled to the implementation of
&lt;code&gt;TestCase.run()&lt;/code&gt;. In particular, if you wish to add more kinds of
results to your testing framework ("skip" results are a fairly common
addition), then you must change both &lt;code&gt;TestCase.run()&lt;/code&gt; and the
&lt;code&gt;TestResult&lt;/code&gt; interface.  &lt;/p&gt;
&lt;p&gt;If you do something like that, I recommend making sure that your
modified &lt;code&gt;TestCase&lt;/code&gt; can handle &lt;code&gt;TestResult&lt;/code&gt; objects that do not provide
the extensions to the interface that you need. One common way of doing
this is to have the &lt;code&gt;TestCase&lt;/code&gt; fall back to the primitive result types,
e.g. "skip" might become "success" for a &lt;code&gt;TestResult&lt;/code&gt; that doesn't know
what skipping means.  &lt;/p&gt;
&lt;p&gt;Importantly, the interface between &lt;code&gt;TestCase&lt;/code&gt; and &lt;code&gt;TestResult&lt;/code&gt; has been
fattened in Python 2.7.  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;addSkip(test, reason)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; is skipped. &lt;code&gt;reason&lt;/code&gt; is a string explaining why
the test was skipped.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;addExpectedFailure(test, err)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; failed in a way that was expected. &lt;code&gt;err&lt;/code&gt; is a
tuple such as the one returned by &lt;code&gt;sys.exc_info()&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;addUnexpectedSuccess(test)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;test&lt;/code&gt; was expected to fail, but didn't.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The following interface is a way of learning about test results after
they have happened, the &lt;em&gt;result querying&lt;/em&gt; interface, and is part of the
contract between the test runner and the TestResult.  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;wasSuccessful()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;If there have been no errors and no failures, return &lt;code&gt;True&lt;/code&gt;. Return
&lt;code&gt;False&lt;/code&gt; otherwise.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;testsRun&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;An integer that is the number of tests that have been run.&lt;/dt&gt;
&lt;dt&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A list of tuples of &lt;code&gt;(test, error_message)&lt;/code&gt; for all of the tests
with unexpected errors, where &lt;code&gt;test&lt;/code&gt; is an &lt;code&gt;ITestCase&lt;/code&gt; and
&lt;code&gt;error_message&lt;/code&gt; is a string suitable for display to humans,
generally containing a traceback.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;failures&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A list of tuples of &lt;code&gt;(test, error_message)&lt;/code&gt; for all of the failing
tests, where &lt;code&gt;test&lt;/code&gt; is an &lt;code&gt;ITestCase&lt;/code&gt; and &lt;code&gt;error_message&lt;/code&gt; is a
string suitable for display to humans, generally containing a
traceback.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;And of course, Python 2.7 fattens this interface again to have the
following:  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;skipped&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A list of tuples of &lt;code&gt;(test, reason)&lt;/code&gt; for all of the skipped tests,
where &lt;code&gt;test&lt;/code&gt; is an &lt;code&gt;ITestCase&lt;/code&gt; and &lt;code&gt;reason&lt;/code&gt; is a string suitable for
display to humans, generally containing a traceback.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;expectedFailures&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A list of tuples of &lt;code&gt;(test, error_message)&lt;/code&gt; for all of the tests
that were expected to fail and failed in the manner they were
expected to, where &lt;code&gt;test&lt;/code&gt; is an &lt;code&gt;ITestCase&lt;/code&gt; and &lt;code&gt;error_message&lt;/code&gt; is a
string suitable for display to humans, generally containing a
traceback.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;unexpectedSuccesses&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A list of all of the tests that unexpectedly succeeded. Members of
the list are &lt;code&gt;ITestCase&lt;/code&gt;s.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;In Python 2.7, &lt;code&gt;TestResult&lt;/code&gt; also extended its interface to the test
runner beyond simple result querying and into allowing the test runner
itself to send two very important events to the &lt;code&gt;TestResult&lt;/code&gt;, behold the
&lt;em&gt;runner event handling&lt;/em&gt; interface:  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;startTestRun()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;div
style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"&gt;&lt;/p&gt;
&lt;p&gt;Called before any tests have been run. It is impolite to provide any
test results before calling this.&lt;/p&gt;
&lt;/div&gt;

&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;stopTestRun()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;div
style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"&gt;&lt;/p&gt;
&lt;p&gt;Called after all the tests have finished running. It is impolite to
provide any test results after calling this. A &lt;code&gt;TestResult&lt;/code&gt; object
is generally not expected to handle any events at all after this
method has been called.&lt;/p&gt;
&lt;/div&gt;

&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Some test runners rely on &lt;code&gt;TestResult&lt;/code&gt;s to use those events to display
the results to the user. These runners frequently do not use the result
querying part of the interface.  &lt;/p&gt;
&lt;p&gt;There is one more interface that &lt;code&gt;TestResult&lt;/code&gt; implements: the &lt;em&gt;execution
control&lt;/em&gt; interface:  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;
`stop()`

&lt;/dt&gt;
&lt;dd&gt;
Signal that the execution of further tests should stop now. Sets
`shouldStop` to `True`.

&lt;/dd&gt;
&lt;dt&gt;
`shouldStop`

&lt;/dt&gt;
&lt;dd&gt;
If `True`, then test execution should stop. `TestSuite.run()` should
monitor this value and stop execution if ever it is `True`.

&lt;/dd&gt;
&lt;dt&gt;
&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;This interface is mostly used as a way of handling &lt;code&gt;KeyboardInterrupt&lt;/code&gt;s
cleanly.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;If you want your &lt;code&gt;TestResult&lt;/code&gt; object to work with standard Python
&lt;code&gt;TestCase&lt;/code&gt; objects, or any &lt;code&gt;TestCase&lt;/code&gt; objects that try to stick close to
the standard, then you must provide the &lt;em&gt;test event handling&lt;/em&gt; interface
described above. If you are writing your own test framework or test
runner, you care about this, because you want to run everyone's unit
tests.  &lt;/p&gt;
&lt;p&gt;If you want your &lt;code&gt;TestResult&lt;/code&gt; object to work with the standard Python
test runner before Python 2.7, then you must provide the &lt;em&gt;result
querying&lt;/em&gt; interface. If you are using the standard Python test runner,
you care about this. For Trial or testtools, you must provide the
&lt;em&gt;runner event handling&lt;/em&gt; interface. For anything else, I'm afraid you are
on your own.  &lt;/p&gt;
&lt;p&gt;Always provide the &lt;em&gt;execution control&lt;/em&gt; interface.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;In this documentation, I've been trying to describe the various
interfaces without inserting too much of my own opinion about their
design. However, I think some commentary might actually help to make
things easier to understand.  &lt;/p&gt;
&lt;p&gt;By providing a querying interface for &lt;code&gt;TestResult&lt;/code&gt; to be used by a test
runner, the original designers of unittest practically insisted that
responsibility for displaying the results of a test run be split between
two different classes. The &lt;code&gt;TestResult&lt;/code&gt; takes care of displaying
incremental feedback from the running tests and the test runner takes
care of displaying the summary. You can see evidence of this design in
Python 2.6's unittest.py, where there's a hidden &lt;code&gt;_TextTestResult&lt;/code&gt;
subclass which has extra methods that are called only by a special
&lt;code&gt;TextTestRunner&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;The addition of &lt;code&gt;startTestRun()&lt;/code&gt; and &lt;code&gt;stopTestRun()&lt;/code&gt; mean that now a
&lt;code&gt;TestResult&lt;/code&gt; object can be fully in charge of displaying its results. As
such, providing a query interface and exposing details like the list of
test failures somewhat vestigial.  &lt;/p&gt;
&lt;p&gt;I'm less happy with this post than the previous one. As such your
critique is even more welcome.  &lt;/p&gt;
&lt;p&gt;Still to come: the interface for test authors and just what is a test
runner anyway?  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Remove ambiguity in &lt;code&gt;expectedFailures&lt;/code&gt; description (see
comments). Thanks Aaron.&lt;/p&gt;</summary></entry><entry><title>unittest API, part 1</title><link href="http://code.mumak.net/2010/07/unittest-api-part-1.html" rel="alternate"></link><updated>2010-07-29T16:56:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-07-29:2010/07/unittest-api-part-1.html</id><summary type="html">&lt;p&gt;It's a little known fact, but unittest actually has an API.  &lt;/p&gt;
&lt;p&gt;This isn't the API that you deal with when you write tests, but rather
an API that unittest itself uses when running tests. You could think of
it as two interfaces: one for test frameworks and one for test authors.
Both APIs are real, but both are poorly documented and often
misunderstood or abused.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;An instance of &lt;code&gt;TestCase&lt;/code&gt; represents a single test. What you think of as
a single test is up to you, but most of the time it's a unit test.  &lt;/p&gt;
&lt;p&gt;A &lt;code&gt;TestCase&lt;/code&gt; object &lt;em&gt;must&lt;/em&gt; provide the following methods.  &lt;/p&gt;
&lt;p&gt;This first list of methods can be thought of as a single interface,
which these blog posts will call &lt;strong&gt;&lt;code&gt;ITest&lt;/code&gt;&lt;/strong&gt; given the lack of any
better name.  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;countTestCases()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A method that returns the number of test cases this represents. It
should always return 1.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;run(result=None)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Calling this method actually runs the test. &lt;code&gt;result&lt;/code&gt; is a
&lt;code&gt;TestResult&lt;/code&gt; object. &lt;code&gt;run&lt;/code&gt; must call &lt;code&gt;result.startTest(self)&lt;/code&gt; when
it commences running the test and &lt;code&gt;result.stopTest(self)&lt;/code&gt; when it is
finished. Between these calls it must call a method on &lt;code&gt;result&lt;/code&gt; to
signal the result of the test. &lt;code&gt;run&lt;/code&gt; must never raise an exception,
and its return value is ignored. If &lt;code&gt;result&lt;/code&gt; is not provided, the
&lt;code&gt;TestCase&lt;/code&gt; is obliged to make one.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__call__(result)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;Identical to &lt;code&gt;run(result)&lt;/code&gt;, provided for backwards compatibility.&lt;/dt&gt;
&lt;dt&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Calling this method runs the test without collecting its results. It
may raise exceptions. This method is rarely called by test
frameworks.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The following methods are specific to individual test case objects. We
call this interface &lt;strong&gt;&lt;code&gt;ITestCase&lt;/code&gt;&lt;/strong&gt;.  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Should return a string that uniquely identifies the test. For Python
tests, the fully-qualified Python name works well. The uniqueness of
the id is not enforced.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;shortDescription()&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Should return a string that describes the test. Many test frameworks
use this value to display test results.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__str__&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Should return a string that describes the test. Frequently the same
as either &lt;code&gt;shortDescription()&lt;/code&gt; or &lt;code&gt;id()&lt;/code&gt;. Many test frameworks use
this value to display test results.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;There is also a second interface, one that matters to code that
subclasses &lt;code&gt;TestCase&lt;/code&gt;. We'll deal with that in a later post.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;A &lt;code&gt;TestSuite&lt;/code&gt; represents nothing more or less than a bunch of tests.  &lt;/p&gt;
&lt;p&gt;A &lt;code&gt;TestSuite&lt;/code&gt; must provide the &lt;code&gt;ITest&lt;/code&gt; interface described above, with
the differences that you would expect from something that represents
many tests: &lt;code&gt;countTestCases&lt;/code&gt; returns the number of tests in the suite;
&lt;code&gt;run&lt;/code&gt; runs many tests and thus calls &lt;code&gt;result.startTest&lt;/code&gt; and kin many
times over; &lt;code&gt;debug&lt;/code&gt; is the same and can explode anywhere.  &lt;/p&gt;
&lt;p&gt;One difference is that &lt;code&gt;TestSuite.run&lt;/code&gt; must stop running tests as soon
as it detects that &lt;code&gt;result.shouldStop&lt;/code&gt; is true.  &lt;/p&gt;
&lt;p&gt;In addition, &lt;code&gt;TestSuite&lt;/code&gt; implements the following interface, which I'm
giving the completely arbitrary non-existent name of &lt;code&gt;ITestSuite&lt;/code&gt;.  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;addTest(test)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;Takes an &lt;code&gt;ITest&lt;/code&gt; and adds it to the suite.&lt;/dt&gt;
&lt;dt&gt;&lt;code&gt;addTests(tests)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Takes an iterable of &lt;code&gt;ITest&lt;/code&gt;s and adds them to the suite. Normally
equivalent to &lt;code&gt;[suite.addTest(test) for test in tests]&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__iter__&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;All test suites must be iterable. Iterating over a test suite yields
&lt;code&gt;ITest&lt;/code&gt;s. These may differ from the &lt;code&gt;ITest&lt;/code&gt;s provided to &lt;code&gt;addTest&lt;/code&gt;
and &lt;code&gt;addTests&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;In later posts, I hope to document &lt;code&gt;TestResult&lt;/code&gt;, the subclassing
interface of &lt;code&gt;TestCase&lt;/code&gt; and tell you exactly what I think about test
loaders, test runners and the like.  &lt;/p&gt;
&lt;p&gt;I'm blogging this partly because I don't know where else to write this
up, but mostly because I need your help to make sure that I'm being
clear and correct. Please comment with questions and corrections, and
let me know if you find this at all helpful.&lt;/p&gt;</summary></entry><entry><title>Python 3</title><link href="http://code.mumak.net/2010/07/python-3.html" rel="alternate"></link><updated>2010-07-26T23:40:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-07-26:2010/07/python-3.html</id><summary type="html">&lt;p&gt;I would be much more sympathetic to the whole Python 3 endeavour if they
had made a serious effort to keep the major 2.x releases mutually
compatible.&lt;/p&gt;</summary></entry><entry><title>pyflakes-doctest</title><link href="http://code.mumak.net/2010/07/pyflakes-doctest.html" rel="alternate"></link><updated>2010-07-20T13:08:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-07-20:2010/07/pyflakes-doctest.html</id><summary type="html">&lt;p&gt;Someone at Canonical (I don't know who) wrote something cool once to get
&lt;a href="http://divmod.org/trac/wiki/DivmodPyflakes"&gt;Pyflakes&lt;/a&gt; (the best Python
linter) to run on doctests.  &lt;/p&gt;
&lt;p&gt;It has recently been deleted from the &lt;a href="https://code.launchpad.net/~launchpad-pqm/launchpad/stable"&gt;Launchpad
tree&lt;/a&gt;, but
since it's so useful I thought I'd make it available.  &lt;/p&gt;
&lt;p&gt;Download
&lt;a href="http://people.canonical.com/~jml/pyflakes-doctest"&gt;pyflakes-doctest&lt;/a&gt;
whenever you'd like. If you can get it into Pyflakes trunk, then you'll
become even more wonderfully, deliciously fabulous and creamy than you
undoubtedly are already. Get rid of the Launchpad-specific stuff though.&lt;/p&gt;</summary></entry><entry><title>Documentation again</title><link href="http://code.mumak.net/2010/07/documentation-again.html" rel="alternate"></link><updated>2010-07-06T13:14:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-07-06:2010/07/documentation-again.html</id><summary type="html">&lt;p&gt;Documenting your code is &lt;em&gt;not&lt;/em&gt; important. Well-documented code is not a
thing to be desired nor a goal to be sought. A lack of documentation is
not a problem to be solved. Everyone who tells you otherwise is lying.  &lt;/p&gt;
&lt;p&gt;What &lt;em&gt;is&lt;/em&gt; important is that other programmers can easily understand your
code and the intent behind it, and that &lt;em&gt;you&lt;/em&gt; can understand the code
and the intent six months later.  &lt;/p&gt;
&lt;p&gt;Documenting your code is merely a way of achieving that. It might even
be necessary for it. But do not confuse interface with implementation
and do not confuse what you want with how to get it.  &lt;/p&gt;
&lt;p&gt;Solve the problem of confusing, opaque code. Aim for code that can be
easily understood. Document if necessary.  &lt;/p&gt;
&lt;p&gt;&lt;span class="Apple-style-span"&gt;(it's pretty much always
necessary)&lt;/span&gt;&lt;/p&gt;</summary></entry><entry><title>When do you start testing?</title><link href="http://code.mumak.net/2010/07/when-do-you-start-testing.html" rel="alternate"></link><updated>2010-07-05T14:17:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-07-05:2010/07/when-do-you-start-testing.html</id><summary type="html">&lt;p&gt;Although I love TDD, I don't always use it for everything. I wrote a
Python script the other day to clean up my music collection, and I
didn't write any tests for it.  &lt;/p&gt;
&lt;p&gt;Someone asked me, what's the trade-off? At what point do you start
writing tests?  &lt;/p&gt;
&lt;p&gt;For me, it's at one of a few points:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Somewhere between 100-200 lines of code I start feeling the need for
    tests&lt;/li&gt;
&lt;li&gt;When I start feeling unclear in my head, I reach to tests to make
    them clear&lt;/li&gt;
&lt;li&gt;If someone wants to work with me, tests instantly become mandatory&lt;/li&gt;
&lt;li&gt;When I come back to some code after a while&lt;/li&gt;
&lt;li&gt;When I notice my first bug&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;

What about you? Do you always do TDD? Do you have any rules-of-thumb for
when you do?

&lt;/div&gt;</summary></entry><entry><title>Releasing Twisted, and procedure in general</title><link href="http://code.mumak.net/2010/07/releasing-twisted-and-procedure-in.html" rel="alternate"></link><updated>2010-07-04T13:45:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-07-04:2010/07/releasing-twisted-and-procedure-in.html</id><summary type="html">&lt;p&gt;I'm in the middle of releasing &lt;a href="http://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;
10.1, following the &lt;a href="http://twistedmatrix.com/trac/wiki/ReleaseProcess"&gt;procedure
document&lt;/a&gt; that I
wrote when I released &lt;a href="http://labs.twistedmatrix.com/2010/03/twisted-1000-released.html"&gt;Twisted
10.0&lt;/a&gt;.
Having everything written down has been a wonderful aide so far, but
doing the release twice has made me think about what it takes to breathe
life into old procedure.  &lt;/p&gt;
&lt;p&gt;The very first step has already been taken, &lt;em&gt;figure out what the process
is and write it down.&lt;/em&gt; There are still some bits that are unknown and
hazy, but I expect they'll be clear by the time we're done. Anyway,
writing things down is only the beginning, after that, there are two
things that I think we ought to do roughly concurrently.  &lt;/p&gt;
&lt;p&gt;The first is &lt;em&gt;automate the existing procedure&lt;/em&gt; for which here are
already &lt;a href="http://twistedmatrix.com/trac/query?status=assigned&amp;amp;status=new&amp;amp;status=reopened&amp;amp;group=status&amp;amp;milestone=regular-releases"&gt;many tickets
filed&lt;/a&gt;,
and the second is &lt;em&gt;simplify the process itself&lt;/em&gt;. Are all of the steps in
the process really needed? Why do we have so many tarballs? Why upload
the tarballs to a server that is only periodically mirrored by the
actual official download location? Why generate a PDF?  &lt;/p&gt;
&lt;p&gt;I don't want to start a discussion on the details here, but rather raise
the need for Twisted to begin considering this simplification, and for
myself to begin articulating some of my own thoughts about process in
general.  &lt;/p&gt;
&lt;p&gt;The final, on-going step in revitalizing procedure is to &lt;em&gt;delegate the
task&lt;/em&gt;, either to another human being or better yet a machine. I wonder
if it would be possible to have the Twisted release done by a monthly
cronjob?  &lt;/p&gt;
&lt;p&gt;In summary, to revive an existing process:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Figure out what the process is and write it down&lt;/li&gt;
&lt;li&gt;Simplify the process itself, reducing the number of steps&lt;/li&gt;
&lt;li&gt;Automate as many of the steps as possible, thus combining them&lt;/li&gt;
&lt;li&gt;Delegate the execution of the process&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;</summary></entry><entry><title>Better than a pie chart</title><link href="http://code.mumak.net/2010/06/better-than-pie-chart.html" rel="alternate"></link><updated>2010-06-25T11:26:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-06-25:2010/06/better-than-pie-chart.html</id><summary type="html">&lt;p&gt;The bugs page for projects on Launchpad used to have a really ugly pie
chart on them. It was a strange little graph,  useful because it helped
you feel like you were making progress as you pushed bugs from New to
Triaged to In-progress to Fix Committed and then off the chart
completely with Fix Released.  &lt;/p&gt;
&lt;p&gt;Pie charts suck though. They use two dimensions to represent one
dimension of data, and they are always 100% full. In the case of bugs,
there was no way to tell from the pie chart whether there were more or
fewer bugs than last week.  &lt;/p&gt;
&lt;p&gt;Inspired by some sketches from mpt, I decided to implement what I think
would be a nice graph to have on Launchpad, but to do so using the
&lt;a href="https://help.launchpad.net/API"&gt;webservice API&lt;/a&gt;. I've put some code up
on &lt;a href="https://edge.launchpad.net/everyday"&gt;lp:everyday&lt;/a&gt;, and there's &lt;a href="http://people.canonical.com/~jml/convergence/"&gt;an
example of the graph for the whole Launchpad
project&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The code works by sucking down all of the bug tasks associated with a
project over the API, then storing them in a desktopcouch database, then
using that to generate some timeline data. The graph is made using
&lt;a href="http://code.google.com/p/flot/"&gt;flot&lt;/a&gt;, which is excellent.  &lt;/p&gt;
&lt;p&gt;For those of you who care about Launchpad API details, I've recently
added a parameter to &lt;code class="Apple-style-span"&gt;searchTasks&lt;/code&gt; called
&lt;code class="Apple-style-span"&gt;modified_since&lt;/code&gt; that lets you &lt;a href="https://bugs.edge.launchpad.net/malone/+bug/590535"&gt;fetch only bug tasks
for bugs that have changed since a particular
date&lt;/a&gt;. It makes
syncing so much faster.&lt;/p&gt;</summary></entry><entry><title>Inbox Zero != No email backlog</title><link href="http://code.mumak.net/2010/05/inbox-zero-no-email-backlog.html" rel="alternate"></link><updated>2010-05-20T13:13:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-20:2010/05/inbox-zero-no-email-backlog.html</id><summary type="html">&lt;p&gt;Recently, I've been accused of cheating at Inbox Zero, since although
I've got no email in my Inbox, I have twenty to thirty threads marked
down as things that need reading or following-up on.  &lt;/p&gt;
&lt;p&gt;To these accusations, I have only one thing to say: you're doing it
wrong.  &lt;/p&gt;
&lt;p&gt;Inbox Zero is a method, not a creed. It's not even very much of a goal.
It's a system that says:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;put all of your unprocessed &lt;em&gt;stuff&lt;/em&gt; (in this case, email) in one
    place (your inbox), &lt;/li&gt;
&lt;li&gt;go through that pile of stuff one at a time&lt;/li&gt;
&lt;li&gt;make a decision about what you need to do about it (e.g., "nothing",
    "reply", "actually read it")&lt;/li&gt;
&lt;li&gt;record the results of that decision (put it in a folder; tag it)&lt;/li&gt;
&lt;li&gt;remove the thing from the pile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or rather, it's a succinct way of talking about how to apply GTD
principles to email.  &lt;/p&gt;
&lt;p&gt;&lt;div
style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"&gt;&lt;/p&gt;
&lt;p&gt;The "Zero" refers to the size of that pile of unprocessed stuff, not the
number of things on your todo list.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If you don't have three hours spare to read GTD, you really ought to
spend one hour watching &lt;a href="http://inboxzero.com/video/"&gt;Merlin Mann's video on Inbox
Zero&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>testresources: some examples</title><link href="http://code.mumak.net/2010/05/testresources-some-examples.html" rel="alternate"></link><updated>2010-05-18T10:37:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-18:2010/05/testresources-some-examples.html</id><summary type="html">&lt;p&gt;There's been a clamor for more documentation on how to use
&lt;a href="https://launchpad.net/testresources"&gt;testresources&lt;/a&gt;. While I'm not
qualified to show you the &lt;span&gt;best&lt;/span&gt; way to use it, I can show
you the way that I would begin to use it.  &lt;/p&gt;
&lt;p&gt;The linked files are a bunch of unit tests for database code that uses
&lt;a href="http://storm.canonical.com/"&gt;Storm&lt;/a&gt;. Where a real test suite might use
an in-memory database, this test suite uses on on-disk sqlite database
to better illustrate testresources. This database needs to be removed
and built again after each test to guarantee test isolation.  &lt;/p&gt;
&lt;p&gt;You'll need testresources, Storm and testtools in your Python import
path to run these examples.  &lt;/p&gt;
&lt;p&gt;The first file,
&lt;a href="http://static.mumak.net/complex-example.py"&gt;complex-example.py&lt;/a&gt;, shows
how I might do this without testresources. I create a DatabaseService
class that has a setUp and tearDown of its own, and a get_store()
method that tests are likely to use. This might not be the best thing
for databases, but is very close to what I'd do for network services in
tests, where I would need to start the service, stop it and have methods
to get URLs, clients and other information about the service. If you run
the file, you'll see that the database is &lt;span&gt;created&lt;/span&gt; at the
start of each test, and &lt;span&gt;destroyed&lt;/span&gt; before the test finishes.
In total, it's created and destroyed three times.  &lt;/p&gt;
&lt;p&gt;The second file,
&lt;a href="http://static.mumak.net/complex-example-2.py"&gt;complex-example-2.py&lt;/a&gt;,
shows how to switch to using testresources. To do this I,  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;added a TestResource subclass called DatabaseResource that
    implements make() and clean() by delegating to a DatabaseService.&lt;/li&gt;
&lt;li&gt;changed the test case to subclass ResourcedTestCase&lt;/li&gt;
&lt;li&gt;added 'resources = [('database', DatabaseResource())] as a class
    variable of the test case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of using DatabaseService() in the test, I could have, and
perhaps should have, declared a module level instance of
DatabaseResource. In that case, the code would have looked like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;_DatabaseResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestResource&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="n"&gt;DatabaseResource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_DatabaseResource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;TestPerson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestPerson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="n"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DatabaseResource&lt;/span&gt;&lt;span class="p"&gt;)]...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running the file shows that the behaviour is the same as the first
example: the database is &lt;span&gt;created&lt;/span&gt; and &lt;span&gt;destroyed&lt;/span&gt;
in each test.  &lt;/p&gt;
&lt;p&gt;The third file,
&lt;a href="http://static.mumak.net/complex-example-3.py"&gt;complex-example-3.py&lt;/a&gt;,
shows how to take advantage of OptimisingTestSuite (sic). We load the
test suite as usual, &lt;span&gt;adsorb&lt;/span&gt; (sic) them into an
OptimisingTestSuite and return that. We also have to explicity declare
when a test &lt;span&gt;dirties&lt;/span&gt; the DatabaseResource. I chose to do
this by adding a dirtied() method to the DatabaseService. If I had used
a singleton (as above), then I would have just called dirtied on that.  &lt;/p&gt;
&lt;p&gt;Anyway, if you run the third example, you'll see that the database is
&lt;span&gt;created&lt;/span&gt; and &lt;span&gt;destroyed&lt;/span&gt; outside the tests and
that its only done &lt;span&gt;twice&lt;/span&gt;. The test suite has been optimized
by sharing resources between tests when possible.  &lt;/p&gt;
&lt;p&gt;I hope this helps explain how to use testresources. Certainly writing
has been a useful exercise for me, it's highlighted that:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a list of 2-tuples isn't quite right for declaring which resources a
    test uses.&lt;/li&gt;
&lt;li&gt;the dirtied API is inconvenient&lt;/li&gt;
&lt;li&gt;TestResource remains a confusing name for the class, as it conflates
    the resource acquisition and cleanup with the actual
    &lt;span&gt;resource&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Some of the API docs are wrong (notably the ones for
    ResourcedTestCase).&lt;/li&gt;
&lt;li&gt;The pattern of "resource object with setUp, tearDown, dirtied (and
    addCleanup)" should perhaps be turned into Python code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I long for your thoughts.  &lt;/p&gt;
&lt;p&gt;Examples:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://static.mumak.net/complex-example.py"&gt;complex-example.py&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://static.mumak.net/complex-example-2.py"&gt;complex-example-2.py&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://static.mumak.net/complex-example-3.py"&gt;complex-example-3.py&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Correct links to example Python files.&lt;/p&gt;</summary></entry><entry><title>Ubuntu metahelp required</title><link href="http://code.mumak.net/2010/05/ubuntu-metahelp-required.html" rel="alternate"></link><updated>2010-05-18T08:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-18:2010/05/ubuntu-metahelp-required.html</id><summary type="html">&lt;p&gt;I just got back from UDS-M. If you've never been to a UDS, you probably
don't know what an intense, inspiring, fun, draining time it can be.&lt;/p&gt;
&lt;div&gt;

Anyway, I got back and started mucking around on my Ubuntu 10.04 LTS
laptop on my home network. Everything was great until – suddenly – the
wireless connection drops out. I have two other devices (Android, OS X)
that are connected just fine, so I know it's probably not a network
configuration issue.

&lt;/div&gt;

&lt;div&gt;

I also have noticed this behaviour all the way through Karmic and since
the Lucid beta.

&lt;/div&gt;

&lt;div&gt;

I want to fix this bug. I want this to be my personal contribution to
Maverick. I'm inspired, I'm *pumped*, but I don't really know where to
begin. I don't even know how to file a good bug about this.

&lt;/div&gt;

&lt;div&gt;

That's where I need your help.

&lt;/div&gt;</summary><category term="ubuntu"></category></entry><entry><title>Sometimes, I post elsewhere</title><link href="http://code.mumak.net/2010/05/sometimes-i-post-elsewhere.html" rel="alternate"></link><updated>2010-05-17T11:41:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-17:2010/05/sometimes-i-post-elsewhere.html</id><summary type="html">&lt;p&gt;This blog is about code, programming, developer collaboration and my
technology woes. I have &lt;a href="http://life.mumak.net"&gt;another blog&lt;/a&gt; where I
talk about pretty much everything else that I find interesting.&lt;/p&gt;
&lt;div&gt;

They are split up because a lot of the readers of [Echo and
Bounce](http://life.mumak.net) have no interest and little understanding
of the minutiae of Python hacking, and because [Mere
Code](http://code.mumak.net) is syndicated out to stacks of planets
where the readers probably don't care about [my thoughts on Puritans and
business yoga
probloggers](http://life.mumak.net/2010/05/book-of-you-and-dammit-list.html),
or [why I think garbage bins are so
great](http://life.mumak.net/2009/05/meditations-on-garbage-bin.html).

&lt;/div&gt;

&lt;div&gt;

If you *do* find that sort of stuff interesting, I warmly invite you to
subscribe to my other blog, [Echo and Bounce](http://life.mumak.net), or
to my [combined RSS feed](http://mumak.net/planet/rss20.xml).

&lt;/div&gt;</summary></entry><entry><title>GTG, Astrld, RTM, oh my</title><link href="http://code.mumak.net/2010/05/gtg-astrld-rtm-oh-my.html" rel="alternate"></link><updated>2010-05-10T12:05:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-10:2010/05/gtg-astrld-rtm-oh-my.html</id><summary type="html">&lt;p&gt;&lt;a href="http://weloveastrid.com/"&gt;I love Astrid&lt;/a&gt;, and have really enjoyed
getting the four hundred tasks I have into it and synced with &lt;a href="http://www.rememberthemilk.com/"&gt;Remember
the Milk&lt;/a&gt;. I almost love &lt;a href="http://gtg.fritalk.com/"&gt;Getting
Things GNOME&lt;/a&gt;, and thought I'd experiment a bit
getting my tasks synced from RTM on to my desktop using GTG.&lt;/p&gt;
&lt;div&gt;

Unfortunately, I ballsed something up, and now all of my four hundred
tasks from RTM have been deleted. Sad. They are all still on Astrid
though. Happy. But when I sync from Astrid to Remember the Milk, none of
those four hundred tasks are uploaded. Sad.

&lt;/div&gt;

&lt;div&gt;

If you know how I can get my tasks back on to RTM, can you please
comment here, or on the [question I asked on
Launchpad](https://answers.edge.launchpad.net/astrid/+question/110188).

&lt;/div&gt;</summary></entry><entry><title>Android fun</title><link href="http://code.mumak.net/2010/05/android-fun.html" rel="alternate"></link><updated>2010-05-04T13:43:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-05-04:2010/05/android-fun.html</id><summary type="html">&lt;p&gt;I bought a Nexus One. I got sick of not having any decent todo
applications for the Palm Pre, so I bought a shiny new Android phone.
Some quick thoughts:&lt;/p&gt;
&lt;div&gt;

-   Android has many apps, many of which are very cool
-   Buying an application is way too easy, given Google Checkout
-   I can't seem to get 3G data access from the Nexus One
-   WebOS has a much nicer UI for multi-tasking
-   Wonder if I can get on IRC via my SSH tunneled bip connection

&lt;div&gt;

**Update:** I now have 3G access, thanks to these instructions for
[getting 3G from O2 on Android
phones](http://forum.o2.co.uk/viewtopic.php?p=144262#144262).

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>I don't want to talk about documentation</title><link href="http://code.mumak.net/2010/04/i-dont-want-to-talk-about-documentation.html" rel="alternate"></link><updated>2010-04-29T16:02:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-29:2010/04/i-dont-want-to-talk-about-documentation.html</id><summary type="html">&lt;p&gt;Most of the time, I don't like talking about documentation. I
particularly don't like talking about documenting code. There's not much
to say.&lt;/p&gt;
&lt;div&gt;

&lt;div&gt;

I do like talking about testing though, since I enjoy writing code TDD,
since tests for[big, big, big programs](https://launchpad.net/launchpad)
are really hard and because most everyone else is doing it wrong.

&lt;/div&gt;

&lt;div&gt;

Thing is, every time I talk about testing in the Python world, I have to
talk about documentation because [someone](http://barry.warsaw.us/)
always brings up [doctest](http://docs.python.org/library/doctest.html)
and thinks it's a good way of testing code. It's not. Andrew has
explained clearly the problems with the
[principle](http://bemusement.org/diary/2008/October/23/narrative-tests)
and with the
[implementation](http://bemusement.org/diary/2008/October/24/more-doctest-problems).
He concludes that the only thing that doctest is any good for is writing
self-testing documentation about Python code, and I agree.

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

However, I humbly suggest that for many projects, this is a solution in
search of a problem. Which means I am going to have to talk about
documenting code. Before that, a short plea.

&lt;/div&gt;

&lt;div&gt;

Please stop talking about documentation and testing at the same time!
They are both actually quite tricky, and you can never, ever, ever
effectively address both of them with the same initiative. They are
different! Just stop it!

&lt;/div&gt;

&lt;div&gt;

OK, let's talk about documenting code.

&lt;/div&gt;

&lt;div&gt;

**Why bother?**

&lt;/div&gt;

&lt;div&gt;

Before you even begin to talk about the best way to document your code,
you must seriously consider why you are even bothering.

&lt;/div&gt;

&lt;div&gt;

Time spent documenting code is time not spent fixing bugs. Instead of
writing docs you could be talking to users, making your software
internationalizable, improving its website, improving the *user*
documentation, making the test suite run faster or any number of things
that directly help your end users or your existing developers.

&lt;/div&gt;

&lt;div&gt;

You might want to document your code as part of an initiative to get
more contributors, or to make your existing contributors' lives happier.
If so, great, but make sure that documenting code will actually achieve
these goals.

&lt;/div&gt;

&lt;div&gt;

If not, take pride in your lack of code documentation! It is the direct
fruit of you doing better things with your life. Stand up, walk out the
door and skip down the street, clutch the first suit-wearing stranger
you see by his lapels and shout "My code is under-documented, yippee
ki-yay!"

&lt;/div&gt;

&lt;div&gt;

More seriously, know why you are documenting your code, don't just do it
out of guilt, and don't feel guilty if your code is under-documented
while your users are many and happy.

&lt;/div&gt;

&lt;div&gt;

**Guiding principles**

&lt;/div&gt;

&lt;div&gt;

*Audience and benefit*

&lt;/div&gt;

&lt;div&gt;

Do not even bother to write a document unless you have an audience in
mind and a clear benefit in mind for what they'll get out of reading
this document. And no, "help them understand the branch puller XML-RPC
API" is not a clear benefit.

&lt;/div&gt;

&lt;div&gt;

As an example, I'm writing this blog post primarily for Python
programmers at work and in the open source projects I care about. My aim
is to convince them to be silent about doctest when we're talking about
testing and to see the whole picture when talking about documentation so
that they'll have good unit tests and won't misdirect energy toward
inappropriate documentation. I have a secondary aim of learning where
I'm wrong by reading the comments.

&lt;/div&gt;

&lt;div&gt;

*Clear code*

&lt;/div&gt;

&lt;div&gt;

If someone is reading documentation that's about code, then they can
probably read code. You can probably save everyone a lot of trouble by
picking better names, adding a couple of docstrings, fixing the bits
you're embarrassed by and deleting the crap that you don't need.

&lt;/div&gt;

&lt;div&gt;

To put it another way, when people say "this needs documentation" they
often mean "I don't understand this" (similarly, "we have a
communication problem" often means "you are not doing what I want"). The
best way to help them is not necessarily to write documentation.

&lt;/div&gt;

&lt;div&gt;

*Value is in the output*

&lt;/div&gt;

&lt;div&gt;

Documentation that's not being read is worthless and probably incorrect,
much like code that is not being executed. Documentation that cannot be
found cannot be read. How is your audience going to find your
documentation? Is it going to be in a format they like to read? Don't
bother writing anything until you've figured this out.

&lt;/div&gt;

&lt;div&gt;

**Different approaches**

&lt;/div&gt;

&lt;div&gt;

*No documentation, just code*

&lt;/div&gt;

&lt;div&gt;

Some people believe that no human language text should ever sully their
code base. There are plenty of good sentiments behind this idea: source
code is a powerful tool for describing how to think about a problem;
textual documentation about code frequently goes out of date and it's
often used as a crutch for bad code.

&lt;/div&gt;

&lt;div&gt;

Personally, I think it's a bad idea to have no documentation. Even the
best coders read good prose faster than good code, and text has a
wonderful power of summary that code lacks. Sometimes it's impossible to
communicate the intent of the code in the code itself (for example, you
might be working around a POSIX insanity). Nothing wrong with using a
crutch when your leg is broken.

&lt;/div&gt;

&lt;div&gt;

*API reference documentation*

&lt;/div&gt;

&lt;div&gt;

Instead of having no documentation, you can use Python's docstring
feature to add a mini-document describing a class or function. This
docstring can tell you how to use it, what to expect from it, and most
importantly, why you should care. Because Python functions don't have
explicit type declarations, these docstrings can be *very* useful (is
that `branch` parameter a Bazaar branch, a Launchpad `IBranch` object or
the URL for a branch?). Also, because the docstring is so close to the
code, they are much less likely to be out of date or incorrect.

&lt;/div&gt;

&lt;div&gt;

*Specifications*

&lt;/div&gt;

&lt;div&gt;

[Some people](http://rspec.info/) like having specifications as part of
the documentation for their code. I haven't really seen this in
practice, so I can't comment much. I can say that I find good comments
on unit tests extremely helpful, and now almost always write such a
comment before I write the test.

&lt;/div&gt;

&lt;div&gt;

*Guides, tutorials and howtos*

&lt;/div&gt;

&lt;div&gt;

Rather than consulting a reference, you sometimes want to be guided
through a task or to be introduced to some new area of the problem
domain. In these cases, it's pretty hard to beat a solid chunk of prose
with some code examples. It's here that doctest shines, since it's quick
to write, can be rendered nicely and can be executed to guarantee the
code is not hopelessly wrong.

&lt;/div&gt;

&lt;div&gt;

**Summary**

&lt;/div&gt;

&lt;div&gt;

Code documentation is not intrinsically valuable. It has no value unless
you give careful thought to why you want to do it and how it is going to
connect you to your audience. Once you've done that, prose documentation
can be very helpful, but you can also get a lot of the same benefits by
cleaning up your code base.

&lt;/div&gt;

&lt;div&gt;

Doctest is neither necessary nor sufficient for good code documentation.
Do not use it simply because it is there. Use it when it fits.

&lt;/div&gt;

&lt;div&gt;

Now, please can we go back to talking about testing?

&lt;/div&gt;</summary></entry><entry><title>Another hacking maxim?</title><link href="http://code.mumak.net/2010/04/another-hacking-maxim.html" rel="alternate"></link><updated>2010-04-29T10:17:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-29:2010/04/another-hacking-maxim.html</id><summary type="html">&lt;p&gt;Kill annoyances early.&lt;/p&gt;</summary></entry><entry><title>Wheels within wheels</title><link href="http://code.mumak.net/2010/04/wheels-within-wheels.html" rel="alternate"></link><updated>2010-04-27T17:34:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-27:2010/04/wheels-within-wheels.html</id><summary type="html">&lt;p&gt;Software is best built incrementally. I hope everyone agrees with that.
There's quite a bit of disagreement as to what "incrementally", of
course, but it seems to have something to do with &lt;em&gt;iterations&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;No one really agrees on what an iteration is either. There are a lot of
fancy metaphors and abstract phrases that get used to describe the
various bits of what people think an iteration is: customers tell
"stories" that engineers then "estimate"; programmers "sprint" like
children at an athletics carnival; they "release" software as if it were
an insufficiently randy panda; deliverables get delivered.  &lt;/p&gt;
&lt;p&gt;When one washes all of the metaphors and best little practices away,
what's left is this: build a little bit of software; evaluate it.
Ideally, the software is evaluated by someone who stands to benefit
directly from using it.  &lt;/p&gt;
&lt;p&gt;I'm not sure there's much more to recent software methodologies than
that. Perhaps we can explore it more in the comments.  &lt;/p&gt;
&lt;p&gt;This combination of increments and iterations spirals toward the final
product, which is generally what you have left when the money runs out.
Alas, if only we could draw a picture of the process with a simple
spiral! When I think of it, I fall prey to a rare attack of envy toward
students of &lt;a href="http://en.wikipedia.org/wiki/Hermeneutics"&gt;hermeneutics&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The process involves spirals within spirals, cycles made up of cycles.
Going&lt;br /&gt;
inwards from the greatest wheel to the smallest, the Launchpad project
has:  &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;planning cycles&lt;/dt&gt;
&lt;dd&gt;When we plan the major features and general direction of Launchpad.
&lt;a href="https://dev.launchpad.net/RoadMap"&gt;Road map&lt;/a&gt; sort of  &lt;/dd&gt;
&lt;dt&gt;stuff. Approximately six months.&lt;/dt&gt;
&lt;dt&gt;feature cycles&lt;/dt&gt;
&lt;dd&gt;The repeated process of beginning a feature, developing it,
releasing it,  &lt;/dd&gt;
&lt;dt&gt;fixing it, then stopping. Varies in cycle time, but usually one to&lt;/dt&gt;
&lt;dt&gt;three&lt;/dt&gt;
&lt;dt&gt;months.&lt;/dt&gt;
&lt;dt&gt;release cycles&lt;/dt&gt;
&lt;dd&gt;We release whatever is in &lt;a href="https://dev.launchpad.net/Trunk"&gt;trunk&lt;/a&gt;
each month&lt;/dd&gt;
&lt;dt&gt;branch cycles&lt;/dt&gt;
&lt;dd&gt;Branch from trunk, hack on it, push it up, get it reviewed, land it,
wait  &lt;/dd&gt;
&lt;dt&gt;until it passes the test suite, check that the changes worked. Two&lt;/dt&gt;
&lt;dt&gt;or three&lt;/dt&gt;
&lt;dt&gt;days.&lt;/dt&gt;
&lt;dt&gt;experiment cycles&lt;/dt&gt;
&lt;dd&gt;A developer is working on a thing and wants to actually see how it
works  &lt;/dd&gt;
&lt;dt&gt;in the running code. They write many tests and a fair bit of code&lt;/dt&gt;
&lt;dt&gt;and then&lt;/dt&gt;
&lt;dt&gt;fire up a development instance of Launchpad and see how it looks.&lt;/dt&gt;
&lt;dt&gt;TDD cycles&lt;/dt&gt;
&lt;dd&gt;Write a failing test. Run the tests (a subset of the whole suite).
Make  &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;the test pass. Run the tests. Refactor. Run the tests. Probably
    about&lt;br /&gt;
   half-an-hour?&lt;/p&gt;
&lt;p&gt;Different projects surely have different kinds of cycles. Most projects
probably have a subset of the ones above. In any case, thinking in terms
of nested cycles is a good way of analyzing ones development process.  &lt;/p&gt;
&lt;p&gt;Each of these cycles has its own overhead and its own waste. One cycle
being particularly slow has a different effect to another cycle being
slow. For example, I contend that the slow branch cycle makes it less
likely that trivial bugs get fixed.  &lt;/p&gt;
&lt;p&gt;Lean advocates would tell me not to think this way. They would have me
unroll these cycles and lay them out on a line beginning with someone
wanting something and ending with that want satisfied. They would have
me draw a "value stream map".  &lt;/p&gt;
&lt;p&gt;Bollocks to them. At least on Launchpad, we should optimize the
innermost loops first.  &lt;/p&gt;
&lt;p&gt;Have I missed some kinds of cycles? Can you think of a better name than
"experiment cycle"? Is there prior literature I should read? Are you
going to apply these ideas to your project?&lt;/p&gt;</summary></entry><entry><title>Accelerate</title><link href="http://code.mumak.net/2010/04/accelerate.html" rel="alternate"></link><updated>2010-04-24T19:37:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-24:2010/04/accelerate.html</id><summary type="html">&lt;div&gt;

&lt;div&gt;

The single most important thing we can do for Launchpad as a product is
make our own rate of development faster. I say this as a developer and
as the “product strategist”.

&lt;/div&gt;

&lt;div&gt;

One large chunk of my responsibilities consists in talking with
development teams that use Launchpad and finding out what they need.
Almost every time I talk with them, I learn that their projects flow
much more quickly than Launchpad. As a developer, this makes me jealous.

&lt;/div&gt;

&lt;div&gt;

As a product strategist, I see all sorts of little things in Launchpad
that need to be tweaked, and quite a few not-so-little things. When I
don't see them, people are often kind enough to point them out. Maybe if
Launchpad were much easier to change, then we developers would
spontaneously make small fixes more often. I know I would.

&lt;/div&gt;

&lt;div&gt;

Maybe later I'll talk about what we can do about it, but for now I feel
strongly enough about the issue that it deserves its own post.

&lt;/div&gt;

&lt;div&gt;

The single most important thing we can do for Launchpad as a product is
make our own rate of development faster.

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Python Testing: A review</title><link href="http://code.mumak.net/2010/04/python-testing-review.html" rel="alternate"></link><updated>2010-04-24T12:23:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-24:2010/04/python-testing-review.html</id><summary type="html">&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/_i72o3jegILg/S9LbHwDQ5_I/AAAAAAAAABs/oYwQaHlELgs/s1600/Python+Testing.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/_i72o3jegILg/S9LbHwDQ5_I/AAAAAAAAABs/oYwQaHlELgs/s200/Python+Testing.jpg" /&gt;&lt;/a&gt;Quite
a few weeks ago, perhaps even months, I was asked by &lt;a href="http://www.packtpub.com/"&gt;Packt
Publishing&lt;/a&gt; to review a new book: "&lt;a href="http://www.packtpub.com/python-testing-beginners-guide/book?utm_source=code.mumak.net&amp;amp;utm_medium=bookrev&amp;amp;utm_content=blog&amp;amp;utm_campaign=mdb_002509"&gt;Python
Testing: Beginner's
Guide&lt;/a&gt;"
by Daniel Arbuckle. They were very nice and even sent me a physical copy
of the book, and have been moderately tolerant of the long delay between
me receiving the book and writing this blog post.&lt;/p&gt;
&lt;div&gt;

Python Testing promises "an easy and convenient approach to testing your
Python projects". The book takes a tool-based approach to introducing
the reader to testing in Python. It starts with
[doctests](http://bemusement.org/diary/2008/October/24/more-doctest-problems),
goes on to [mocker](https://edge.launchpad.net/mocker), then
[unittest](http://docs.python.org/library/unittest.html), then
[nose](http://somethingaboutorange.com/mrl/projects/nose/0.11.3/). Then
I stopped reading.

&lt;/div&gt;

&lt;div&gt;

It's not a bad book by any stretch, I just don't know who it's for. Bear
in mind that I'm not a beginner to Python testing so I'm probably not
the best judge.

&lt;/div&gt;

&lt;div&gt;

Taking a tool-based approach seems like an odd decision to me,
especially for a printed book. The tools change all of the time, and
there is a reasonable amount of documentation for each of the tools
mentioned. A motivated beginner could probably make do with a blog post
listing each of the tools.

&lt;/div&gt;

&lt;div&gt;

Many of the examples in the book are based on quite complex real-world
problems. In some ways, this is great, since it could help to convince
testing sceptics that testing is relevant to their project and it could
help along those who have trouble applying theory. On the other hand, I
think anyone who is up to following an AVL tree implementation is
capable of googling for "[python testing
tools](http://www.google.co.uk/search?hl=en&amp;source=hp&amp;q=python+testing+tools&amp;meta=&amp;aq=f&amp;aqi=&amp;aql=&amp;oq=&amp;gs_rfai=)".

&lt;/div&gt;

&lt;div&gt;

Reading through, I found myself wishing for advice on the principles of
testing. How should I organize my tests on a Python project? How much
code should I cover in each test? What are the risks in using mock
objects? I sense that the author has never engaged with Gerald Meszaros'
excellent work on [xUnit Test Patterns](http://xunitpatterns.com/),
which is a must for everyone who isn't [Robert
Collins](http://rbtcollins.wordpress.com/).

&lt;/div&gt;

&lt;div&gt;

I don't like writing such a negative review. It's hard work writing a
technical book – I tried writing one for Bazaar and gave up. Daniel
Arbuckle deserves credit for tackling such an important topic, for
working so hard to avoid being dry and for his obvious concern for
actually helping developers with their testing situation.

&lt;/div&gt;

&lt;div&gt;

That said, if you are new to automated testing altogether, then you
would be much better off reading Kent Beck's [Test Driven Development by
Example](http://www.amazon.com/dp/0321146530/?tag=hashemian-20). If you
know testing well, but don't know Python so well, then I guess you might
get something out of Python Testing.

&lt;/div&gt;</summary></entry><entry><title>Shot, crop and share</title><link href="http://code.mumak.net/2010/04/shot-crop-and-share.html" rel="alternate"></link><updated>2010-04-21T12:01:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-21:2010/04/shot-crop-and-share.html</id><summary type="html">&lt;p&gt;A thing I do all the time is:&lt;/p&gt;
&lt;div&gt;

-   take a screenshot of a window
-   open up GIMP
-   crop to the relevant parts
-   share the screenshot as a bug or email attachment

&lt;div&gt;

The "take a screenshot" step is actually:

&lt;/div&gt;

&lt;/div&gt;

&lt;div&gt;

-   Fire up GNOME Do
-   Type "s c r RET"
-   Select "Grab the current window"
-   Click "Take screenshot"

&lt;div&gt;

Is there a faster way of doing this? I particularly want to speed up the
cropping and grabbing steps.

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>The Dude Abides</title><link href="http://code.mumak.net/2010/04/dude-abides.html" rel="alternate"></link><updated>2010-04-20T10:02:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-20:2010/04/dude-abides.html</id><summary type="html">&lt;p&gt;Last one on this topic.  &lt;/p&gt;
&lt;p&gt;After I &lt;a href="http://code.mumak.net/2010/04/plane-has-crashed-into-mountain.html"&gt;broke the
rollout&lt;/a&gt;
by &lt;a href="http://code.mumak.net/2010/04/all-dude-wanted-was-his-rug-back.html"&gt;switching the subunit
dependency&lt;/a&gt;
from being managed in a branch to being managed with Ubuntu packages, I
thought my patch had to be reverted.  &lt;/p&gt;
&lt;p&gt;But no! &lt;a href="https://launchpad.net/~flacoste"&gt;Francis&lt;/a&gt; got angry enough to
fix the underlying problem. He split the &lt;a href="https://code.edge.launchpad.net/~flacoste/launchpad/bug-559128/+merge/23504"&gt;script authentication out of
our&lt;code&gt;lp.testing&lt;/code&gt;
package&lt;/a&gt;
, so we no longer use &lt;code&gt;lp.testing&lt;/code&gt; – or subunit – in production. The
patch &lt;a href="https://code.edge.launchpad.net/~jml/launchpad/no-testing-on-prod-bug-559128-devel/+merge/23655"&gt;missed a
spot&lt;/a&gt;,
but that was easily fixed.  &lt;/p&gt;
&lt;p&gt;Launchpad is rolling out regularly as ever, and my
&lt;a href="http://pypi.python.org/pypi/zope.testing"&gt;zope.testing&lt;/a&gt; upgrade is
lying snug in the trunk.  &lt;/p&gt;
&lt;p&gt;Lessons? I guess that anger is a powerful and
&lt;a href="http://life.mumak.net/2008/10/truth.html"&gt;constructive&lt;/a&gt; force in
programming. That help from someone else is valuable for both the help
itself and for the boost in motivation that it brings. That software is
plain hard. That crying "Lean, Lean" isn't enough.&lt;/p&gt;</summary></entry><entry><title>Tests and documentation good but different</title><link href="http://code.mumak.net/2010/04/tests-and-documentation-good-but.html" rel="alternate"></link><updated>2010-04-19T17:08:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-19:2010/04/tests-and-documentation-good-but.html</id><summary type="html">&lt;p&gt;I've long held that doctests are no way to test code. Andrew Bennetts
explains the problems with &lt;a href="http://bemusement.org/diary/2008/October/23/narrative-tests"&gt;narrative
tests&lt;/a&gt; and
why &lt;a href="http://bemusement.org/diary/2008/October/24/more-doctest-problems"&gt;tests are better written in code rather than
text&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;

Recently, the Zope developer community has started taking these ideas
seriously, and is [starting to change its testing
strategy](https://mail.zope.org/pipermail/zope-dev/2010-April/040160.html).
This can only be a win for them: better test coverage and documentation
driven by user needs.

&lt;/div&gt;</summary></entry><entry><title>Launchpad: The Road Ahead</title><link href="http://code.mumak.net/2010/04/launchpad-road-ahead.html" rel="alternate"></link><updated>2010-04-19T12:45:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-19:2010/04/launchpad-road-ahead.html</id><summary type="html">&lt;p&gt;I know that many of you follow the &lt;a href="https://dev.launchpad.net/RoadMap"&gt;Launchpad Road
Map&lt;/a&gt; with an interest so keen and
passionate that it can only be described as obsessive. Some of you might
fail to penetrate through its crusty, bureaucratic exterior to its
swirling, luminous core, and thus stumble blindly into the future,
heedless of the glancing rays that this document triumphantly casts on
&lt;em&gt;the road ahead&lt;/em&gt;. If you are one of these benighted souls, then take my
arm and allow me to guide you on.&lt;/p&gt;
&lt;div&gt;

We're starting to get a picture of [what we want to do in the second
half of 2010](https://dev.launchpad.net/RoadMap#road-ahead). In
particular, lots of people within the team and within Canonical are
starting to get fed up with our privacy and permissions model, which is
quite patchy. It's currently tangled up with the way we send emails to
people, and we'd love to untangle them.

&lt;/div&gt;

&lt;div&gt;

The [Foundations](http://launchpad.net/launchpad-foundations) team are
already at work making Launchpad faster, and that's something we want
work on even more in the coming months. Derivative distributions – that
is, a Linux distribution that extends or customizes another one,
generally Ubuntu – have always been a key part of the vision for
Launchpad, and they are finally going to get the effort they deserve.

&lt;/div&gt;

&lt;div&gt;

Finally, we want to do whatever we can to make the [Ubuntu Software
Center](https://wiki.ubuntu.com/SoftwareCenter) rock harder than it does
already. Launchpad occupies a special place in the Software Center
world, since it can help make it easier to get applications for your
desktop *and* make it easier to develop those applications.

&lt;/div&gt;

&lt;div&gt;

Glorious and radiant though it is, the light of the road map shines onto
the ever-changing territory of the future. We might discover new twists,
valleys might open up before us, vast emergences could … emerge. We'll
keep the map current, but it *will* change. If you wish to stay as
up-to-date as possible, [subscribe
now](https://dev.launchpad.net/RoadMap?action=subscribe).

&lt;/div&gt;

&lt;div&gt;

Strategist out.

&lt;/div&gt;</summary></entry><entry><title>The plane has crashed into the mountain</title><link href="http://code.mumak.net/2010/04/plane-has-crashed-into-mountain.html" rel="alternate"></link><updated>2010-04-15T17:55:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-15:2010/04/plane-has-crashed-into-mountain.html</id><summary type="html">&lt;p&gt;In &lt;a href="http://code.mumak.net/2010/04/all-dude-wanted-was-his-rug-back.html"&gt;my previous
post&lt;/a&gt;,
I described all of the steps that I and several others took to get &lt;a href="https://code.edge.launchpad.net/~jml/launchpad/new-zope-testing/+merge/21539"&gt;my
upgrade&lt;/a&gt;
to &lt;a href="http://pypi.python.org/pypi/zope.testing"&gt;zope.testing&lt;/a&gt; landed.&lt;/p&gt;
&lt;div&gt;

There has been a problem. [subunit](https://launchpad.net/subunit) is a
dependency of the launchpad-developer-dependencies package, since it's
only there for running tests.

&lt;/div&gt;

&lt;div&gt;

However, subunit is being imported by our core test support package,
`lp.testing`. That package is being imported by the webapp in
production. launchpad-developer-dependencies is not installed in
production, launchpad-dependencies is instead. Now that I've removed
subunit from our sourcecode dependencies, subunit is no longer installed
on production.

&lt;/div&gt;

&lt;div&gt;

I broke the rollout.

&lt;/div&gt;

&lt;div&gt;

The real problem, apparently, is that we are importing lp.testing in
production. That problem always existed, but my patch made it known. And
now that we know it, we can't have unnecessary packages installed on our
production systems. Not that installing subunit as a package would be
any *worse* than running a production system that relies on really old
non-packaged version, but sometimes you've got to draw a line in the
sand. Across this line, you do not—

&lt;/div&gt;

&lt;div&gt;

Anyway. Since installing subunit as a package is unacceptable, my patch
must be reverted, as well as the [ec2 test
improvement](https://code.edge.launchpad.net/~jml/launchpad/subunit-by-default/+merge/18449)
I did based on it. I can land it again when we have fixed the “real”
problem of production code importing test code.

&lt;/div&gt;

&lt;div&gt;

**Update:** Just to be crystal clear, I've talked about this and the
previous post with my manager before I posted. Both of us want to
understand the underlying problems and solve them.

&lt;/div&gt;</summary></entry><entry><title>All the dude wanted was his rug back</title><link href="http://code.mumak.net/2010/04/all-dude-wanted-was-his-rug-back.html" rel="alternate"></link><updated>2010-04-14T16:46:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-04-14:2010/04/all-dude-wanted-was-his-rug-back.html</id><summary type="html">&lt;p&gt;All I wanted was to get &lt;a href="https://launchpad.net/subunit"&gt;subunit&lt;/a&gt; output
from our test runner. I got it, but at a much higher price than I
expected to pay. This is my story.  &lt;/p&gt;
&lt;h2&gt;Quick and dirty, April 2009&lt;/h2&gt;
&lt;p&gt;It's often a good idea to try to get something working as quickly as
possible, even if the hack to get it working is a little dirty.  &lt;/p&gt;
&lt;p&gt;For getting subunit output from our test runner, the &lt;em&gt;right&lt;/em&gt; thing to do
is to change the &lt;code&gt;TestResult&lt;/code&gt; object used by the test runner. In
Python's standard unittest and in most xUnit frameworks, &lt;code&gt;TestResult&lt;/code&gt;
objects are responsible for reporting results to the user.  &lt;/p&gt;
&lt;p&gt;If &lt;a href="http://pypi.python.org/pypi/zope.testing/"&gt;zope.testing&lt;/a&gt; were
designed more in-line with other Python testing frameworks, this would
also have been the quick and easy way to do it.  &lt;/p&gt;
&lt;p&gt;Sadly, zope.testing embeds quite a lot of logic necessary for the
execution of tests in its &lt;code&gt;TestResult&lt;/code&gt; object, so I can't just swap it
out for one that implements the standard interface.  &lt;/p&gt;
&lt;p&gt;Instead, I created a &lt;code&gt;MultiTestResult&lt;/code&gt; object and added it to
&lt;a href="https://launchpad.net/testtools"&gt;testtools&lt;/a&gt;. It acts like a single test
result but dispatches to a bunch of test results.  &lt;/p&gt;
&lt;p&gt;Then I did a quick and dirty thing to silence any output that
zope.testing's result object might have generated, and used
&lt;code&gt;MultiTestResult&lt;/code&gt; to glue in a subunit test result. Since zope.testing
doesn't have a way of plugging in test results, I did some evil monkey
patching.  &lt;/p&gt;
&lt;h2&gt;Fix zope.testing, 5th February 2010&lt;/h2&gt;
&lt;p&gt;Now, what I &lt;em&gt;should&lt;/em&gt; have done is fix zope.testing so that it had its
own way of generating subunit output cleanly.  &lt;/p&gt;
&lt;p&gt;I didn't, because at the time Launchpad was using a very old version of
zope.testing. We couldn't upgrade because we were using Python 2.4 and
new Zope bits needed Python 2.5.  &lt;/p&gt;
&lt;p&gt;However, eventually we got Python 2.5 support, upgraded our Zope Toolkit
bits and pieces and started using a newer version of zope.testing. Once
that happened, patching zope.testing became feasible, since I'd actually
be able to use the results of my labor.  &lt;/p&gt;
&lt;p&gt;Looking at zope.testing, I would have to either disentangle the
layer-running logic from the &lt;code&gt;TestResult&lt;/code&gt; code, or I would have to
implement my own “formatter”. Disentangling the layer stuff would be
way, way too much work, so I went for the formatter.  &lt;/p&gt;
&lt;p&gt;A zope.testing &lt;code&gt;OutputFormatter&lt;/code&gt; is an object that implements a very
big, undocumented interface and is responsible for displaying almost all
of the output that the Zope testrunner could possibly generate.  &lt;/p&gt;
&lt;p&gt;To implement one, you have to implement twenty-seven methods, most of
which lack clear documentation or usage information. There are tests,
which is nice, but the tests are big integration tests, rather than unit
tests.  &lt;/p&gt;
&lt;p&gt;Anyway, I implemented a subunit output formatter over the course of a
few weeks, then submitted it to the Zope community and got it landed.
Really, they are wonderful people.  &lt;/p&gt;
&lt;p&gt;Next step, actually using this patch.  &lt;/p&gt;
&lt;h2&gt;Upgrade zope.testing, 13th March 2010&lt;/h2&gt;
&lt;p&gt;Upgrading zope.testing is easy enough. We use buildout, it's a simple
question of updating a version number in a configuration file, running a
few simple commands, wondering why it doesn't work, discovering it's a
local config issue, repeating two or three times and then you're done.  &lt;/p&gt;
&lt;p&gt;Upgrading subunit was really hard. To explain why, I'll have to go into
some detail about the way Launchpad handles dependencies.  &lt;/p&gt;
&lt;p&gt;We have three different kinds of dependencies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source code dependencies&lt;/li&gt;
&lt;li&gt;Buildout dependencies&lt;/li&gt;
&lt;li&gt;Package dependencies&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of them is managed differently, and updating each of them has its
own complexities. I ended up trying all of them.  &lt;/p&gt;
&lt;h3&gt;Source code&lt;/h3&gt;
&lt;p&gt;Subunit was already included as a &lt;em&gt;source code&lt;/em&gt; dependency. That means
that we had a branch with the Launchpad version of subunit, and that we
pull from that branch whenever we roll out or update our code. Kind of
like svn:externals, but managed with custom scripts.  &lt;/p&gt;
&lt;p&gt;I needed to use a newer subunit than the one we already had in order to
get zope.testing subunit output working. To do that, I would have to
merge in changes from subunit trunk. Normally, that would be quite
easy.  &lt;/p&gt;
&lt;p&gt;However, subunit has since upgraded its Bazaar repository format from
something old and crappy into the new, shiny and awesome 2a format. The
2a format is completely incompatible with older formats, and I cannot
merge from the new trunk into Launchpad's old subunit branch.  &lt;/p&gt;
&lt;p&gt;I have no idea still how to upgrade Launchpad's old subunit branch. It's
a PQM-managed branch and I couldn't find documentation. Even if I could
upgrade the branch, I'd have no promise that the tools that our ops guys
use to rollout Launchpad would be robust in the face of a Bazaar
repository format change. The last thing I want to do is break a rollout
because I want to upgrade some developer tools.  &lt;/p&gt;
&lt;h3&gt;Buildout&lt;/h3&gt;
&lt;p&gt;I then gave up on using source code dependencies and tried buildout,
which is our “recommended” way of handling dependencies.  &lt;/p&gt;
&lt;p&gt;subunit is a tricky thing to handle with buildout. Buildout is at its
best when it's managing Python packages. subunit is not a Python
package. It's a multi-language project that builds into some binaries
and some libraries, including Python libraries. It uses autotools to do
all of this.  &lt;/p&gt;
&lt;p&gt;There are ways to build autotools packages using buildout. You add the
egg for the “&lt;a href="http://pypi.python.org/pypi/zc.recipe.cmmi"&gt;cmmi&lt;/a&gt;” recipe
to your dependencies and specify a particular build recipe for the
autotools package. This kind of worked, but it left me with two
problems.  &lt;/p&gt;
&lt;p&gt;The first was that the Python libraries that it generated were buried
somewhere deep in the build output, and not included naturally in the
Python import paths as happens with a regular setup.py build. Not a big
deal, we can glue it together with symlinks.  &lt;/p&gt;
&lt;p&gt;The second is that to build subunit, I actually needed cppunit and
check, and maybe some other things. I really, really don't want to
manually traverse the build dependency chain of subunit and add each of
these things as eggs to our buildout &lt;em&gt;just&lt;/em&gt; so I can get subunit output
from our test suite.  &lt;/p&gt;
&lt;h3&gt;Packages&lt;/h3&gt;
&lt;p&gt;Which naturally made me think of Debian packages. After all, what better
way to manage complex dependencies?  &lt;/p&gt;
&lt;p&gt;Unfortunately, I really don't have any idea how to update the Debian
packages in &lt;a href="https://edge.launchpad.net/~launchpad/+archive/ppa"&gt;our
PPA&lt;/a&gt;. I asked on
#launchpad-dev and quickly got some &lt;a href="https://dev.launchpad.net/LaunchpadPpa"&gt;helpful
advice&lt;/a&gt; about how to do it.  &lt;/p&gt;
&lt;p&gt;There's some &lt;code&gt;debian/&lt;/code&gt; directory fiddling, changelog updating and so
forth. Then I use bzr-builder. Then I submit the branch to
l&lt;a href="https://edge.launchpad.net/meta-lp-deps"&gt;p:meta-lp-deps&lt;/a&gt;, which is
where we manage the code for the package, then I build it in the PPA.
The PPA build doesn't work because I didn't sign the code of conduct –
easily fixed.  &lt;/p&gt;
&lt;p&gt;I try again and it works and it looks like all is right with the world.
Apparently though, I got something wrong. Luckily
&lt;a href="https://edge.launchpad.net/~maxb"&gt;maxb&lt;/a&gt; fixed it for me while I slept
so I didn't need to do anything about it.  &lt;/p&gt;
&lt;p&gt;Yay! I have now officially updated the version of subunit that we depend
on. Now all that's left for me to do is propagate that change and then
land my branch.  &lt;/p&gt;
&lt;p&gt;To propagate the change, I need to update the EC2 images that we use for
running our tests. There's a command to do that and a &lt;a href="https://dev.launchpad.net/EC2Test/Image"&gt;very helpful wiki
page with instructions&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I follow the instructions, and it doesn't work. The error is weird, and
to do with some crazy socket thing. No one has a clue what to do about
it, and I'm actually quite busy doing other things, so I leave it rest
for a couple of days.  &lt;/p&gt;
&lt;p&gt;When I come back to try again, I google around for the error and
discover that it's actually a &lt;a href="https://bugs.edge.launchpad.net/ubuntu/+source/openjdk-6/+bug/542395"&gt;bug in openjdk that affected the Lucid
beta
release&lt;/a&gt;
and has now been fixed. Hooray, I guess.  &lt;/p&gt;
&lt;p&gt;I update my Lucid install and get ec2 to build the new image for
testing. Once that's done, I need to get our ops guys to update the
&lt;em&gt;completely different&lt;/em&gt; set of images that we use on our buildbot.  &lt;/p&gt;
&lt;p&gt;I send off a request, and there's a bit of back-and-forth. Apparently we
use one archive for development, which I've updated, and a completely
different archive for production rollouts, which I am not allowed to
update. After ten working days, it all gets sorted out, and now I am
able to land my branch.  &lt;/p&gt;
&lt;h2&gt;Landing the branch, 10th April 2010&lt;/h2&gt;
&lt;p&gt;At last, I'm ready to land my branch.  &lt;/p&gt;
&lt;p&gt;It doesn't work. Of course.  &lt;/p&gt;
&lt;p&gt;I could have sworn that I ran the full test suite with it, both with
subunit output and with the default, but it seems to be broken in two
ways.  &lt;/p&gt;
&lt;p&gt;The first is that the subunit output support in zope.testing is broken.
I made the &lt;code&gt;error&lt;/code&gt; method raise &lt;code&gt;NotImplementedError&lt;/code&gt;. This means that
if ever a layer fails to start up properly, the test runner dies with an
unhelpful error that masks the layer's own error. Suck.  &lt;/p&gt;
&lt;p&gt;The right way to fix it is to add a new API to the formatter to
specifically handle layer set-up errors. I take the quick-and-dirty
approach of just printing out whatever &lt;code&gt;error&lt;/code&gt; gets. Patch is sent off
to zope-dev mailing list.  &lt;/p&gt;
&lt;p&gt;The second is that new zope.testing has deprecated its &lt;code&gt;doctest&lt;/code&gt; module,
and emits deprecation warnings all over the place. We have tests that
fail if warnings are emitted – sixteen, to be precise – so I can't
upgrade until I somehow stop the warnings.  &lt;/p&gt;
&lt;p&gt;They are generated by zope.app.testing.functional in the Librarian
start-up. Why on earth the Librarian needs
&lt;a href="http://pypi.python.org/pypi/zope.app.testing"&gt;zope.app.testing&lt;/a&gt; is
beyond me. I fetch zope.app.testing, work around &lt;a href="https://bugs.edge.launchpad.net/ubuntu/+source/distribute/+bug/490731"&gt;a bug in
python-setuptools&lt;/a&gt;
to get it building, patch it and submit the patch to the zope list.  &lt;/p&gt;
&lt;p&gt;If I wanted to, I could make two new eggs now for the two patched
projects and then just land the branch. I don't think I want to, since
the patches are so small I'm confident I can get them landed and maybe
even persuade someone to do releases.  &lt;/p&gt;
&lt;p&gt;The fix to zope.app.testing lands without a hitch, and yet another kind
person from the Zope community does a release and even do what they can
to get the other patch landed.&lt;/p&gt;
&lt;div&gt;

However, it turns out that between zope.app.testing 3.7.3 and the new
3.7.5 that I need, zope.app.testing has started to depend on
[zope.component](http://pypi.python.org/pypi/zope.component) 3.8 or
better. zope.component has made some changes that break API
compatibility with a stack of other Zope bits, including
[zope.sendmail](http://pypi.python.org/pypi/zope.sendmail) and
[zope.app.component](http://pypi.python.org/pypi/zope.app.component).
zope.sendmail has been updated, but zope.app.component has not. I can't
find the code to patch it either.

&lt;/div&gt;

&lt;div&gt;

Luckily, Launchpad doesn't really use the broken bits of
zope.app.component, so it's easy enough to [work around the
problem](http://bazaar.launchpad.net/~jml/launchpad/new-zope-testing/revision/10456)
there, and bump zope.sendmail's version in our buildout configuration.

&lt;/div&gt;

&lt;div&gt;

Then the fix for zope.testing lands, and
[Sidnei](https://launchpad.net/~sidnei) is again kind enough to release.
I bump our versions.cfg, and land the branch.

&lt;/div&gt;

&lt;div&gt;

It is finished.

&lt;/div&gt;

&lt;div&gt;

Thoughts
--------

It should be obvious by now that I think the whole process has been
unreasonably complicated and taken far too long.  

Perhaps I chose a task that was fundamentally difficult. Perhaps it was
a one-off “perfect storm” of confounding factors. Perhaps there are
deep, serious problems in the way we do things. Perhaps I'm just not
very good.  

I certainly made some mistakes. For a start, I shouldn't have been so
afraid of breaking the edge rollout. We take measures like daily edge
rollouts precisely so that we can catch our mistakes, which should
embolden us to try things.  

I also should have done more testing between the time I asked for the
image updates and the time I landed the branch.  

&lt;/div&gt;

&lt;div&gt;

I kind of like the way that Zope has been split out into a million
little projects. I think it made it easier for me to come along with my
small, opportunistic patches, and made it easier for others to review
and land them. It also makes it easier for stupid backwards
compatibility mistakes (since you can't just grep a tree). I somehow
think that if [Twisted](http://twistedmatrix.com/) broke itself up,
they'd find a way to deal systemically with backwards compatibility
changes, if only by blocking them in review.

&lt;/div&gt;

&lt;div&gt;

Also, it would be pretty much impossible to use Zope at all without
[PyPI](http://pypi.python.org/).

&lt;/div&gt;

&lt;div&gt;

I would love to know what you all think of this, and whether you have
any thoughts on how we can make hacking on Launchpad easier.

&lt;/div&gt;</summary></entry><entry><title>Launchpad improving GNOME's Bugzilla</title><link href="http://code.mumak.net/2010/03/launchpad-improving-gnomes-bugzilla.html" rel="alternate"></link><updated>2010-03-31T12:54:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-31:2010/03/launchpad-improving-gnomes-bugzilla.html</id><summary type="html">&lt;p&gt;Just read a very cool article about &lt;a href="http://www.gnomejournal.org/article/96/canonical-upgrading-gnome-bugzilla-and-commercial-sponsorship"&gt;Canonical funding improvements to
GNOME
Bugzilla&lt;/a&gt;,
making it easier for Ubuntu and GNOME to share bugs.&lt;/p&gt;</summary></entry><entry><title>New sexy</title><link href="http://code.mumak.net/2010/03/new-sexy.html" rel="alternate"></link><updated>2010-03-22T18:14:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-22:2010/03/new-sexy.html</id><summary type="html">&lt;p&gt;My new shiny iMac 27" arrived today. It is very beautiful, although the
screen is dauntingly large. When the &lt;a href="http://kanexlive.com/products/item-id-3662.html"&gt;Kanex XD
thingies&lt;/a&gt; come out,
I'll be able to plug my XBox into it too.&lt;/p&gt;
&lt;div&gt;

It's the first time in a long time I've done a fresh install of a
non-Ubuntu computer though. Some things, however, remain the same.

&lt;/div&gt;

&lt;div&gt;

1.  Download decent browser (Firefox or Chrome)
2.  Download IRC client (for OS X, Colloquy)
3.  Generate SSH key
4.  Upload SSH key to server, register it on
    [Launchpad](https://launchpad.net/~jml)
5.  Change the default Terminal settings to light grey text on a
    translucent black background
6.  Get Emacs

&lt;div&gt;

Oh, and to forestall questions, I'm not going to dual boot right now but
I plan to eventually.

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Cowtasks</title><link href="http://code.mumak.net/2010/03/cowtasks.html" rel="alternate"></link><updated>2010-03-21T13:06:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-21:2010/03/cowtasks.html</id><summary type="html">&lt;p&gt;If you've got a Palm Pre and you want to be able to synchronize tasks
from the Pre to &lt;a href="http://rememberthemilk.com"&gt;Remember the Milk&lt;/a&gt;, then
please start hacking on &lt;a href="http://launchpad.net/cowtasks"&gt;CowTasks&lt;/a&gt;.&lt;/p&gt;
&lt;div&gt;

The original author has given up development, open sourced it and I've
put it on Launchpad. I don't have the time to maintain it either, but
I'd love it if someone did.

&lt;/div&gt;</summary></entry><entry><title>Visualizing yak-shaving</title><link href="http://code.mumak.net/2010/03/visualizing-yak-shaving.html" rel="alternate"></link><updated>2010-03-15T13:11:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-15:2010/03/visualizing-yak-shaving.html</id><summary type="html">&lt;p&gt;Over the weekend I read &lt;a href="http://carymillsap.blogspot.com/"&gt;Cary
Millsap&lt;/a&gt;'s excellent paper &lt;a href="http://method-r.com/downloads/doc_details/44-thinking-clearly-about-performance"&gt;&lt;em&gt;Thinking
Clearly About
Performance&lt;/em&gt;&lt;/a&gt;.
In it, he hijacks the &lt;a href="http://www.agilemodeling.com/artifacts/sequenceDiagram.htm"&gt;UML Sequence
Diagram&lt;/a&gt;
format by drawing the vertical axis to scale. The bigger the gap between
lines, the more time was taken performing that interaction. Suddenly,
the sequence diagram can give you a clear picture of where time is being
spent.&lt;/p&gt;
&lt;div&gt;

Wouldn't this be a useful diagram to draw instead of [value-stream
maps](http://en.wikipedia.org/wiki/Value_stream_mapping)? You would lose
the easy distinction between "value generating" and "waste" steps, but I
think you'd gain a deeper understanding of hand-offs and of system
complexity. Drawing it to scale would give a helpful picture of where
time is being spent, and where response time can be improved.

&lt;/div&gt;

&lt;div&gt;

More generally, Lean folk should probably read Millsap's paper and think
hard about what it means for software engineering process.

&lt;/div&gt;

&lt;div&gt;

Also, I reckon drawing up a quick sequence diagram would be a great way
of seeing how deep one is in
[yak-shaving](http://en.wiktionary.org/wiki/yak_shaving). Each time you
go one layer deeper, add a new column and draw a new arrow and make a
note of when &amp; why.

&lt;/div&gt;</summary></entry><entry><title>launchpadlib gotchas</title><link href="http://code.mumak.net/2010/03/launchpadlib-gotchas.html" rel="alternate"></link><updated>2010-03-12T14:43:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-12:2010/03/launchpadlib-gotchas.html</id><summary type="html">&lt;p&gt;I've shown you how to &lt;a href="http://code.mumak.net/2010/03/get-started-with-launchpadlib.html"&gt;get started with
launchpadlib&lt;/a&gt;
and have shown a &lt;a href="http://code.mumak.net/2010/03/launchpadlib-powerup.html"&gt;slightly more complex launchpadlib
script&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Before I cry “The power is yours!” and return to my home within the
earth, I'm going to warn you about the things that can trip you up when
using launchpadlib.  &lt;/p&gt;
&lt;h3&gt;Bugs&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://bugs.launchpad.net/launchpadlib/"&gt;launchpadlib&lt;/a&gt; has bugs. There
are also bugs in &lt;a href="https://bugs.launchpad.net/lazr.restful"&gt;lazr.restful&lt;/a&gt;
and &lt;a href="https://bugs.launchpad.net/lazr.restfulclient"&gt;lazr.restfulclient&lt;/a&gt;
– two libraries that are core to launchpadlib's behaviour.&lt;/p&gt;
&lt;div&gt;

Welcome to software engineering.  
### Documentation

It's [on the wiki](https://help.launchpad.net/API), and it's good, but
it could always be better. There's a page of [as well as
a](https://help.launchpad.net/API/Examples) [guide on
launchpadlib](https://help.launchpad.net/API/launchpadlib).  

The [reference documentation](https://launchpad.net/+apidoc/) isn't
written for Python programmers. It's written for REST programmers.
Actually, it's not written at all but rather auto-generated from our
source code. Sometimes this can be confusing, and I frequently find
myself consulting the [Launchpad source
code](http://bazaar.launchpad.net/~launchpad-pqm/launchpad/db-devel/files)
to get things done with the API.  
### Error messages

I'm told this has got better with recent releases, but often when you
get an error in launchpadlib, it looks like an HTTP error and you have
very little help on how to debug it. Unfortunately, I don't have an
example ready.  

If you come across an error like this, file a bug and head straight to
\#launchpad-dev on freenode to get help.  
### Potato programming

It's really easy to write code with launchpadlib that does this:
      for thing in bunch_of_things:    thing.do_something_on_launchpad()

Code like this is really slow. It will do one round-trip per “thing”,
which can be quite expensive. Twisted folks sometimes call this “[potato
programming](http://divmod.org/trac/wiki/PotatoProgramming)”.  
### Exposure

Not all of the code within Launchpad is exposed through the API. We have
to expose things manually and we haven't done it all yet. Sorry.  

If you come across something that you want, then please [file a
bug](https://bugs.launchpad.net/launchpad/+filebug) and tag it with
“api”.  

In general, exposing something of the API is really easy or almost
impossible. If the thing you want falls into the first category, you can
probably patch Launchpad yourself.  
### Testing

Testing launchpadlib apps is hard. You do not want your unit tests to
run against launchpad.net and running your own instance of Launchpad
simply to run unit tests is masochistically stupid.  

I think the situation here has improved recently too, but I haven't
heard much about it or explored it myself.  
### Conclusion

There you have it, all of the gotchas for writing code with
launchpadlib. As you can see, it's not really any worse than writing for
any Python library – I'm just being up-front with you because I like
you.  

If any of these gotchas no longer apply, please correct me and I will
shout your good news from the rooftops.  

Until then, happy hacking.  

&lt;/div&gt;</summary></entry><entry><title>Have you tried lptools?</title><link href="http://code.mumak.net/2010/03/have-you-tried-lptools.html" rel="alternate"></link><updated>2010-03-11T17:25:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-11:2010/03/have-you-tried-lptools.html</id><summary type="html">&lt;p&gt;Have you tried &lt;a href="https://edge.launchpad.net/lptools"&gt;lptools&lt;/a&gt;?  &lt;/p&gt;
&lt;p&gt;It's not at all officially associated with the Launchpad project, of
course, but it's got a few nice things that you might want to look at,
including:&lt;/p&gt;
&lt;div&gt;

-   a milestone manipulator
-   a code review notifier, and
-   a milestone to iCal exporter

One of these days, I'd like for there to be an official, awesome
Launchpad command-line client. As it is, I'm happy with the world of
people making extensions to meet their needs.  

For other extensions, check out the [lpx
project](https://launchpad.net/lpx) or our [list of
clients](http://help.launchpad.net/Clients).  

&lt;/div&gt;</summary></entry><entry><title>launchpadlib powerup</title><link href="http://code.mumak.net/2010/03/launchpadlib-powerup.html" rel="alternate"></link><updated>2010-03-10T18:59:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-10:2010/03/launchpadlib-powerup.html</id><summary type="html">&lt;p&gt;In my last post, I &lt;a href="http://code.mumak.net/2010/03/get-started-with-launchpadlib.html"&gt;introduced
launchpadlib&lt;/a&gt;
and demonstrated a very simple script that uses it. In this post, I'd
like to build on that a bit and show you how to do something actually
interesting.  &lt;/p&gt;
&lt;p&gt;In particular, I want to show you how to search for bugs, teach you a
bit about Launchpad's internal data model and help you help yourself
when it comes to figuring out Launchpad APIs.  &lt;/p&gt;
&lt;p&gt;The script at
&lt;a href="https://code.edge.launchpad.net/~jml/+junk/bugstats"&gt;lp:\~jml/+junk/bugstats&lt;/a&gt;
is designed to tell you how good you are at filing bugs. It uses a very
simple metric: out of the bugs that you've filed, how many actually have
been fixed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bugstats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt; &lt;span class="n"&gt;jmljml&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mf"&gt;22.22&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;successful&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bugstats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;jmljml&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mf"&gt;47.63&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;successful&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To do that, we need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get the "project" and person referred to on the command line&lt;/li&gt;
&lt;li&gt;search for all fixed bugs filed by that person&lt;/li&gt;
&lt;li&gt;search for all bugs in total by that same person&lt;/li&gt;
&lt;li&gt;count them both&lt;/li&gt;
&lt;li&gt;divide them&lt;/li&gt;
&lt;li&gt;print them!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I say "project", but I really should say "pillar", which is the
Launchpad technical term for a project (e.g. "bzr"), distribution (e.g.
"ubuntu") or project group (e.g. "gnome"). A pillar is anything in first
part of Launchpad URL that isn't a person.  &lt;/p&gt;
&lt;p&gt;We get the pillar and person like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pillar_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="n"&gt;reporter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;reporter_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty easy, huh? Now, how do we search for bug tasks?  &lt;/p&gt;
&lt;p&gt;The first port of call is to go to the &lt;a href="https://launchpad.net/+apidoc"&gt;Launchpad API
reference&lt;/a&gt; page. I'm going to look for
the string 'reporter', since that's the one thing I definitely know I
want to find.  &lt;/p&gt;
&lt;p&gt;Eventually, I found the &lt;code&gt;searchTasks&lt;/code&gt; method (named operation) that's on
pillars and takes a &lt;code&gt;bug_reporter&lt;/code&gt; parameter and a &lt;code&gt;status&lt;/code&gt; parameter.
It returns a collection of &lt;code&gt;bug_tasks&lt;/code&gt;, which are the objects that
represent the rows in the table you see at the top of a bug page.  &lt;/p&gt;
&lt;p&gt;I can find the bugtasks for the bugs I've reported that have been fixed
by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;fixed_bugtasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;      &lt;span class="n"&gt;bug_reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;Released&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It took me a while to figure out exactly how to spell "Fix Released". I
ended up using trial and error.  &lt;/p&gt;
&lt;p&gt;Similarly, I can all the bugtasks for bugs I've filed by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;total_bugtasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;searchTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;      &lt;span class="n"&gt;bug_reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;      &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;New&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Incomplete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Invalid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Won&amp;#39;t Fix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Confirmed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Triaged&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;In Progress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Fix Committed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;          &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Fix&lt;/span&gt; &lt;span class="n"&gt;Released&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I cheated a bit for that one and looked at the launchpad code to get a
list of all bug statusus. The default for &lt;code&gt;searchTasks&lt;/code&gt; is to only
return open bugs.  &lt;/p&gt;
&lt;p&gt;Once we've got the collections of bug tasks, we need to get their
counts. In an ideal world, it would be &lt;code&gt;len(total_bugtasks)&lt;/code&gt;, but sadly
&lt;a href="https://bugs.edge.launchpad.net/launchpadlib/+bug/274074"&gt;bug 274074&lt;/a&gt;
means that &lt;code&gt;len&lt;/code&gt; is really, really slow here.  &lt;/p&gt;
&lt;p&gt;Instead, I wrote this helper function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;XXX&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Workaround&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt; &lt;span class="mf"&gt;274074.&lt;/span&gt; &lt;span class="n"&gt;Thanks&lt;/span&gt; &lt;span class="n"&gt;wgrant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wadl_resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;representation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;total_size&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, I can calculate &amp;amp; print my success rate at filing bugs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="n"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixed_bugtasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_bugtasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s is %.2f%% successful on bugs in %s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;      &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next up on the API, I'll talk about some of the gotchas and what you can
do about them.&lt;/p&gt;</summary></entry><entry><title>Get started with launchpadlib</title><link href="http://code.mumak.net/2010/03/get-started-with-launchpadlib.html" rel="alternate"></link><updated>2010-03-10T10:43:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-10:2010/03/get-started-with-launchpadlib.html</id><summary type="html">&lt;p&gt;In my spare time, I sometimes talk to people about how they can get
started with launchpadlib hacking.  &lt;/p&gt;
&lt;p&gt;launchpadlib is the Python client-side library that talks to Launchpad's
own &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"&gt;REST&lt;/a&gt;
API. It turns out that customize scripted control of a
&lt;a href="https://launchpad.net/"&gt;bug-tracker-code-hosting-translation-distribution-building-cross-project-collaboration
thing&lt;/a&gt; is actually quite handy.  &lt;/p&gt;
&lt;p&gt;If you want to get started hacking with launchpadlib, and you have
Ubuntu, then install 'python-launchpadlib' now. I'm pretty sure you can
also get it from PyPI.  &lt;/p&gt;
&lt;p&gt;You can check that it works by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;launchpadlib&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;launchpadlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1.5.1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'll be assuming you're running 1.5.1 or later.  &lt;/p&gt;
&lt;p&gt;I've written a very simple launchpadlib application that you can get
with 'bzr branch lp:\~jml/+junk/bugstats'. Each revision shows a
meaningful launchpadlib script. You can get at the old revisions with
'bzr revert -r1' or 'bzr revert -r2' or '-r3'.  &lt;/p&gt;
&lt;p&gt;Here's what the simplest launchpadlib script that I could think of looks
like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;osimport&lt;/span&gt; &lt;span class="n"&gt;sysfrom&lt;/span&gt; &lt;span class="n"&gt;launchpadlib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launchpad&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STAGING_SERVICE_ROOTAPP_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;CACHE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;launchpadlib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;SERVICE_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STAGING_SERVICE_ROOTlaunchpad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SERVICE_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CACHE_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Adapted from r2 of the above branch).  &lt;/p&gt;
&lt;p&gt;A few points.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use &lt;code&gt;STAGING_SERVICE_ROOT&lt;/code&gt;, which means that we're pointing&lt;br /&gt;
   at &lt;a href="https://staging.launchpad.net/"&gt;Launchpad's staging service&lt;/a&gt;,&lt;br /&gt;
   just in case we screw up any data.&lt;/li&gt;
&lt;li&gt;We give the application a name, when you run the application,
    launchpadlib&lt;br /&gt;
   opens up a browser window letting &lt;em&gt;you&lt;/em&gt; decide how far the
    application&lt;br /&gt;
   can act on &lt;em&gt;your&lt;/em&gt; behalf.&lt;/li&gt;
&lt;li&gt;We provide a cache directory. Credentials, among other things, get
    stored&lt;br /&gt;
   here.  &lt;/li&gt;
&lt;li&gt;We then login and get an object that represents a Launchpad instance&lt;/li&gt;
&lt;li&gt;Once we've got it, we look at the collection of bugs, get Bug #1
    and then&lt;br /&gt;
   print the title&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Very simple. To learn how to write this application, I looked at the
main &lt;a href="https://help.launchpad.net/API"&gt;Launchpad API help&lt;/a&gt; page, the&lt;br /&gt;
&lt;a href="https://help.launchpad.net/API/Examples"&gt;examples&lt;/a&gt; page and the
&lt;a href="https://staging.launchpad.net/+apidoc"&gt;reference documentation&lt;/a&gt;. You'll
notice that I had to translate the reference documentation from
REST-speak into Python-speak.  &lt;/p&gt;
&lt;p&gt;Already you have enough to go exploring with the Launchpad API and think
of cool things to do. A bunch of people are already doing &lt;a href="https://help.launchpad.net/Clients"&gt;cool
stuff&lt;/a&gt; and there are many &lt;a href="https://help.launchpad.net/API/Uses"&gt;projects
that use launchpadlib&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Next up, I hope to show you some more complex things you can do with the
API.&lt;/p&gt;</summary></entry><entry><title>Monitor &amp; keyboard</title><link href="http://code.mumak.net/2010/03/monitor-keyboard.html" rel="alternate"></link><updated>2010-03-08T12:27:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-08:2010/03/monitor-keyboard.html</id><summary type="html">&lt;p&gt;I want to get a shiny new monitor and keyboard. The monitor is for
coding, writing docs, answering emails and watching films. The keyboard
is for same. They'll both plug into my Thinkpad X200 for now.&lt;/p&gt;
&lt;div&gt;

I'm tempted to get an Apple Cinema Display (but at such cost!). I don't
know what keyboard I want. I think that the DAS keyboard I have isn't
it.

&lt;/div&gt;

&lt;div&gt;

Thoughts?

&lt;/div&gt;</summary></entry><entry><title>Back from PyCon</title><link href="http://code.mumak.net/2010/03/back-from-pycon.html" rel="alternate"></link><updated>2010-03-03T09:59:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-03-03:2010/03/back-from-pycon.html</id><summary type="html">&lt;p&gt;I had a great time at PyCon 2010. The best part was definitely the
&lt;a href="http://labs.twistedmatrix.com/2010/03/pycon-2010-sprint-report.html"&gt;Twisted
sprint&lt;/a&gt;,
which gave me a long overdue opportunity to do some actual coding.  &lt;/p&gt;
&lt;p&gt;Well, actually, I ended up spending a lot of the time organizing a
release and writing &lt;a href="http://twistedmatrix.com/trac/wiki/ReleaseProcess"&gt;process
documents&lt;/a&gt;, so I
didn't escape management as much as I would have liked.  &lt;/p&gt;
&lt;p&gt;Now I'm back, planning on doing the &lt;a href="http://twistedmatrix.com/trac/ticket/4290"&gt;Twisted 10.0
release&lt;/a&gt; and working with
&lt;a href="http://launchpad.net/~didrocks"&gt;didrocks&lt;/a&gt; to get better &lt;a href="http://help.launchpad.net/API"&gt;Launchpad
integration&lt;/a&gt; with
&lt;a href="http://launchpad.net/quickly"&gt;Quickly&lt;/a&gt;, as my contribution to &lt;a href="http://www.jonobacon.org/2010/02/04/project-awesome-opportunity/"&gt;Project
Awesome
Opportunity&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Twisted 10.0.0pre1 released</title><link href="http://code.mumak.net/2010/02/twisted-1000pre1-released.html" rel="alternate"></link><updated>2010-02-22T02:59:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-02-22:2010/02/twisted-1000pre1-released.html</id><summary type="html">&lt;p&gt;It's not going to work, it's not the final release, but I'm very pleased
to announce that &lt;a href="http://people.canonical.com/~jml/Twisted"&gt;Twisted
10.0.0pre1&lt;/a&gt; is available for
testing.&lt;/p&gt;
&lt;div&gt;

Download it, test it, play with it and help us make 10.0 the best
release ever!

&lt;/div&gt;

&lt;div&gt;

On a side note, this is hopefully the start of a much simpler, more
automated [release
process](http://twistedmatrix.com/trac/wiki/ReleaseProcess) and maybe
even time-based releases.

&lt;/div&gt;</summary></entry><entry><title>From the Strategist</title><link href="http://code.mumak.net/2010/02/from-strategist.html" rel="alternate"></link><updated>2010-02-10T14:13:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-02-10:2010/02/from-strategist.html</id><summary type="html">&lt;div&gt;

If I don't dump a bunch of stuff that's on my mind, I'll never blog
again. Here goes:

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Launchpad users within Canonical seem to appreciate the
    &lt;a href="https://dev.launchpad.net/RoadMap"&gt;Roadmap&lt;/a&gt;. Still receive some
    complaints about not communicating our plans enough, but not sure
    what to do.&lt;/li&gt;
&lt;li&gt;Team lead meeting in London went well. Good to see the gang again.&lt;/li&gt;
&lt;li&gt;The Wellington sprint was amazing. Rarely seen a sprint that's more
    productive.&lt;/li&gt;
&lt;li&gt;My favourite result: a fixed, pre-planned annual schedule of
    sprints, including &lt;em&gt;two&lt;/em&gt; annual whole-team sprints. I get to meet
    with my colleagues &lt;em&gt;and&lt;/em&gt; have a life and Canonical saves money all
    at once.&lt;/li&gt;
&lt;li&gt;The team leads like the
    &lt;a href="https://dev.launchpad.net/ReadyToCode"&gt;Ready-to-Code&lt;/a&gt; and
    &lt;a href="https://dev.launchpad.net/LaunchpadEnhancementProposalProcess"&gt;Launchpad Enhancement
    Proposal&lt;/a&gt;
    process things.&lt;/li&gt;
&lt;li&gt;Daily builds work is going well. There's a lot of UI bits to
    consider, and we're trying to get the UI correct before building it.
    Grates my JFDI nerves, but maybe it's the right approach.&lt;/li&gt;
&lt;li&gt;Challenged the Launchpad team leads to blog once every two weeks
    about anything, as long as it's vaguely related to Launchpad. The
    name of the challenge? Blog like it's 2006.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.launchpad.net/HelpRotation"&gt;Community Help Rotation&lt;/a&gt;
    sucks and basically no-one really knows what to do about it.&lt;/li&gt;
&lt;li&gt;I'm cautiously excited about using kanban to track our
    work-in-progress.&lt;/li&gt;
&lt;li&gt;Launchpad needs graphs in the Launchpad application. I think all we
    need is someone to just add one. I don't have the time to do it as
    part of my day job, and I've got a backlog of other hacking tasks.
    Could I help you do it instead?&lt;/li&gt;
&lt;li&gt;I'm going to PyCon.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Black out</title><link href="http://code.mumak.net/2010/01/black-out.html" rel="alternate"></link><updated>2010-01-26T11:17:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-01-26:2010/01/black-out.html</id><summary type="html">&lt;p&gt;I've been a bit slack and have yet to black out my website or avatar to
protest the Australian government's mandatory Internet censorship
policy.&lt;/p&gt;
&lt;div&gt;

In case circumstances prevent me from doing so, please read the
[Internet Blackout Australia](http://www.internetblackout.com.au/)
website to see why it's so important. You might also want to read [Hugh
Blemings' well-written
thoughts](http://blemings.org/hugh/blog/blosxom.cgi/2010/01/25#20100125a)
on the matter.

&lt;/div&gt;

&lt;div&gt;



&lt;/div&gt;</summary></entry><entry><title>Electronic book reader?</title><link href="http://code.mumak.net/2010/01/electronic-book-reader.html" rel="alternate"></link><updated>2010-01-25T07:17:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-01-25:2010/01/electronic-book-reader.html</id><summary type="html">&lt;p&gt;On &lt;a href="http://life.mumak.net"&gt;my other blog&lt;/a&gt;, I ask about &lt;a href="http://life.mumak.net/2010/01/electronic-book-reader.html"&gt;electronic book
readers&lt;/a&gt;.
Recommendations greatly desired.&lt;/p&gt;</summary></entry><entry><title>Python testing goodies</title><link href="http://code.mumak.net/2010/01/python-testing-goodies.html" rel="alternate"></link><updated>2010-01-05T00:21:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2010-01-05:2010/01/python-testing-goodies.html</id><summary type="html">&lt;p&gt;Just found out that there's &lt;a href="https://edge.launchpad.net/~subunit/+archive/ppa"&gt;a PPA with the latest releases of a whole
bunch of Python testing
goodies&lt;/a&gt;, including:&lt;/p&gt;
&lt;div&gt;

-   [testtools](https://launchpad.net/testtools) - Extensions to
    unittest that make real extensions possible
-   [testresources](https://launchpad.net/testresources) - Safely re-use
    expensive resources in tests without paying massive set-up costs
-   [subunit](https://launchpad.net/subunit) - Manipulate, exchange and
    analyze test results without writing code
-   [testscenarios](https://launchpad.net/testscenarios) - Run the same
    tests against many different implementations

&lt;div&gt;

If you are running Ubuntu 9.10 or later, then
`sudo add-apt-repository ppa:subunit` will add it to your apt sources.

&lt;/div&gt;

&lt;div&gt;

We're starting to grow a lot of useful, small testing tools that become
even more useful when combined. I really like the "small pieces, loosely
joined" approach, but sometimes that can make deployment &amp; dependency
management a colossal pain. Happily, Ubuntu,
[Rob](http://rbtcollins.wordpress.com/) and [Launchpad
PPAs](https://edge.launchpad.net/ubuntu/+ppas) to the rescue.

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>testtools 0.9.2 released</title><link href="http://code.mumak.net/2009/12/testtools-092-released.html" rel="alternate"></link><updated>2009-12-15T23:19:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-12-15:2009/12/testtools-092-released.html</id><summary type="html">&lt;p&gt;I've just released &lt;a href="http://pypi.python.org/pypi/testtools/0.9.2"&gt;testtools
0.9.2&lt;/a&gt;, which I firmly
believe is the best &lt;a href="https://launchpad.net/testtools"&gt;testtools&lt;/a&gt; release
ever. Thanks very much to &lt;a href="http://rbtcollins.wordpress.com/"&gt;Robert
Collins&lt;/a&gt; and &lt;a href="http://pybites.blogspot.com/"&gt;Benjamin
Peterson&lt;/a&gt; for making it so.&lt;/p&gt;
&lt;div&gt;

For the last few releases, we've been working on being more than just a
simple aggregation of existing unit testing best practices and tried to
do our own experimental extensions.

&lt;/div&gt;

&lt;div&gt;

These extensions aren't actually all that exciting by themselves. We
haven't added better logging support or new types of outcomes or test
replay or smart rendering of error results or anything like that. I'm
pretty sure testtools will never do those sorts of things.

&lt;/div&gt;

&lt;div&gt;

Rather, the extensions we've added are designed to let *you* do that,
and then share *your* extensions with other people without getting them
into the standard library's base `unittest` classes.

&lt;/div&gt;

&lt;div&gt;

If you are using testtools, you can change the way `TestCase.run()`
works without overriding run and without figuring out how to safely call
user code. You can handle exceptions raised from tests however you'd
like — again not needing to change `TestCase.run()`. You can add new,
rich types of assertions without having to modify some base class
somewhere. You can store information on a test object that can be used
by a sufficiently smart `TestResult`, which can be handy if you want to
see, say, access logs for all failed tests.

&lt;/div&gt;

&lt;div&gt;

Of course, all this starts to get really powerful when testtools is in
the standard library, and all of the other major Python test frameworks
inherit from it: nose, py.test, zope.testing and Twisted Trial.

&lt;/div&gt;

&lt;div&gt;

Even so, it's worth switching to testtools today, just for the assertion
logic alone. All it takes is changing the base class of your test cases
to `testtools.TestCase`. If your test framework supports running
standard Python unit tests, it'll support testtools.

&lt;/div&gt;</summary></entry><entry><title>Lean Lean</title><link href="http://code.mumak.net/2009/11/lean-lean.html" rel="alternate"></link><updated>2009-11-27T17:07:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-27:2009/11/lean-lean.html</id><summary type="html">&lt;p&gt;Ever been confused by people saying "this is Lean" or "that is Lean" or
"we should actually be using a cyclometric value-stream set-based
burndown kanban for this"? I have, so I thought I'd write a quick
pared-down cheat sheet to explain exactly what Lean is. A lean version
of Lean, if you will.&lt;/p&gt;
&lt;div&gt;

At the very least, Lean is seven principles which, we're told, we should
apply to making software.

&lt;/div&gt;

&lt;div&gt;

1.  Eliminate waste
2.  Amplify learning
3.  Decide as late as possible
4.  Deliver as fast as possible
5.  Empower the team
6.  Build integrity in
7.  See the whole

&lt;div&gt;

The first principle is fundamental.

&lt;/div&gt;

&lt;div&gt;

List taken from [Lean Software
Development](http://www.poppendieck.com/).

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>How to ask an open source project to do something</title><link href="http://code.mumak.net/2009/11/how-to-ask-open-source-project-to.html" rel="alternate"></link><updated>2009-11-27T11:50:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-27:2009/11/how-to-ask-open-source-project-to.html</id><summary type="html">&lt;p&gt;This isn't exhaustive, but I think there are two ways to ask an open
source project to do something:&lt;/p&gt;
&lt;div&gt;

1.  I want X. You should do X.
2.  I want X. How can I help do X?

&lt;/div&gt;

&lt;div&gt;

I have no data, but I think that asking the second way is what makes
open source actually work.

&lt;/div&gt;</summary></entry><entry><title>To do: To dos (Palm Prē)</title><link href="http://code.mumak.net/2009/11/to-do-to-dos-palm-pre.html" rel="alternate"></link><updated>2009-11-26T11:16:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-26:2009/11/to-do-to-dos-palm-pre.html</id><summary type="html">&lt;p&gt;You might already know that I have a lot of &lt;span&gt;lists&lt;/span&gt; on my
computer. I may have mentioned once or twice that I have such lists.
These lists are connected to a certain popular productivity system which
isn't really about productivity and is a little bit like a cult.  &lt;/p&gt;
&lt;p&gt;I might have also mentioned that I've been longing for a "smart" phone,
partly so I can have these lists with me at all times, to clutch at
reflexively like some Popish talisman.  &lt;/p&gt;
&lt;p&gt;Now that I have a Palm Prē I have lists and a smart phone, and yet one
does not know the other. I am at a loss as to how to get my lists —
line-separated text files on my laptop — onto the Tasks application on
the Palm. Even then, once they are on the Palm, I have no idea as to how
to get them synchronized with something I can edit from my laptop.  &lt;/p&gt;
&lt;p&gt;Any ideas?&lt;/p&gt;</summary></entry><entry><title>Palm Prē reflections</title><link href="http://code.mumak.net/2009/11/palm-pre-reflections.html" rel="alternate"></link><updated>2009-11-24T12:36:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-24:2009/11/palm-pre-reflections.html</id><summary type="html">&lt;p&gt;I got a Palm Prē yesterday. Here are some initial thoughts.&lt;/p&gt;
&lt;div&gt;

-   I like the feel of the physical device
-   The keyboard is small
-   Camera is useless for taking photos of receipts
-   The gesture UI is great
-   The Mail application shows individual emails, rather than
    GMail-style conversations. Lame.
-   I don't know how to get my lists out of text files on my computer
    and onto the Palm
-   I don't know actually know anything about syncing from the Palm
-   I still don't regret not getting an iPhone

&lt;/div&gt;</summary></entry><entry><title>UDS</title><link href="http://code.mumak.net/2009/11/uds.html" rel="alternate"></link><updated>2009-11-23T12:00:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-23:2009/11/uds.html</id><summary type="html">&lt;div&gt;

I'm back in London after a mammoth two weeks travelling the globe
bringing [Launchpad](https://launchpad.net) joy to its four corners.

&lt;/div&gt;

&lt;div&gt;

First up I went to Mooloolaba, Australia. If you're Australian, you
probably know how to pronounce it. If you aren't, you'll probably never
get it. Sorry.

&lt;/div&gt;

&lt;div&gt;

I was there with the Canonical Bazaar team and some other Launchpadders,
talking about their next few months of development. They are going to be
focusing on helping Launchpad and the Ubuntu platform team work on our
daily build initiative. Hmm. I really need a place to link to for that
last one, don't I?

&lt;/div&gt;

&lt;div&gt;

Mooloolaba is a beautiful place to be in November. If you are thinking
of giving me something for Christmas, consider a holiday apartment
there.

&lt;/div&gt;

&lt;div&gt;

After Mooloolaba, I crossed the Pacific to reach Dallas, home of the
twenty-eight lane highway. I didn't really get into the city that much,
but man, [UDS](https://wiki.ubuntu.com/UDS-L?action=show&amp;redirect=UDS)
was great.

&lt;/div&gt;

&lt;div&gt;

Most of the people there are directly involved in Ubuntu development.
It's such a joy to see so many people from all over the world come
together to work on Ubuntu, and an honour to think that I have a place
in that work.

&lt;/div&gt;

&lt;div&gt;

I spent most of the conference flitting from room to room, going to
sessions about the Ubuntu development process, [daily
builds](https://wiki.ubuntu.com/DailyBuilds) and the [Software
Centre](https://wiki.ubuntu.com/SoftwareCenter). Occasionally, I cheated
a bit and went to a random session that interested me. Mostly it was
about [Quickly](https://launchpad.net/quickly).

&lt;/div&gt;

&lt;div&gt;

As a Launchpad developer, one of the most exciting things about this UDS
was seeing that Ubuntu developers have started building [their own tools
around Launchpad using our API](https://help.launchpad.net/API/Uses).
Many of these tools are things we'd love to integrate with the main web
app, but many are things that are *so* Ubuntu policy specific that we're
happy to leave them outside. After all, this is exactly

&lt;/div&gt;

&lt;div&gt;

what the API is about.

&lt;/div&gt;

&lt;div&gt;

I did a short plenary session where I hacked up [an API
script](https://code.edge.launchpad.net/~jml/+junk/bugstats) using
[launchpadlib](https://help.launchpad.net/API/launchpadlib) and
demonstrated it live. After the presentation, many people came up to me
and started talking about their API-using programs and their experience
making them. The amount of interest really surprised me.

&lt;/div&gt;

&lt;div&gt;

I also ran a couple of workshop / discussions. The first was on
improving Launchpad for API use, which was a bit disorganized, since I
didn't realize I was supposed to be running it. The second was on
getting started with Launchpad hacking.

&lt;/div&gt;

&lt;div&gt;

For the "Getting started with Launchpad hacking" session, I passed
around a USB stick, and asked the audience for an API within Launchpad
to expose. [mdz](http://mdzlog.alcor.net/) suggested "blueprints", so I
went to expose the 'drafter' element of a specification. In front of a
room full of people. Sheesh.

&lt;/div&gt;

&lt;div&gt;

If you think pair programming is hard (it is, and if you think it isn't
you are either doing it wrong or you have extremely helpful colleagues),
programming in front of a room full of people is harder.

&lt;/div&gt;

&lt;div&gt;

Still, we managed to actually expose the API and [propose the branch for
merging](https://code.edge.launchpad.net/~jml/launchpad/expose-blueprints/+merge/15060)
with only a little bit of evil.

&lt;/div&gt;

&lt;div&gt;

The point of the session was to get people set up with Launchpad
development environments, to show them how to even begin to expose a
method over the API but even more than that, to give people a little
push into just giving Launchpad development a try. By blundering my way
into a valid patch, I think maybe we succeeded.

&lt;/div&gt;

&lt;div&gt;

Now UDS is over and I'm back in London, jetlagged and exhausted to be
sure, but genuinely happy about the plans we have for Launchpad
development, and eager to begin to make them happen.

&lt;/div&gt;</summary></entry><entry><title>Evil Overlord talks</title><link href="http://code.mumak.net/2009/11/evil-overlord-talks.html" rel="alternate"></link><updated>2009-11-13T13:26:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-13:2009/11/evil-overlord-talks.html</id><summary type="html">&lt;p&gt;My "Hack Like an Evil Overlord" talks are now linked from my
&lt;a href="http://mumak.net/stuff"&gt;stuff&lt;/a&gt; page.&lt;/p&gt;</summary></entry><entry><title>Tests: Costs and Benefits</title><link href="http://code.mumak.net/2009/11/tests-costs-and-benefits.html" rel="alternate"></link><updated>2009-11-11T08:16:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-11-11:2009/11/tests-costs-and-benefits.html</id><summary type="html">&lt;p&gt;I like unit testing a lot. I've recently been thinking about whether it
really is everything that advocates like myself make it out to be. I'm
still thinking, but I reckon that language has something to do with it,
and that I wouldn't like TDD so much if I were writing in Haskell.
Maybe.&lt;/p&gt;
&lt;div&gt;

Anyway, here are the benefits of unit testing, without justification or
explanation:

&lt;/div&gt;

&lt;div&gt;

-   Easier to maintain code
-   Avoiding regressions
-   Make API clearer, both by describing it and by encouraging
    contracts.
-   Confidence in changes to code

&lt;div&gt;

For new contributors, there are other benefits:

&lt;/div&gt;

&lt;div&gt;

-   Confidence in changes to code
-   Confidence in the validity of your own patch
-   Mechanism for exploring internal system behaviour

&lt;/div&gt;

&lt;div&gt;

Some of the costs are:

&lt;/div&gt;

&lt;div&gt;

-   Maintaining tests
-   Caring about the performance of tests
-   Running the tests
-   Debugging tests

&lt;div&gt;

For new contributors, there are other costs:

&lt;/div&gt;

&lt;div&gt;

-   Finding tests
-   Figuring out how to run tests
-   Figuring out how to write tests
-   Learn unit testing

&lt;/div&gt;

&lt;div&gt;

Is this fair? Is this clear? And exactly where was that post by that guy
about unit testing being overrated?

&lt;/div&gt;

&lt;div&gt;

On a half-related and slightly exasperated note, many of the
conversations I've been having recently have been about costs and
benefits. What happened to doing something because it was the right
thing?

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Raise your standards</title><link href="http://code.mumak.net/2009/10/raise-your-standards.html" rel="alternate"></link><updated>2009-10-27T17:04:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-27:2009/10/raise-your-standards.html</id><summary type="html">&lt;p&gt;I gatecrashed LugRadio Live last Saturday and went to an excellent talk
by Matthew Paul Thomas about reporting usability problems. Matthew has
reported &lt;a href="https://bugs.edge.launchpad.net/launchpad-project/+bugs?field.searchtext=&amp;amp;orderby=-importance&amp;amp;search=Search&amp;amp;field.status:list=NEW&amp;amp;field.status:list=INCOMPLETE_WITH_RESPONSE&amp;amp;field.status:list=INCOMPLETE_WITHOUT_RESPONSE&amp;amp;field.status:list=INVALID&amp;amp;field.status:list=WONTFIX&amp;amp;field.status:list=CONFIRMED&amp;amp;field.status:list=TRIAGED&amp;amp;field.status:list=INPROGRESS&amp;amp;field.status:list=FIXCOMMITTED&amp;amp;field.status:list=FIXRELEASED&amp;amp;assignee_option=any&amp;amp;field.assignee=&amp;amp;field.bug_reporter=mpt&amp;amp;field.bug_supervisor=&amp;amp;field.bug_commenter=&amp;amp;field.subscriber=&amp;amp;field.omit_dupes.used=&amp;amp;field.omit_dupes=on&amp;amp;field.has_patch.used=&amp;amp;field.has_cve.used=&amp;amp;field.tag=&amp;amp;field.tags_combinator=ANY"&gt;well over a thousand bugs against Launchpad
itself&lt;/a&gt;
(many of which &lt;a href="https://bugs.edge.launchpad.net/launchpad-project/+bugs?field.searchtext=&amp;amp;orderby=-importance&amp;amp;search=Search&amp;amp;field.status:list=FIXCOMMITTED&amp;amp;field.status:list=FIXRELEASED&amp;amp;assignee_option=any&amp;amp;field.assignee=&amp;amp;field.bug_reporter=mpt&amp;amp;field.bug_supervisor=&amp;amp;field.bug_commenter=&amp;amp;field.subscriber=&amp;amp;field.omit_dupes.used=&amp;amp;field.omit_dupes=on&amp;amp;field.has_patch.used=&amp;amp;field.has_cve.used=&amp;amp;field.tag=&amp;amp;field.tags_combinator=ANY"&gt;have been
fixed&lt;/a&gt;)
so he knows something about the subject.&lt;/p&gt;
&lt;div&gt;

Matthew gave six pointers on how to report usability problems, but for
me the single most striking one was this:

&lt;/div&gt;

&lt;div style="text-align: center;"&gt;

**Raise your standards**

&lt;/div&gt;

&lt;p&gt;When you are using an application with the aim of improving its
usability, you need to shed all of your tolerance and forget those many
workarounds you've learned. Drum your fingers impatiently while you wait
for something to load. Think of how this would look if you were showing
it to a sceptical friend.&lt;/p&gt;
&lt;div&gt;

The point struck me because so many times as an application *developer*
I've thought to myself "it's good enough" or "it will work for now".
Really though, that's not good enough. I should work until the thing
I've added is invisible, or at least fun to use. I need to raise my
standards.

&lt;/div&gt;

&lt;div&gt;

Having raised one's standards, the trick is then to avoid the traps of
perfectionism. Do you have any thoughts on how to walk the road,
avoiding the pitfalls, standards held high?

&lt;/div&gt;</summary></entry><entry><title>Bug squashing sprints</title><link href="http://code.mumak.net/2009/10/bug-squashing-sprints.html" rel="alternate"></link><updated>2009-10-20T12:02:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-20:2009/10/bug-squashing-sprints.html</id><summary type="html">&lt;p&gt;Every time somebody asks me what I think we should do for a sprint, I
try to suggest "fix as many bugs as possible".&lt;/p&gt;
&lt;div&gt;

Each of the Launchpad teams gets together in a single location for a
week long "sprint" fairly regularly. Maybe each team has two sprints a
year.

&lt;/div&gt;

&lt;div&gt;

Often these sprints end up being long talking sessions where designs for
features are thrashed out. That's great and all, and sprints are a rare
opportunity to do that, but often the design work goes unused for months
while the team deals with the work already on its collective plate.

&lt;/div&gt;

&lt;div&gt;

Sometimes these sprints have the whole team working (i.e. coding) toward
a single milestone, be it a release or a major feature. These sprints
are fun, but they've been quite rare for Launchpad. (Bazaar had a great
one in Brisbane earlier this year).

&lt;/div&gt;

&lt;div&gt;

What I'd love to see is a sprint where people fixed as many bugs as
possible. Perhaps as a product strategist, I ought to be advocating
higher-level visions and responding to the market and so forth, rather
than saying "fix lots of bugs". But I don't think so, at least, not yet.

&lt;/div&gt;

&lt;div&gt;

Fixing as many bugs as we can in a fixed time frame will make many users
happy, since behind each bug is a user in pain. It will make us happy as
a team, since a vastly dropped bug count will make us feel less
overwhelmed and will feel like a concrete achievement. It's an easy
sprint to measure the success of, and my hunch is that it would be a fun
sprint too. It's also substantially different to what we normally do,
which adds to the fun.

&lt;/div&gt;

&lt;div&gt;

What do you think? I'd love to hear from people in community-driven open
source projects, as well as people within Canonical who aren't in
Launchpad. Maybe we're missing something that others know about.

&lt;/div&gt;</summary></entry><entry><title>Launchpad extensions</title><link href="http://code.mumak.net/2009/10/launchpad-extensions.html" rel="alternate"></link><updated>2009-10-15T09:26:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-15:2009/10/launchpad-extensions.html</id><summary type="html">&lt;p&gt;Launchpad has a pretty awesome &lt;a href="http://edge.launchpad.net/+apidoc"&gt;public
API&lt;/a&gt;, implemented using
&lt;a href="https://launchpad.net/lazr.restful"&gt;lazr.restful&lt;/a&gt;. I've written a few
small scripts for it, and the Launchpad team has a few scripts that they
use internally for doing admin tasks.&lt;/p&gt;
&lt;div&gt;

The Ubuntu Platform team does a heap of stuff with the Launchpad API.
[James Westby](http://jameswestby.net/weblog) has been using it to make
sure that there's a branch on Launchpad for every single package in
Ubuntu.

&lt;/div&gt;

&lt;div&gt;

There's all this great work, but there's been nothing to tie the room
together. I've seen hardly any discussion about how to write Launchpad
API applications, or how to test them, or how to get
[launchpadlib](https://launchpad.net/launchpadlib) working in GTK+. I
haven't even seen much code sharing.

&lt;/div&gt;

&lt;div&gt;

So, borrowing a trick from Twisted's [tx](https://launchpad.net/tx)
super-project, I've created an '[lpx](https://launchpad.net/lpx)'
project group on Launchpad. Bring it your scripts, your applications,
your huddled masses. If you want to know more about the API, look at the
[API help page](http://help.launchpad.net/API).

&lt;/div&gt;

&lt;div&gt;

Thanks to [Mark](http://markshuttleworth.com) for reminding me that this
is important.

&lt;/div&gt;</summary></entry><entry><title>Launchpad status now on identi.ca</title><link href="http://code.mumak.net/2009/10/launchpad-status-now-on-identica.html" rel="alternate"></link><updated>2009-10-09T09:31:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-09:2009/10/launchpad-status-now-on-identica.html</id><summary type="html">&lt;p&gt;Sometimes, sadly, Launchpad doesn't behave as well as we'd like.&lt;/p&gt;
&lt;div&gt;

Although we try extremely hard to always be available, and take each
instance of downtime (planned or unplanned) as a personal insult,
sometimes we're forced to disappoint both our users and ourselves. It's
no excuse, of course, but at least we're in
[good](http://www.worldofwarcraft.com/)
[company](https://mail.google.com/).

&lt;/div&gt;

&lt;div&gt;

To make these inevitable interruptions easier to swallow, we've set up
[identi.ca](http://identi.ca/launchpadstatus) and
[Twitter](http://twitter.com/launchpadstatus) accounts that report the
Launchpad server statuses, and only the server statuses. We've got
people all around the world who are able to update it when things go
bump in the night. There's also a link to the identi.ca page in our
footer, so you don't have to keep consulting a blog.

&lt;/div&gt;

&lt;div&gt;

Thanks very much to [Matt Revell](http://www.understated.co.uk/) for
getting this done.

&lt;/div&gt;</summary></entry><entry><title>Meta-meeting stuff</title><link href="http://code.mumak.net/2009/10/meta-meeting-stuff.html" rel="alternate"></link><updated>2009-10-08T18:29:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-08:2009/10/meta-meeting-stuff.html</id><summary type="html">&lt;p&gt;Last week the Launchpad team leads gathered in London and had an
absolutely huge meeting. Fifteen or sixteen smart, opinionated &amp;amp;
passionate people in a room talking about the next six months of
Launchpad development. It was a lot of fun.  &lt;/p&gt;
&lt;p&gt;When planning the agenda, Martin Albisetti and I were a little worried
about things wandering off track, so we thrashed out a lists of dos &amp;amp;
don'ts. I'll blurt them out here, with the really terrible ideas
filtered out so I look more clever, and then offer some thoughts on how
they worked.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Do&lt;/span&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be happy with the results of this meeting.&lt;/li&gt;
&lt;li&gt;ask questions, especially "why"&lt;/li&gt;
&lt;li&gt;be punctual&lt;/li&gt;
&lt;li&gt;stay on point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Don't&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;design features&lt;/li&gt;
&lt;li&gt;check your email, i.e. laptops closed  &lt;/li&gt;
&lt;li&gt;leave the meeting without being clear&lt;/li&gt;
&lt;li&gt;leave the meeting without being happy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The "laptops closed" one didn't work so well. It was great for the first
couple of days, but by Thursday afternoon there were always people in a
corner with those open LCD screens sucking chi out of the room like
little dragons of despair.  &lt;/p&gt;
&lt;p&gt;The "Don't design features" rule was awesome. The rationale is that
feature design leads to long discussions, and that it does a disservice
to the many excellent engineers we have who aren't at the meeting and
will be actually implementing a feature. At best, it's waste and at
worst it's us telling people how to do something that they know how to
do better. The clearest sign that it was a good idea came when other
people started using it to shut me up.&lt;/p&gt;</summary></entry><entry><title>Talking Time</title><link href="http://code.mumak.net/2009/10/talking-time.html" rel="alternate"></link><updated>2009-10-07T16:01:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-10-07:2009/10/talking-time.html</id><summary type="html">&lt;p&gt;I've been working on the Launchpad team for a while, with most of that
time being in Australia. Others in the team are in the US (red states &amp;amp;
blue states), the UK, Germany, Brazil, Canada, New Zealand, Serbia,
Lithuania and Thailand.&lt;/p&gt;
&lt;div&gt;

Here are some tips I've picked up for smoother online conversations,
particularly around scheduling.

&lt;/div&gt;

&lt;div&gt;

-   Don't say "summer" or "fall". Say the month, or the range of months.
-   Say "my morning" rather than "the morning".
-   Use 24-hour time.
-   In real-time conversations, say "in 2 hours time" rather than "at
    10".
-   Always include the timezone. Avoid using local abbreviations (e.g.
    PST), instead use offset from UTC.
-   Better still, just give the time in UTC.
-   Know your UTC offset.
-   Use a timezone-aware [meeting
    planner](http://timeanddate.com/worldclock/meeting.html). You'll get
    the arithmetic wrong otherwise.
-   Say "Oct 7" rather than 10/7 or 7/10. Everyone speaks English, but
    not everyone uses your dialect.
-   The time that you end a meeting is more important than when you
    start it. Thoughtfully consider the timezones of other attendees
    when you are planning for &amp; participating in meetings.

&lt;div&gt;

Violating these rules isn't a big deal, since people can generally
figure out what you mean. Following them, however, can speed things
along and sometimes even avoid tedious conversations.

&lt;/div&gt;

&lt;/div&gt;</summary></entry><entry><title>Colon full of cookie</title><link href="http://code.mumak.net/2009/09/colon-full-of-cookie.html" rel="alternate"></link><updated>2009-09-15T06:24:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-09-15:2009/09/colon-full-of-cookie.html</id><summary type="html">&lt;p&gt;Launchpad does translations. You can register a project on Launchpad and
use Launchpad to translate your software into a zillion other languages.
We've even got funky tools to take the translations that people do on
the web and commit them straight to your branch.  &lt;/p&gt;
&lt;p&gt;As an ignorant Anglophonic monoglot, I've never really looked into
Launchpad Translations. Software is already written in my language, and
I can't help translate it into my language. There has been no reason for
me to look at it... until today.  &lt;/p&gt;
&lt;p&gt;Barry Warsaw, hacker extraordinaire, has started a project called &lt;a href="https://launchpad.net/colon-full-of-cookie"&gt;I
have a colon full of
cookie&lt;/a&gt;. This project aims
to translate the phrase "I have a colon full of cookie" into as many
languages as possible. Note here that "colon" is the organ, not the
punctuation mark.  &lt;/p&gt;
&lt;p&gt;OK, time to bust out my Latin lexicon.&lt;/p&gt;</summary></entry><entry><title>Layers are terrible</title><link href="http://code.mumak.net/2009/09/layers-are-terrible.html" rel="alternate"></link><updated>2009-09-14T09:03:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-09-14:2009/09/layers-are-terrible.html</id><summary type="html">&lt;p&gt;When I talk about testing frameworks, I often mention Zope layers and
say they are terrible. Some people have asked me for details on their
terror and for justification of my opinion.  &lt;/p&gt;
&lt;p&gt;Here's all I've got. It's based on my experiences using layers with Zope
3.2 in Launchpad.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Layers have unnecessary magic&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;A layer can subclass another layer, which is fine. Subclassing means
that your new, derived layer rests on top of the old, base layer.  &lt;/p&gt;
&lt;p&gt;When you define a derived layer though, you don't call the base layer's
methods yourself, like you would for any other Python subclass. Why not?
Because zope.testing magically up-calls the base layer's methods for
you.  &lt;/p&gt;
&lt;p&gt;Yuck.  &lt;/p&gt;
&lt;p&gt;The upshot is that you write non-standard Python that confuses people
not familiar with zope.testing. Also, you have no way of
&lt;span&gt;not&lt;/span&gt; calling the base methods, which is unfairly
restrictive.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Layers are combined through inheritance&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Each unit test is in a single layer. If you want a unit test to have the
set up and tear down provided by layer A &lt;em&gt;and&lt;/em&gt; the set up and tear down
of layer B, you have to define a wholly new layer C that subclasses both
A and B.  &lt;/p&gt;
&lt;p&gt;The layer C doesn't really mean anything other than "A and B". It
doesn't really deserve a name, but it has to have one, since it has to
be a new class.  &lt;/p&gt;
&lt;p&gt;Since layers are often used to share expensive resources between tests,
you end up with a binary explosion of layer subclasses, as you move
toward needing one for every subset of available resources.  &lt;/p&gt;
&lt;p&gt;This adds code and thus maintenance work, and is actually less clear
than simply declaring that a test uses layers A and B.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Layers are implemented badly&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Layers are all about changing the way a test is run. They supplement the
run with extra work to establish a known base state for the test.  &lt;/p&gt;
&lt;p&gt;If you think about it, the stuff that's required to run a test is a
property of the test.  &lt;/p&gt;
&lt;p&gt;Python's &lt;code&gt;unittest&lt;/code&gt; module recognizes this. One of the few public
methods of a &lt;code&gt;TestCase&lt;/code&gt; object is its &lt;code&gt;run()&lt;/code&gt; method. &lt;code&gt;run()&lt;/code&gt; is also a
method of &lt;code&gt;TestSuite&lt;/code&gt;. This means that if you want to customize the way
a test or a group of tests is run, you should override / re-implement
the &lt;code&gt;run()&lt;/code&gt; method.  &lt;/p&gt;
&lt;p&gt;Layers don't do this. Instead they change the way tests are gathered,
the way they are reported &lt;em&gt;and&lt;/em&gt; the way they are run. This means tests
that rely on layers can only be run with the Zope test runner, and not
with nose or trial or what have you.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Layers solve too many problems&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Layers are not simply a way of sharing expensive resources between
tests, they are also a way of using resources that cannot be torn down.  &lt;/p&gt;
&lt;p&gt;The implementation does this by detecting that a layer cannot be torn
down, then spawning a new process to run the rest of the tests in.  &lt;/p&gt;
&lt;p&gt;It kind of sucks to have things that cannot be torn down in process, and
it definitely sucks to conflate resource sharing with odd subprocess
management.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Layers are not Zopish&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;As far as I can tell, one of the themes of Zope 3 is small,
interchangeable pieces loosely joined together.  &lt;/p&gt;
&lt;p&gt;Layers seem to be something that could have been done much better using
the Zope component architecture. Perhaps they could give &lt;code&gt;getUtility&lt;/code&gt;
some practical purpose in life.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What then?&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;As much as I hate to say so, I don't think there's much hope for layers
as a concept. One is probably better served by replacing one's existing
layers with &lt;a href="https://launchpad.net/testresources"&gt;testresources&lt;/a&gt;. It
looks like it takes &lt;a href="https://bugs.edge.launchpad.net/launchpad-foundations/+bug/419691/comments/2"&gt;quite a lot of work to do
so&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;That's it. Five reasons and a lot of paragraphs. Please let me know if
I've made mistakes, or if newer versions of zope.testing are better.
Also, please gently correct me if I've left the path of &lt;a href="http://jcalderone.livejournal.com/47657.html"&gt;civility and
common courtesy&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Launchpad on Karmic!</title><link href="http://code.mumak.net/2009/09/launchpad-on-karmic.html" rel="alternate"></link><updated>2009-09-05T07:43:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-09-05:2009/09/launchpad-on-karmic.html</id><summary type="html">&lt;p&gt;Thanks almost entirely to &lt;a href="https://launchpad.net/%7Emaxb"&gt;maxb&lt;/a&gt; &amp;amp;
&lt;a href="https://launchpad.net/%7Ewgrant"&gt;wgrant&lt;/a&gt;, I can now hack on &lt;a href="http://dev.launchpad.net/LaunchpadOnKarmic"&gt;Launchpad
in Karmic&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This is great news for me, since it means I can ditch the chroot I was
using. Check out the &lt;a href="http://dev.launchpad.net"&gt;dev wiki&lt;/a&gt; for more
details.&lt;/p&gt;</summary></entry><entry><title>Active reviews, again</title><link href="http://code.mumak.net/2009/09/active-reviews-again.html" rel="alternate"></link><updated>2009-09-04T07:13:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-09-04:2009/09/active-reviews-again.html</id><summary type="html">&lt;p&gt;You might remember I was really excited about the first version of the
active reviews page, since it let me see at a glance the code reviews I
needed to do, the ones I was waiting on, and reviews I could do if I
felt like it. At the time, this was really important, since it's the
first time I've seen a code collaboration tool orient itself towards me
actually doing things. It's certainly a first for Launchpad.  &lt;/p&gt;
&lt;p&gt;Tim has recently landed a few changes to the page that aren't quite as
revolutionary, but follow the same lines of thinking.  &lt;/p&gt;
&lt;p&gt;The one I want to mention is putting all the branches that are approved
for landing onto the active reviews page. Every branch that's approved
to land and hasn't yet landed is actually waste, it's an improvement
that's sitting around gathering dust and waiting for someone to push a
button. It's like a winning lottery ticket stuck to your fridge because
you're too lazy to cash it in. We think it's so important that we've put
these at the top of the list.  &lt;/p&gt;
&lt;p&gt;You can take a look at the active reviews pages for:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.edge.launchpad.net/%7Ejml/+activereviews"&gt;Jonathan
    Lange&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.edge.launchpad.net/%7Ejml/launchpad/+activereviews"&gt;Jonathan Lange in
    Launchpad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.edge.launchpad.net/launchpad/+activereviews"&gt;Launchpad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.edge.launchpad.net/people/+me/+activereviews"&gt;Yourself&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now if you'll excuse me, I have branches to land.&lt;/p&gt;</summary></entry><entry><title>Slow tests</title><link href="http://code.mumak.net/2009/09/slow-tests.html" rel="alternate"></link><updated>2009-09-01T08:37:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-09-01:2009/09/slow-tests.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.advogato.org/person/robertc/"&gt;Robert Collins&lt;/a&gt; of
&lt;a href="http://bazaar-vcs.org"&gt;Bazaar&lt;/a&gt;, recently blogged about the &lt;a href="http://www.advogato.org/person/robertc/diary/113.html"&gt;cost of
slow tests&lt;/a&gt;. I
couldn't agree more.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://launchpad.net"&gt;Launchpad&lt;/a&gt; has a very slow test suite. It takes
upwards of five hours to get a change into &lt;a href="https://code.launchpad.net/%7Elaunchpad-pqm/launchpad/stable"&gt;our "known good"
branch&lt;/a&gt;.
It's been a source of pain for the team for years, and now that
Launchpad is Free Software, it's becoming a pain to new contributors.  &lt;/p&gt;
&lt;p&gt;We've tried a few things to deal with it, none of them great. First up,
we've got a tool for running the test suite on EC2 instances. It's nice,
but it's still too slow. I've written a "&lt;a href="https://dev.launchpad.net/FasterTests"&gt;faster
tests&lt;/a&gt;" spec outlining some of
the options we have; but specs never got software written. Likewise,
there are a bunch of bugs flagged as
&lt;a href="https://bugs.edge.launchpad.net/launchpad-project/+bugs?field.tag=build-infrastructure"&gt;build-infrastructure&lt;/a&gt;,
many of which address the slow test sped. We also have a rotating
"&lt;a href="https://dev.launchpad.net/BuildEngineer"&gt;Build Engineer&lt;/a&gt;" position
within the team to address those bugs.  &lt;/p&gt;
&lt;p&gt;&lt;span id="formatbar_Buttons"&gt;&lt;span id="formatbar_CreateLink"
class="on down" title="Link"&gt;It's probably not enough though. From
watching Rob's blog posts, and the emails to the Bazaar mailing list, I
think that what Launchpad really needs is someone with a passion for
solving the problem (i.e. making Launchpad hacking fun) who is willing
to lead the way, and a full commitment from the rest of the team for
getting the runtime down and keeping it there.  &lt;/p&gt;
&lt;p&gt;More on this later.&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</summary></entry><entry><title>Twisted &amp; Monads</title><link href="http://code.mumak.net/2009/07/twisted-monads.html" rel="alternate"></link><updated>2009-07-26T01:22:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-26:2009/07/twisted-monads.html</id><summary type="html">&lt;p&gt;On Thursday I spoke at fp-syd about &lt;a href="http://static.mumak.net/Twisted-Monads.pdf"&gt;Twisted and
monads&lt;/a&gt;. All I have is the
slides. If you'd like, I can write up the paper.&lt;/p&gt;</summary></entry><entry><title>Launchpad now fully open sourced</title><link href="http://code.mumak.net/2009/07/launchpad-now-fully-open-sourced.html" rel="alternate"></link><updated>2009-07-21T05:53:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-21:2009/07/launchpad-now-fully-open-sourced.html</id><summary type="html">&lt;p&gt;&lt;a href="https://launchpad.net"&gt;Launchpad&lt;/a&gt; has been &lt;a href="http://blog.canonical.com/?p=192"&gt;open
sourced&lt;/a&gt;. That includes Soyuz and
Codehosting.  &lt;/p&gt;
&lt;p&gt;I'm now a full-time free software hacker. Squee!  &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://www.markshuttleworth.com/"&gt;Mark&lt;/a&gt; for making the call,
and to &lt;a href="http://www.red-bean.com/kfogel/"&gt;Karl&lt;/a&gt; for being the flux
capacitor of the whole operation, humming along as we've built up to
1.21 gigawatts of &lt;span&gt;freedom power&lt;/span&gt; and burst right through to
the future.&lt;/p&gt;</summary></entry><entry><title>unittest: it ain't broke, let's fix it</title><link href="http://code.mumak.net/2009/07/unittest-it-aint-broke-lets-fix-it.html" rel="alternate"></link><updated>2009-07-19T10:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-19:2009/07/unittest-it-aint-broke-lets-fix-it.html</id><summary type="html">&lt;p&gt;I spoke at &lt;a href="http://www.europython.eu/"&gt;EuroPython 2009&lt;/a&gt; in Birmingham
about the &lt;a href="http://docs.python.org/library/unittest.html"&gt;unittest&lt;/a&gt;
module in the &lt;a href="http://docs.python.org/library/index.html"&gt;Python standard
library&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The central thesis was first proposed to me by Robert Collins, probably
around 2003 or 2004. The idea is that unittest is actually surprisingly
good and more extensible than you think. It was also Rob's idea to
co-present this as a talk in Birmingham. Sadly, I was obliged to present
it by myself.  &lt;/p&gt;
&lt;p&gt;I'd like to write up the talk more thoroughly, and am keen to publish
brief posts on why layers are bad and why setUpClass is bad, but for now
I'll just post the artifacts from EuroPython.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides
    (&lt;a href="http://mumak.net/stuff/EuroPython-2009-unittest-jml.odp"&gt;ODP&lt;/a&gt; |
    &lt;a href="http://mumak.net/stuff/EuroPython-2009-unittest-jml.pdf"&gt;PDF&lt;/a&gt;)  &lt;/li&gt;
&lt;li&gt;&lt;a href="http://mumak.net/stuff/unittest-lets-fix-it-slides.txt"&gt;Text version of
    slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mumak.net/stuff/unittest-lets-fix-it.txt"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://static.mumak.net/Jonathan_Lange-Unittest_It_aint_broke_lets_fix_it.ogg"&gt;Audio&lt;/a&gt;
    (&lt;a href="http://wiki.europython.eu/RecordedTalks?action=AttachFile&amp;amp;do=get&amp;amp;target=Jonathan_Lange-Unittest_It_aint_broke_lets_fix_it.ogg"&gt;mirror&lt;/a&gt;)  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do you think?  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Update&lt;/span&gt;: Audio now available.&lt;/p&gt;</summary></entry><entry><title>Documenting a Python project</title><link href="http://code.mumak.net/2009/07/documenting-python-project.html" rel="alternate"></link><updated>2009-07-19T04:22:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-19:2009/07/documenting-python-project.html</id><summary type="html">&lt;p&gt;I've recently started contributing a little to
&lt;a href="http://gtg.fritalk.com/"&gt;GTG&lt;/a&gt;, a GTD-inspired todo list application
that's hosted on &lt;a href="https://edge.launchpad.net/gtg"&gt;Launchpad&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;So far, I've made &lt;a href="https://bugs.edge.launchpad.net/gtg/+bugs?search=Search&amp;amp;field.assignee=jml"&gt;a few UI
tweaks&lt;/a&gt;
and have done a bit of &lt;a href="https://code.edge.launchpad.net/%7Ejml/gtg/+branches?field.lifecycle=MERGED&amp;amp;field.lifecycle-empty-marker=1&amp;amp;field.sort_by=most+recently+changed+first&amp;amp;field.sort_by-empty-marker=1"&gt;infrastructural
work&lt;/a&gt;.
I'm still trying to figure out how the code fits together. Since it's
such a small code base, I don't mind writing a few docstrings for it.
And if I'm going to write docstrings, I might as well generate some API
docs, right?  &lt;/p&gt;
&lt;p&gt;And so the journey begins.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://farmdev.com/thoughts/7/housecall-from-the-pydoctor-finally-a-doc-generator-that-works-/"&gt;Everyone
knows&lt;/a&gt;
that &lt;a href="http://codespeak.net/%7Emwh/pydoctor/"&gt;pydoctor&lt;/a&gt; is the best way
to generate API docs for Python code. So I fetched it from Launchpad and
ran it according to the instructions:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This failed, saying it couldn't find zope.interfaces. I know I have
zope.interfaces on my system:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sagi&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zopeinterface&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zopeinterface&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;newest&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But, ah, this is karmic, and pydoctor is insisting on running with
Python 2.4, which is completely broken on karmic. I tweaked the
bin/pydoctor file to use the default Python and then ran the command
again.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Success, I think. There's a lot of output, so it's hard to tell. Trying
again with a quiet option:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;qWARNING&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;guessing&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Divmod&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nevow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;formless&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;730&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;parametersrv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InterfaceClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dct&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Divmod&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nevow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nevow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;testutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;popen2&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;popen2&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen3&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Divmod&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Nevow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nevow&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;guard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;deprecated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt; &lt;span class="n"&gt;insteadimport&lt;/span&gt; &lt;span class="n"&gt;md5these&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;docstrings&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;proper&lt;/span&gt; &lt;span class="n"&gt;epytext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;GTG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tagstore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__GTG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tagstore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_attributeGTG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tagstore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_all_attributesGTG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new_taskGTG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_tasks_listGTG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_active_tasks_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hmm. The WARNING sucks, but I can work around that by specifying the
project name on the command line. The deprecation warnings also suck,
but I'm not quite sure what to do about them. For now, I'll invoke
python with '-W ignore::DeprecationWarning'.  &lt;/p&gt;
&lt;p&gt;This is as good a point as any to point out that I had Nevow trunk
already in my PYTHONPATH. I don't know what version of Nevow you will
need.  &lt;/p&gt;
&lt;p&gt;The 'not proper epytext' warnings are more worrisome. I thought I'd been
writing proper docstrings. Also, it doesn't tell me what the actual
problems are: I need to drop the '-q' option for that. This gets me too
much information. Oh hello, there's a '--verbose-about' option. Digging
into the source doesn't enlighten immediately, but bzr-grep eventually
reveals '--verbose-about=epydoc2stan2'. If I repeat '-q' twice and the
'--verbose-about' option twice, I get precisely the output I want.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DeprecationWarning&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;epydoc2stan2&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;epydoc2stan2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What I really want is a
&lt;a href="http://www.divmod.org/trac/wiki/DivmodPyflakes"&gt;pyflakes&lt;/a&gt;-style checker
for my docstrings that I can &lt;a href="http://www.plope.com/Members/chrism/flymake-mode"&gt;hook up to
flymake&lt;/a&gt;. That way, I
can be warned about my poorly-formed docs as I'm writing them. Looking
at the pydoctor help, it doesn't look like such a thing exists. The
command above is close, but it writes too much output to disk and takes
far too long to run.  &lt;/p&gt;
&lt;p&gt;Also, it's not quite right. It seems I've been writing my docstrings in
the style we use in Launchpad, rather than in epytext style. So if I use
'--docformat=restructuredtext', my docstrings are formatted properly and
I get fewer errors:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DeprecationWarning&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydoctor&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GTG&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;docformat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;restructuredtext&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;epydoc2stan2&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;epydoc2stan2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This leaves only two formatting errors, both valid. It takes a full
second longer to generate the docs, which sucks. Still, we've got doc
generation, and we've got valid errors.  &lt;/p&gt;
&lt;p&gt;The output is good, but it's not great. Take a look at the &lt;a href="http://starship.python.net/crew/mwh/apidocs/"&gt;Twisted API
docs&lt;/a&gt;, for example. I
can't quite put my finger on it, but I wish that someone with a vision
and the kind of CSS skills that you have to buy from the devil at a
crossroads at midnight would set themselves the task of making the API
docs look great.  &lt;/p&gt;
&lt;p&gt;So where does this leave us:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can generate pretty good API docs easily and get told only about
    interesting errors&lt;/li&gt;
&lt;li&gt;I need a pyflakes-like docstring formatting checker&lt;/li&gt;
&lt;li&gt;I need a simple docstring coverage checker. I do &lt;span&gt;not&lt;/span&gt;
    want to make it part of my test suite or build process.&lt;/li&gt;
&lt;li&gt;I had to tweak the pydoctor source before being able to run it from
    trunk  &lt;/li&gt;
&lt;li&gt;The output is OK, but it ought to be beautiful  &lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>testresources 0.2</title><link href="http://code.mumak.net/2009/07/testresources-02.html" rel="alternate"></link><updated>2009-07-17T12:36:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-17:2009/07/testresources-02.html</id><summary type="html">&lt;p&gt;At &lt;a href="http://www.europython.eu/"&gt;EuroPython&lt;/a&gt; this year, I talked about
&lt;a href="http://docs.python.org/library/unittest.html"&gt;unittest&lt;/a&gt; and how it's
misunderstood little module with it's own problems, and that despite its
rough exterior it really is a Good Thing.  &lt;/p&gt;
&lt;p&gt;To demonstrate this, I gave examples of three pieces of software that
each extended unittest to solve the same problem: sharing expensive
resources between tests.  &lt;/p&gt;
&lt;p&gt;The first two examples were Twisted's &lt;code&gt;setUpClass&lt;/code&gt; / &lt;code&gt;tearDownClass&lt;/code&gt; and
Zope's layers. They are terrible and you should never use them.  &lt;/p&gt;
&lt;p&gt;If you really want to share expensive resources between tests, you
should use &lt;a href="http://pypi.python.org/pypi/testresources/"&gt;testresources&lt;/a&gt;.
testresources makes it easy to write tests that use resources that cost
a lot to set up and tear down (such as databases or SSH servers) without
screwing up your test isolation. &lt;a href="http://www.advogato.org/person/robertc/"&gt;Robert
Collins&lt;/a&gt;, the author, cut the
&lt;a href="http://pypi.python.org/packages/source/t/testresources/testresources-0.2.tar.gz"&gt;0.2
release&lt;/a&gt;
today.  &lt;/p&gt;
&lt;p&gt;testresources now has exactly &lt;a href="https://bugs.launchpad.net/testresources"&gt;one known
bug&lt;/a&gt;, although Rob argues that
maybe it's one unknown bug. It's down to the quantum level here: that's
how good testresources is.&lt;/p&gt;</summary></entry><entry><title>New GPG key</title><link href="http://code.mumak.net/2009/07/new-gpg-key.html" rel="alternate"></link><updated>2009-07-13T01:53:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-13:2009/07/new-gpg-key.html</id><summary type="html">&lt;p&gt;I've published a new GPG key: 2048R/2A727997  &lt;/p&gt;
&lt;p&gt;Details available here:
http://static.mumak.net/jml-key-transition-2009-07-13.txt&lt;/p&gt;</summary></entry><entry><title>Angle on code review</title><link href="http://code.mumak.net/2009/07/angle-on-code-review.html" rel="alternate"></link><updated>2009-07-07T07:19:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-07-07:2009/07/angle-on-code-review.html</id><summary type="html">&lt;p&gt;You're a core contributor to a Free Software project. Maybe you get paid
to do it, maybe you don't. You get a patch from the outside: someone
whose name you don't recognize has contributed a patch.  &lt;/p&gt;
&lt;p&gt;You could ignore this patch, since you've got a lot of work to do
already. Better, you could
&lt;a href="http://mumak.net/stuff/your-code-sucks.html"&gt;review&lt;/a&gt; the patch and give
the newbie some much needed feedback.  &lt;/p&gt;
&lt;p&gt;Alternatively, you could &lt;span&gt;champion&lt;/span&gt; the change by making sure
it gets the treatment that one of your own patches would. Review it or
get it reviewed, help the newbie make the changes the reviewer wants,
make sure it's managed using the best systems for managing patches in
your project, keep track of its progress like you would one of your own
patches, be eager to see it landed, pimp it in the changelog and the
release announcement, get the newbie's name in lights.  &lt;/p&gt;
&lt;p&gt;In practical terms: if you use a DVCS, get the patch out of whatever
email attachment its in and put it in a branch; if you use a code review
system like Launchpad, get it out of the bug tracker and into the code
review tool; if you have a test suite, empower the newbie to write tests
(normally that means knowing where to put them and how to run them).  &lt;/p&gt;
&lt;p&gt;It's a matter of perspective: am I here to maintain the quality of the
code base and prevent bugs from being introduced, or am I here to help
others in my community. Am I just a reviewer or am I a champion?&lt;/p&gt;</summary></entry><entry><title>Twisted huh?</title><link href="http://code.mumak.net/2009/06/twisted-huh.html" rel="alternate"></link><updated>2009-06-30T15:23:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-06-30:2009/06/twisted-huh.html</id><summary type="html">&lt;p&gt;One of the hallway conversations I've had a few times so far at
EuroPython goes like this:  &lt;/p&gt;
&lt;p&gt;A: Twisted's got some good stuff going for it, but I don't like the way
it forces me to use Zope interfaces. It's too heavyweight?&lt;br /&gt;
B: Huh? What do you mean? It doesn't make you do that.&lt;br /&gt;
C: Yeah, there's lots of deep inheritance, which just feels really
wrong.&lt;br /&gt;
A: Right, I have to write too much code to get something simple
working.&lt;br /&gt;
B: Sorry, I have no idea what you mean. Can you give a concrete
example?&lt;br /&gt;
A, C: I can't think of one right now.  &lt;/p&gt;
&lt;p&gt;To me, this is a very intriguing beginning to a real conversation. Do
you know what A and C might mean here? I'd love to understand their
points so that I can form an opinion.&lt;/p&gt;</summary></entry><entry><title>Argh!</title><link href="http://code.mumak.net/2009/06/argh.html" rel="alternate"></link><updated>2009-06-25T06:47:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-06-25:2009/06/argh.html</id><summary type="html">&lt;p&gt;I upgraded karmic, and now Do &amp;amp; Banshee are broken. :(&lt;/p&gt;</summary></entry><entry><title>pyflakes now warns about unused local variables</title><link href="http://code.mumak.net/2009/06/pyflakes-now-warns-about-unused-local.html" rel="alternate"></link><updated>2009-06-03T22:54:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-06-03:2009/06/pyflakes-now-warns-about-unused-local.html</id><summary type="html">&lt;p&gt;I finally got around to finishing my fix for
&lt;a href="http://divmod.org/trac"&gt;Divmod&lt;/a&gt; bug
&lt;a href="http://divmod.org/trac/ticket/2718"&gt;#2718&lt;/a&gt; -- Warn about unused
variables in methods in
&lt;a href="http://www.divmod.org/trac/wiki/DivmodPyflakes"&gt;pyflakes&lt;/a&gt;. Last night,
the magnificent &lt;a href="http://jcalderone.livejournal.com/"&gt;Jean-Paul
Calderone&lt;/a&gt; reviewed and landed my
patch. This means that if you are using pyflakes trunk (either from
Subversion &lt;a href="http://divmod.org/svn/Divmod/trunk/"&gt;trunk&lt;/a&gt; or from the
Launchpad &lt;a href="https://code.edge.launchpad.net/%7Evcs-imports/pyflakes/main"&gt;Bazaar
import&lt;/a&gt;),
pyflakes will spot code like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and generate a warning like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;assigned&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use pyflakes hooked up to
&lt;a href="http://www.emacswiki.org/emacs/FlyMake"&gt;flymake&lt;/a&gt;, so it's always
running all the time on every Python file I'm working on. Relying on it
has become as second-nature as relying on syntax highlighting. There's a
whole class of mistakes I don't make any more, simply because it's on.  &lt;/p&gt;
&lt;p&gt;However, the &lt;span&gt;main&lt;/span&gt; way it helps me is when I'm refactoring
code. When extracting a function or changing a variable name, pyflakes
acts like a sort of todo list for me. Now that it shows unused local
variables, it's getting dangerously close to perfect.  &lt;/p&gt;
&lt;p&gt;To get pyflakes quickly, bzr branch
&lt;a href="https://code.edge.launchpad.net/%7Evcs-imports/pyflakes/main"&gt;lp:pyflakes&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;(Edit: Grammar fix)&lt;/p&gt;</summary></entry><entry><title>Landscape on Code Review</title><link href="http://code.mumak.net/2009/05/landscape-on-code-review.html" rel="alternate"></link><updated>2009-05-25T07:15:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-05-25:2009/05/landscape-on-code-review.html</id><summary type="html">&lt;p&gt;The Landscape guys mentioned three things that I've missed in &lt;a href="http://mumak.net/stuff/your-code-sucks.html"&gt;Your Code
Sucks and I Hate You&lt;/a&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The important thing about code reviews is that they are a
    conversation. Emphasise this in your team's code review culture.&lt;/li&gt;
&lt;li&gt;Don't speak to the person, speak to the code. "Why does the code do
    this?" rather than "Why did you do this?".&lt;/li&gt;
&lt;li&gt;Remember that the person who wrote the patch is an expert in that
    patch.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>From the Hands</title><link href="http://code.mumak.net/2009/05/from-hands.html" rel="alternate"></link><updated>2009-05-25T07:01:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-05-25:2009/05/from-hands.html</id><summary type="html">&lt;p&gt;Just starting at UDS after a week at Canonical's Allhands event.
Allhands was great, but one of the highlights for me was the Landscape
team's presentation on their development process:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We optimize for fun. If something works really well in theory but it
makes things less fun, then we don't do it.  &lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Stealth feature</title><link href="http://code.mumak.net/2009/04/stealth-feature.html" rel="alternate"></link><updated>2009-04-08T23:06:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-04-08:2009/04/stealth-feature.html</id><summary type="html">&lt;p&gt;Last release, Tim added a stealth feature to Launchpad. Since it's
incomplete we didn't announce it on the official blog, but it's useful
enough to share here.  &lt;/p&gt;
&lt;p&gt;If you browse to https://code.launchpad.net/\~\$USERNAME/\$PROJECT,
you'll get a list of all the branches in \$PROJECT owned by \$USERNAME,
e.g. &lt;a href="https://code.launchpad.net/%7Eraof/do"&gt;Chris's Gnome Do branches&lt;/a&gt;
or &lt;a href="https://code.edge.launchpad.net/%7Egmb/gwibber"&gt;Graham's Gwibber
branches&lt;/a&gt;. I use this
mostly to track my own branches in a project so I can make sure I
haven't let any slip through the cracks.  &lt;/p&gt;
&lt;p&gt;We want to make it possible to get to these pages without URL hacking,
of course. But if you use both Bazaar and Launchpad quite heavily then
this trick is worth knowing about even as it is.&lt;/p&gt;</summary></entry><entry><title>Truth (again)</title><link href="http://code.mumak.net/2009/04/truth-again.html" rel="alternate"></link><updated>2009-04-07T06:33:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-04-07:2009/04/truth-again.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.presentationzen.com/.a/6a00d83451b64669e20105357bf39b970b-450wi"&gt;&lt;img alt="" src="http://www.presentationzen.com/.a/6a00d83451b64669e20105357bf39b970b-450wi" /&gt;&lt;/a&gt;&lt;br /&gt;
I &lt;a href="http://life.mumak.net/2008/10/truth.html"&gt;originally posted&lt;/a&gt; this on
&lt;a href="http://life.mumak.net/"&gt;my other blog&lt;/a&gt;. I saw it while digging up
another post and thought I'd take it's advice.  &lt;/p&gt;
&lt;p&gt;Originally found on &lt;a href="http://www.presentationzen.com/"&gt;Presentation Zen&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Time-based releases and love</title><link href="http://code.mumak.net/2009/03/time-based-releases-and-love.html" rel="alternate"></link><updated>2009-03-31T22:24:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-03-31:2009/03/time-based-releases-and-love.html</id><summary type="html">&lt;p&gt;I believe in time-based releases. I believe in frequent releases. I
believe in a trunk branch that is always ready to be a release
candidate. Many Free Software developers share my beliefs. For a long
time I haven't questioned it. It's obviously good to release regularly
and often.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"It is hard to argue that bzr isn't in a state of flux when a new
stable version is available once a month." - Jason Earl, Bazaar
mailing list.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now I think I have to begin asking questions.  &lt;/p&gt;
&lt;p&gt;Is it possible that time-based releases actually create negative
impressions of software? Should regular releasers slow down their
cadence? How should compatibility watersheds (format, API, whatever)
affect a release cycle? What would Bazaar's format reputation be like if
they released every six months instead of every month?&lt;/p&gt;</summary><category term="Bazaar"></category></entry><entry><title>Team +junk branches</title><link href="http://code.mumak.net/2009/03/team-junk-branches.html" rel="alternate"></link><updated>2009-03-26T01:53:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-03-26:2009/03/team-junk-branches.html</id><summary type="html">&lt;p&gt;Very, very recently, we changed Launchpad to &lt;a href="https://bugs.edge.launchpad.net/launchpad-bazaar/+bug/237465"&gt;support team +junk
branches&lt;/a&gt;.
So recently, in fact, I don't think the change has hit the servers yet.
Anyway, after the 2.2.3 release on April 1, you'll be able to push up &amp;amp;
create branches in lp:\~your-team-here/+junk/some-branch.  &lt;/p&gt;
&lt;p&gt;I have to confess I'm not a huge fan of this feature. Almost all of the
time, if you've got some code in a branch and you want others to
collaborate on it you should &lt;a href="https://edge.launchpad.net/projects/+new-guided"&gt;create a new
project&lt;/a&gt;. That way you
can file bugs, do code reviews and get easy branch stacking support.  &lt;/p&gt;
&lt;p&gt;Still, the use case that
&lt;a href="https://edge.launchpad.net/%7Elaserjock"&gt;Jordan&lt;/a&gt; mentions is a good
one, and the fix fell out naturally from some of the work we've done for
source package branches, so we decided to do it. You see, we actually do
get a kick out of making our users happy. Really.  &lt;/p&gt;
&lt;p&gt;I guess the moral of the story, if there is one at all, is to &lt;a href="https://bugs.edge.launchpad.net/launchpad-bazaar/+filebug"&gt;file bug
reports&lt;/a&gt;. We
don't want to build a website with &lt;a href="http://upload.wikimedia.org/wikipedia/en/1/1b/The_Homer_by_Carlos_Bisquertt.jpg"&gt;separate bubble
domes&lt;/a&gt;
and &lt;a href="http://en.wikipedia.org/wiki/Oh_Brother,_Where_Art_Thou%3F"&gt;three horns that all play "La
Cucaracha"&lt;/a&gt;
so we aren't going to mindlessly say "yes" to everything. But we do want
to make something that will help you rock the Free Software world even
harder, and to do that, we need to know what you want.&lt;/p&gt;</summary></entry><entry><title>Trips me every time</title><link href="http://code.mumak.net/2009/03/trips-me-every-time.html" rel="alternate"></link><updated>2009-03-25T07:06:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-03-25:2009/03/trips-me-every-time.html</id><summary type="html">&lt;p&gt;&lt;a href="http://twitter.com/etrepum"&gt;etrepum&lt;/a&gt;
&lt;a href="https://twitter.com/etrepum/status/1385947605"&gt;commented&lt;/a&gt; on how hash
functions need to be idempotent. I pretty much always interpret things
about functions and
&lt;a href="http://en.wikipedia.org/wiki/Idempotent"&gt;idempotence&lt;/a&gt; incorrectly.  &lt;/p&gt;
&lt;p&gt;When used in computing, saying a function is idempotent generally means
you can call it a hozillion times and the state of the system (&amp;amp; thus
the return value of the function) will be the same as if you called it
once.  &lt;/p&gt;
&lt;p&gt;When used in mathematics, a function &lt;span&gt;f&lt;/span&gt; is idempotent if
&lt;span&gt;f(f(x)) = f(x)&lt;/span&gt; for all &lt;span&gt;x&lt;/span&gt;. The computing
quality of idempotence isn't useful since &lt;span&gt;f(x) = f(x)&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;I would greatly appreciate it if we could all find a way to communicate
that didn't involve language.&lt;/p&gt;</summary></entry><entry><title>brisbane-core</title><link href="http://code.mumak.net/2009/03/brisbane-core.html" rel="alternate"></link><updated>2009-03-22T22:31:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-03-22:2009/03/brisbane-core.html</id><summary type="html">&lt;p&gt;Up in Brisbane, while I was diligently working away on package branches
in Launchpad, many of the Bazaar guys were working on their new
"brisbane-core" format.  &lt;/p&gt;
&lt;p&gt;I overheard one of them say in this new format 'log -v' is up to twenty
times faster.  &lt;/p&gt;
&lt;p&gt;Want more details? Well, perhaps someone else on Planet Bazaar can
provide them.&lt;/p&gt;</summary><category term="Bazaar"></category></entry><entry><title>Your Code Sucks and I Hate You</title><link href="http://code.mumak.net/2009/03/your-code-sucks-and-i-hate-you.html" rel="alternate"></link><updated>2009-03-12T02:18:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-03-12:2009/03/your-code-sucks-and-i-hate-you.html</id><summary type="html">&lt;p&gt;I've just uploaded my OSDC 2008 paper, titled &lt;a href="http://mumak.net/stuff/your-code-sucks.html"&gt;Your Code Sucks and I
Hate You&lt;/a&gt;. It's about the
social dynamics of code review.  &lt;/p&gt;
&lt;p&gt;Tell me what you think.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Update:&lt;/span&gt; The paper was lost, now it's found.&lt;/p&gt;</summary></entry><entry><title>Firefox Smart Bookmark for Branches</title><link href="http://code.mumak.net/2009/03/firefox-smart-bookmark-for-branches.html" rel="alternate"></link><updated>2009-03-09T06:41:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-03-09:2009/03/firefox-smart-bookmark-for-branches.html</id><summary type="html">&lt;p&gt;You might not know about Firefox smart bookmarks. They let you type
something into your URL bar like "twisted 2345" and have Firefox load
the Twisted bug page for bug #2345. Lifehacker explains &lt;a href="http://lifehacker.com/387944/how-to-make-your-own-smart-bookmarks-in-firefox-3"&gt;how to create
them&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Here's one to add for Launchpad branches:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.mumak.net/uploaded_images/Screenshot-Properties-for--759585"&gt;&lt;img alt="" src="http://code.mumak.net/uploaded_images/Screenshot-Properties-for--759574" /&gt;&lt;/a&gt;Once
you've added this, you can type 'lp twisted' or 'lp python' into your
Firefox location bar and get redirected to the branch page for Firefox.
Anything that works as part of an lp: URL will work here. Right now,
this only works on edge.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Update:&lt;/span&gt;Firefox escapes any slashes you put into the URL
bar, which makes this much less useful.&lt;/p&gt;</summary></entry><entry><title>Fourteen Monthses</title><link href="http://code.mumak.net/2009/02/fourteen-monthses.html" rel="alternate"></link><updated>2009-02-27T05:10:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-27:2009/02/fourteen-monthses.html</id><summary type="html">&lt;p&gt;I've been waiting since November for this.  &lt;/p&gt;
&lt;p&gt;Now, if you submit a branch for review on Launchpad, Launchpad will
automatically generate the diff for you. For example, take a look at
&lt;a href="https://code.edge.launchpad.net/%7Elifeless/subunit/filter/+merge/4006"&gt;the review page for one of lifeless's subunit
branches&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To take advantage of the feature, go to the page of a branch you want to
land (you can use bzr lp-open to do this), then click on "Propose for
merging into another branch". Select the branch you want to land it on
(normally trunk, which is the default branch), then type some stuff
explaining what the patch does. Hit "Submit", wait a minute or so, then
refresh. Voila.  &lt;/p&gt;
&lt;p&gt;We hope to tweak the page later so that it's obvious that a diff is
being generated and so you don't have to refresh. Even so, I'm very
pleased that we got this done. Thanks particularly to Aaron for getting
this landed.&lt;/p&gt;</summary></entry><entry><title>Why you should have a public location for your branch</title><link href="http://code.mumak.net/2009/02/why-you-should-have-public-location-for.html" rel="alternate"></link><updated>2009-02-26T21:36:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-26:2009/02/why-you-should-have-public-location-for.html</id><summary type="html">&lt;p&gt;I asked this self-same question on the Bazaar mailing list the other
day. Here's the answer:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given that the place you push the branch to (its "push location")
    might be different from the place that others get the branch from,
    branch's have public locations.&lt;/li&gt;
&lt;li&gt;Any tool that shares your branch with others (e.g. bzr send, a
    commit notifier or even lp-open) needs to have a public location to
    share with the world.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Betterer Cloud</title><link href="http://code.mumak.net/2009/02/betterer-cloud.html" rel="alternate"></link><updated>2009-02-25T01:52:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-25:2009/02/betterer-cloud.html</id><summary type="html">&lt;p&gt;The &lt;a href="https://code.edge.launchpad.net/"&gt;Launchpad branch cloud&lt;/a&gt; has been
tweaked. We got rid of the green (what does that mean anyway?) and added
more variations in font size.  &lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</summary></entry><entry><title>Useful, unpolished Bazaar plugin</title><link href="http://code.mumak.net/2009/02/useful-unpolished-bazaar-plugin.html" rel="alternate"></link><updated>2009-02-25T00:16:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-25:2009/02/useful-unpolished-bazaar-plugin.html</id><summary type="html">&lt;p&gt;I've just pushed
&lt;a href="http://code.edge.launchpad.net/%7Ejml/+junk/bzr-difftodo"&gt;lp:\~jml/+junk/bzr-difftodo&lt;/a&gt;
to Launchpad. It's a Bazaar plugin that:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finds the diff between your current branch and the submit branch&lt;/li&gt;
&lt;li&gt;Looks in that diff for any Python comments that you've added or
    modified&lt;/li&gt;
&lt;li&gt;Shows all the TODO or XXX items in Emacs "compile" format.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the output looks something like this:  &lt;/p&gt;
&lt;p&gt;\$ bzr todo&lt;br /&gt;
Using submit branch /home/jml/repos/someproject/trunk&lt;br /&gt;
lib/somefile.py:167:&lt;br /&gt;
XXX: JonathanLange 2009-02-23: This matches the old search algorithm
that used to live in foobar.py. It's not actually very good -- really it
should match based on substrings of the unique name and sort based on
relevance.  &lt;/p&gt;
&lt;p&gt;lib/otherfile.py:680:&lt;br /&gt;
XXX: This is using _cromulateSplonks -- a private method that no
longer exists.  &lt;/p&gt;
&lt;p&gt;lib/anotherfile:779:&lt;br /&gt;
XXX: I think that this can be moved into IAmAwesome.  &lt;/p&gt;
&lt;p&gt;Things to do: 3  &lt;/p&gt;
&lt;p&gt;The branch comes with an Emacs module bzr-todo.el. If you load this
module, you can just go "M-x branch-todo" in any file in a branch and
have the todo list come up in a compile buffer. Then you can just click
on any item to jump straight to it.  &lt;/p&gt;
&lt;p&gt;The core code is pretty well tested, but everything around is really,
really rough. It works for me.  &lt;/p&gt;
&lt;p&gt;I'd love some patches for it.&lt;/p&gt;</summary></entry><entry><title>100% Pure Doing</title><link href="http://code.mumak.net/2009/02/100-pure-doing.html" rel="alternate"></link><updated>2009-02-24T06:16:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-24:2009/02/100-pure-doing.html</id><summary type="html">&lt;p&gt;As you might know, &lt;a href="https://help.launchpad.net/Code/Review"&gt;Launchpad has a code review
system&lt;/a&gt;. You might have even
given it a try a few months ago when it first came out. We, the
Launchpad team, started using it almost right away and to be completely
honest with you, we didn't like it very much. On the whole we are
curmudgeonly engineers who would rather fix bugs or build features than
fiddle with a silly website. However, now the much-feted power of
&lt;a href="http://www.joelonsoftware.com/articles/fog0000000012.html"&gt;&lt;span&gt;dogfood&lt;/span&gt;&lt;/a&gt;
was working for us.  &lt;/p&gt;
&lt;p&gt;We've been improving the code review system for &lt;span&gt;ages&lt;/span&gt; now.
It's&lt;a href="https://bugs.edge.launchpad.net/launchpad-bazaar/+bugs?field.tag=code-review"&gt;not
perfect&lt;/a&gt;,
but is getting better rather quickly. Over the last cycle, it has
started to become &lt;span&gt;really good&lt;/span&gt;. We've &lt;a href="https://bugs.edge.launchpad.net/launchpad-bazaar/+bugs?field.searchtext=&amp;amp;orderby=-importance&amp;amp;search=Search&amp;amp;field.status%3Alist=FIXCOMMITTED&amp;amp;assignee_option=any&amp;amp;field.assignee=&amp;amp;field.bug_reporter=&amp;amp;field.bug_supervisor=&amp;amp;field.bug_commenter=&amp;amp;field.subscriber=&amp;amp;field.omit_dupes.used=&amp;amp;field.omit_dupes=on&amp;amp;field.has_patch.used=&amp;amp;field.has_cve.used=&amp;amp;field.tag=code-review&amp;amp;field.tags_combinator=ANY"&gt;done a lot of things
this
cycle&lt;/a&gt;,
I want to focus on &lt;a href="https://bugs.edge.launchpad.net/launchpad-bazaar/+bug/325985"&gt;one in
particular&lt;/a&gt;,
since it's dear to my heart.  &lt;/p&gt;
&lt;p&gt;On our &lt;a href="https://edge.launchpad.net/"&gt;cutting edge servers&lt;/a&gt;, and in the
next release, the "active reviews" page for a project is tailored to you
specifically. Instead of just showing you all the reviews, like it used
to do, it shows you the following lists:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reviews you &lt;span&gt;must&lt;/span&gt;do. That is, the reviews
    specifically requested of you that you haven't done.&lt;/li&gt;
&lt;li&gt;The reviews you &lt;span&gt;can&lt;/span&gt; do. Reviews that have been
    requested of your team that no one else has done yet.&lt;/li&gt;
&lt;li&gt;The reviews you are &lt;span&gt;waiting on&lt;/span&gt;. Reviews that you've
    requested that haven't been done yet.  &lt;/li&gt;
&lt;li&gt;The reviews you have &lt;span&gt;completed&lt;/span&gt;. Reviews you've done
    that haven't been replied to yet.&lt;/li&gt;
&lt;li&gt;Everything else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's the first list that makes me happiest. At last, I have a list of
reviews that I can churn through, knowing that I'm doing the right
thing, not having to figure what state it's in or make decisions about
how important it is. I simply &lt;span&gt;do&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;The second list is pretty awesome too. If ever I'm between branches or
have a few minutes to spare during a lengthy test run, I have an
already-prepared list of ways to make other people happy. That's the
kind of software I like.  &lt;/p&gt;
&lt;p&gt;And, well, actually, I like the third list too. It's great to be able to
look at the things you are blocked on and see who you need to hassle.
The "Waiting For" pattern comes from GTD, and is one of the best things
about the system and deserves wider notoriety.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;(Oh, and just wait for the release announcement!)&lt;/span&gt;&lt;/p&gt;</summary></entry><entry><title>One bird, two stones</title><link href="http://code.mumak.net/2009/02/one-bird-two-stones.html" rel="alternate"></link><updated>2009-02-22T23:34:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-22:2009/02/one-bird-two-stones.html</id><summary type="html">&lt;p&gt;&lt;a href="http://glyph.twistedmatrix.com/"&gt;Glyph&lt;/a&gt; thinks that &lt;a href="http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html"&gt;interfaces are
great&lt;/a&gt;,
and he is right (although I haven't read the full post, I certainly
agree with the title).  &lt;/p&gt;
&lt;p&gt;One of the natural things you can do with interfaces is this: make a new
class Bar that delegates all of the properties of IFoo to an instance of
class Foo. This is the &lt;a href="http://en.wikipedia.org/wiki/Decorator_pattern"&gt;Decorator
pattern&lt;/a&gt; (not to be
confused with Python's decorator syntax), and is also the Bird in this
parable.  &lt;/p&gt;
&lt;p&gt;We use interfaces a lot in Launchpad, and we need to Decorate classes
quite a bit. So, we wrote something to make it easy and open sourced it.
It's called &lt;a href="https://launchpad.net/lazr.delegates"&gt;lazr.delegates&lt;/a&gt;. This
is Stone One, if you like.  &lt;/p&gt;
&lt;p&gt;Stone Two was actually cast first, and is called
&lt;a href="http://twistedmatrix.com/documents/current/api/twisted.python.components.html#proxyForInterface"&gt;twisted.python.components.proxyForInterface&lt;/a&gt;.
It's distributed as a part of Twisted, and solves exactly the same
problem. For those interested, here's the &lt;a href="http://bazaar.launchpad.net/%7Evcs-imports/twisted/main/annotate/head%3A/twisted/python/components.py"&gt;Twisted
implementation&lt;/a&gt;
(scroll to line 320ish) and here's the &lt;a href="http://bazaar.launchpad.net/%7Elaunchpad-pqm/lazr.delegates/devel/annotate/head%3A/src/lazr/delegates/__init__.py"&gt;lazr
implementation&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Both implementations are fairly simple, and yet it is perhaps a shame
that there are two of them. If anyone is at fault, it's me, since I knew
about proxyForInterface and watched lazr.delegate arrive in the
Launchpad tree without even thinking that the two might actually be the
same thing.  &lt;/p&gt;
&lt;p&gt;But I wonder, is there a process bug here? Is there something Launchpad,
Twisted, Zope or Guido could have done to avoid this?&lt;/p&gt;</summary></entry><entry><title>Server reinstalled</title><link href="http://code.mumak.net/2009/02/server-reinstalled.html" rel="alternate"></link><updated>2009-02-21T07:48:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-21:2009/02/server-reinstalled.html</id><summary type="html">&lt;p&gt;Now running a beautiful instance of Ubuntu 8.04 LTS. Different
passwords, no PHP, no Wordpress.&lt;/p&gt;</summary></entry><entry><title>Scheduled Unreliability</title><link href="http://code.mumak.net/2009/02/scheduled-unreliability.html" rel="alternate"></link><updated>2009-02-21T03:03:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-21:2009/02/scheduled-unreliability.html</id><summary type="html">&lt;p&gt;This blog will be available on and off this weekend as I upgrade the
server it's on.&lt;/p&gt;</summary></entry><entry><title>Neat trick</title><link href="http://code.mumak.net/2009/02/neat-trick.html" rel="alternate"></link><updated>2009-02-21T00:11:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-21:2009/02/neat-trick.html</id><summary type="html">&lt;p&gt;In Argentina I hacked up a little command for the 'launchpad' Bazaar
plugin. It's a command line tool to open the Launchpad page for your
branch in your web browser.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;testresources&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;expose&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;271619&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;Opening&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//code.edge.launchpad.net/~jml/testresources/expose-reset-bug-271619 in web browser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... and it works!  &lt;/p&gt;
&lt;p&gt;Available in Bazaar 1.12. Due to an unfortunate oversight, the NEWS file
doesn't mention it.&lt;/p&gt;</summary></entry><entry><title>Things every project needs</title><link href="http://code.mumak.net/2009/02/things-every-project-needs.html" rel="alternate"></link><updated>2009-02-20T06:34:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-20:2009/02/things-every-project-needs.html</id><summary type="html">&lt;p&gt;I'm reviewing my checklists right now. I just came across one that I'd
like some help with. It's called "Things every project needs", and it
currently has this:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TODO system (e.g. specs, trackers, text file, bzr difftodo)&lt;/li&gt;
&lt;li&gt;Version control&lt;/li&gt;
&lt;li&gt;List of dependencies&lt;/li&gt;
&lt;li&gt;One step build&lt;/li&gt;
&lt;li&gt;One step build-and-run-tests&lt;/li&gt;
&lt;li&gt;One step build-and-run  &lt;/li&gt;
&lt;li&gt;One step build-docs (API, testdoc, general docs, sphinx)  &lt;/li&gt;
&lt;li&gt;Version information&lt;/li&gt;
&lt;li&gt;License  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you see the sort of thing I mean. I mean things you have to do
(or at least think about) when starting any software project.  &lt;/p&gt;
&lt;p&gt;Can you think of anything to add?&lt;/p&gt;</summary></entry><entry><title>Everything I ever learned about programming...</title><link href="http://code.mumak.net/2009/02/everything-i-ever-learned-about.html" rel="alternate"></link><updated>2009-02-19T23:19:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-19:2009/02/everything-i-ever-learned-about.html</id><summary type="html">&lt;p&gt;... I learned from &lt;a href="http://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;.[1]  &lt;/p&gt;
&lt;p&gt;Which reminds me, one of the Twisted guns is up for hire. His name is
&lt;a href="http://itamarst.org/resume.html"&gt;Itamar Shtull-Trauring&lt;/a&gt; and he is very
smart, wrote some of the best bits in Twisted and loses gracefully at
&lt;a href="http://www.sjgames.com/munchkin/game/"&gt;Munchkin&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;If you want someone in to review your system, help you design out a
network protocol or provide a thoughtful, independent perspective for
your new application's architecture, you should hire him. Itamar's got
bad RSI, so he can't type much, otherwise I'd be trying to poach him.  &lt;/p&gt;
&lt;p&gt;Note: Itamar still works for &lt;a href="http://www.itasoftware.com/"&gt;ITA
Software&lt;/a&gt;, so it's only short-term
contracting.  &lt;/p&gt;
&lt;p&gt;[1] Well, &lt;a href="http://mitpress.mit.edu/sicp/"&gt;SICP&lt;/a&gt; gets a guernsey too.&lt;/p&gt;</summary></entry><entry><title>Better Cloud</title><link href="http://code.mumak.net/2009/02/better-cloud.html" rel="alternate"></link><updated>2009-02-13T01:30:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-13:2009/02/better-cloud.html</id><summary type="html">&lt;p&gt;The &lt;a href="https://code.edge.launchpad.net/"&gt;Launchpad Code home page&lt;/a&gt; is now
a little bit nicer and a little bit faster.  &lt;/p&gt;
&lt;p&gt;For a while now, the page has had a tag cloud showing some projects that
host branches on Launchpad. The tag cloud is drawn based on the
following rules:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The more branches, the bigger the tag&lt;/li&gt;
&lt;li&gt;The more recent the last commit, the less faded the tag  &lt;/li&gt;
&lt;li&gt;If Launchpad is &lt;span&gt;the&lt;/span&gt; place to go for getting the
    project's code, colour it green. Otherwise, blue.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Up until recently, the home page only showed some projects starting with
'A' -- which is a bit silly. My recent patch changed the query to show
the most branch-y projects on Launchpad. It looks a lot nicer, IMO.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://launchpad.net/%7Ebeuno"&gt;Martin Albisetti&lt;/a&gt; has asked me to
change the colours though. Expect an update soon.&lt;/p&gt;</summary></entry><entry><title>Make your code testable</title><link href="http://code.mumak.net/2009/02/make-your-code-testable.html" rel="alternate"></link><updated>2009-02-05T23:32:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-05:2009/02/make-your-code-testable.html</id><summary type="html">&lt;p&gt;A lot of people struggle with writing unit tests. They sit down with the
noblest of intentions, ready to turn themselves around and be good
little engineers, but then somehow, suddenly, everything goes horribly
wrong.  &lt;/p&gt;
&lt;p&gt;It turns out that it's really hard to write unit tests. When we first
discover this, we generally consider two options:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Give up&lt;/li&gt;
&lt;li&gt;Work hard to write the damn test&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is actually a third way: &lt;span&gt;make the code easier to
test&lt;/span&gt;. Many of the barriers to testing are built from the design
of one's own code. Globals, hard-wired access to resources, poorly
parametrized behaviour and badly encapsulated data can make it a
nightmare to test things.  &lt;/p&gt;
&lt;p&gt;The cool thing is, if you do this, your code base will actually be more
fun and more productive to work with. Your application will start to
look like a set of libraries that build high-level concepts, rather than
like a maze of twisty passages. This is actually why the &lt;a href="http://code.mumak.net/2009/02/bazaar-commands.html"&gt;Bazaar API is
so amazingly good&lt;/a&gt;
-- they've written their code to make it easy to test.  &lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="http://strongdynamic.blogspot.com/"&gt;Cory Dodt&lt;/a&gt; for the idea
for this post.&lt;/p&gt;</summary></entry><entry><title>Bazaar commands</title><link href="http://code.mumak.net/2009/02/bazaar-commands.html" rel="alternate"></link><updated>2009-02-04T21:45:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-04:2009/02/bazaar-commands.html</id><summary type="html">&lt;p&gt;While in Argentina, I got around to doing something that I've wanted to
do for ages: refactor Bazaar's "serve" command. It's been bugging me for
a while, since we actually duplicate some of that code in Launchpad, and
we keep getting bitten by changes to &lt;code&gt;cmd_serve&lt;/code&gt;. There's also another,
deeper reason why I wanted to do it.  &lt;/p&gt;
&lt;p&gt;Bazaar isn't just a version control system, it's also a very good
version control &lt;span&gt;library&lt;/span&gt;. It's very easy to figure out, use
and test. I'm almost tempted to say "beautiful". In any case, if you're
writing a Python library, you should probably copy bzrlib.  &lt;/p&gt;
&lt;p&gt;Except for bzrlib/builtins.py, which is where all of the built-in
commands like "serve" live. For one reason or another, it's full of
massive &lt;code&gt;run()&lt;/code&gt; methods. Many of these methods contain logic that plugin
authors end up copying and pasting — blech.&lt;span&gt;&lt;/span&gt; Hence,
refactoring &lt;code&gt;cmd_serve&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;If you are keen to learn how a version control system works, you could
do a lot worse than dive into bzrlib/builtins.py, figure out what a
particular command is doing, then refactor that command so the code
speaks for itself. There are 64 commands in core Bazaar: get cracking!&lt;/p&gt;</summary></entry><entry><title>Having said that, let me say this...</title><link href="http://code.mumak.net/2009/02/having-said-that-let-me-say-this.html" rel="alternate"></link><updated>2009-02-04T01:39:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-04:2009/02/having-said-that-let-me-say-this.html</id><summary type="html">&lt;p&gt;&lt;a href="http://sethgodin.typepad.com/"&gt;Seth Godin&lt;/a&gt; recently blogged the
&lt;a href="http://sethgodin.typepad.com/seths_blog/2009/02/im-sorry-were-out-of-time.html"&gt;second-most useful piece of
advice&lt;/a&gt;
that technical presenters need to hear.&lt;/p&gt;</summary></entry><entry><title>Launchpad and Bazaar in South America</title><link href="http://code.mumak.net/2009/02/launchpad-and-bazaar-in-south-america.html" rel="alternate"></link><updated>2009-02-03T21:01:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-02-03:2009/02/launchpad-and-bazaar-in-south-america.html</id><summary type="html">&lt;p&gt;Just got back to Australia after a couple of weeks in Brazil and
Argentina.  &lt;/p&gt;
&lt;p&gt;Three big things:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This year, we are going to rock hard on Bazaar.&lt;/li&gt;
&lt;li&gt;We are finally looking seriously at &lt;a href="http://news.launchpad.net/launchpad-performance-week/introducing-launchpad-performance-weeks"&gt;improving Launchpad's
    performance&lt;/a&gt;
    across the site.&lt;/li&gt;
&lt;li&gt;The Code team has a lot to do, and not much time to do it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More later.&lt;/p&gt;</summary></entry><entry><title>Emacs keybinding of (Dvorak) death</title><link href="http://code.mumak.net/2009/01/emacs-keybinding-of-dvorak-death.html" rel="alternate"></link><updated>2009-01-05T01:45:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2009-01-05:2009/01/emacs-keybinding-of-dvorak-death.html</id><summary type="html">&lt;p&gt;From the Emacs help  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C-x C-- runs the command text-scale-adjust, which is an interactive
autoloaded&lt;br /&gt;
Lisp function.  &lt;/p&gt;
&lt;p&gt;It is bound to C-x C-+, C-x C--, C-x C-=, C-x C-0.  &lt;/p&gt;
&lt;p&gt;(text-scale-adjust &amp;amp;optional INC)  &lt;/p&gt;
&lt;p&gt;Increase or decrease the height of the default face in the current
buffer.  &lt;/p&gt;
&lt;p&gt;The actual adjustment made depends on the final component of the&lt;br /&gt;
key-binding used to invoke the command, with all modifiers removed:  &lt;/p&gt;
&lt;p&gt;+, = Increase the default face height by one step&lt;br /&gt;
 - Decrease the default face height by one step&lt;br /&gt;
 0 Reset the default face height to the global default  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C-x C-- is really, really close to C-x C-s on a Dvorak keyboard. If ever
you hit it by accident, hit C-x C-0 to get your Emacs looking right.&lt;/p&gt;</summary></entry><entry><title>Explaining Version Control to Non-Programmers</title><link href="http://code.mumak.net/2008/12/explaining-version-control-to-non.html" rel="alternate"></link><updated>2008-12-15T22:00:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-12-15:2008/12/explaining-version-control-to-non.html</id><summary type="html">&lt;p&gt;&lt;a href="http://life.mumak.net/2008/12/version-control.html"&gt;As I mentioned&lt;/a&gt; on
&lt;a href="http://life.mumak.net/"&gt;my other blog&lt;/a&gt;, I really struggle to explain
version control to non-programmers. In particular, I don't know how to
communicate just how &lt;span&gt;cool&lt;/span&gt; it is.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://randsinrepose.com"&gt;Rands&lt;/a&gt; has a go at it by explaining that it's
all about &lt;a href="http://www.randsinrepose.com/archives/2006/03/23/capturing_context.html"&gt;capturing
context&lt;/a&gt;.
How do you explain Bazaar (or anything other version control) to the
people you meet?&lt;/p&gt;</summary></entry><entry><title>Stacked branches and the new world</title><link href="http://code.mumak.net/2008/12/stacked-branches-and-new-world.html" rel="alternate"></link><updated>2008-12-15T06:54:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-12-15:2008/12/stacked-branches-and-new-world.html</id><summary type="html">&lt;p&gt;A few months ago, we rolled out a version of Launchpad that supports and
encourages &lt;span&gt;stacked branches&lt;/span&gt;. This means medium to large
size projects are be able to use Launchpad for hosting their code. I
wrote this post shortly before the roll-out, but never got around to
blogging it. Hope you enjoy it.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Problem&lt;/span&gt;&lt;br /&gt;
As far as code goes, Launchpad thinks in terms of individual Bazaar
branches. Each of these Bazaar branches stands alone, isolated from
other branches. Further, each of these branches has the full history of
whatever project they are a branch of.  &lt;/p&gt;
&lt;p&gt;That means that every time you push a branch up to Launchpad, you have
to push the &lt;span&gt;entire history&lt;/span&gt; of your project. That's not a
problem for small projects, but for large projects it's simply
unacceptable. It takes well over an hour for me to push up a branch of
Bazaar, for example.  &lt;/p&gt;
&lt;p&gt;On our side, we simply don't have the space to store hundreds of copies
of the full history of every Free Software project in the world.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Shape of the Solution&lt;/span&gt;&lt;br /&gt;
The answer to both of these problems is to share history information
between branches. That way, when you push a new branch, you would only
have to push up the data that's unique to that branch, the changes that
you've made locally. Similarly, we'd only need to store those changes,
rather than another full copy of the history.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Shared Repositories?&lt;/span&gt;&lt;br /&gt;
Experienced users of Bazaar might be wondering why we didn't just use
shared repositories. A repository is like a big bucket full of Bazaar
revisions. A repository can be made a shared repository, and branches
can be made to get their revisions from &lt;span&gt;that&lt;/span&gt; repository,
rather than from their own. This works fine in many circumstances, but
for a public service like Launchpad, it's not good enough.  &lt;/p&gt;
&lt;p&gt;First, people can put poison the bucket. If you can push up a branch,
you can write to the shared repository. If you can write to a shared
repository at all, then you can write to &lt;span&gt;any&lt;/span&gt; revision in
that shared repository. This means malicious users could poison any
repository that they can push to. If we had a shared repository per
project, then malicious users could push up branches that change a
project's history.  &lt;/p&gt;
&lt;p&gt;A shared repository per person, per project is not so bad, but it's not
so good either. In that model, users would have to push up the full
history of a project the first time they contributed a project.
&lt;span&gt;Blech.&lt;/span&gt; The last thing we want to do is penalize someone for
contributing to a new project. Launchpad is supposed to make it easy for
you to get started.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Stacked Branches&lt;/span&gt;&lt;br /&gt;
A stacked branch is a branch that only has a little bit of its own
history. The rest of its history lives in another branch, what we call
the &lt;span&gt;stacked-on branch&lt;/span&gt; (I don't like the name, but all the
better ones are taken). The Bazaar team has been working on making
Bazaar support stacked branches for much of this year.  &lt;/p&gt;
&lt;p&gt;Stacked branches are exactly what Launchpad needs to get you pushing
your branches up quickly. When you push up a stacked branch, you only
need write access to the repository of &lt;span&gt;that branch&lt;/span&gt;, you
only need to read the stacked-on branch. This eliminates the poisoning
problem, and allows revisions to be shared safely between branches.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;How We Do It&lt;span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;
For each project with a development focus (Launchpad's jargon for an
official trunk), Launchpad has a policy file that tells Bazaar that new
branches should be stacked on that development focus.  &lt;/p&gt;
&lt;p&gt;So, you make a branch from trunk, do a bit of hacking locally, commit a
few revisions and push it up to Launchpad as your own branch, say
lp:\~jml/tribunal/awesome-new-feature. When you push, Bazaar asks
Launchpad where it should stack the branch, and Launchpad says
lp:\~jml/tribunal/trunk. Bazaar then pushes only the new revisions I've
added to my "awesome-new-feature" branch.  &lt;/p&gt;
&lt;p&gt;We do a lot of stuff behind the scenes to make sure the branches work
over HTTP, bzr+ssh, SFTP and to make sure that mirrored branches work
just as well as hosted branches and so on. I hope that most of this is
invisible to you, and that you simply notice that pushing big branches
to Launchpad suddenly got a lot faster.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;The Future&lt;/span&gt;&lt;br /&gt;
By making it possible to quickly push big branches to Launchpad, we've
entered a new era. Projects like Bazaar and Launchpad itself can start
actually hosting their branches on Launchpad. For other projects (like
Twisted, Python or even GNOME), hosting branches on Launchpad is now an
option that can be seriously considered.  &lt;/p&gt;
&lt;p&gt;For my part, stacked branches are already changing the way I work. I'm
now using the product that I helped build each and every day as part of
my job. Further, my colleagues and my boss are also using it. This
quickly exposes rough edges and raises obvious ideas for improvement in
the rest of the Code site. It also helps me see which bugs are the
really important ones.  &lt;/p&gt;
&lt;p&gt;More importantly, it's reminded me that Launchpad actually is pretty
cool. I'm using it more, and looking forward to the day when I can
really, genuinely say that Launchpad is a joy to use.&lt;/p&gt;</summary></entry><entry><title>Anonymized IRC?</title><link href="http://code.mumak.net/2008/12/anonymized-irc.html" rel="alternate"></link><updated>2008-12-14T04:55:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-12-14:2008/12/anonymized-irc.html</id><summary type="html">&lt;p&gt;&lt;span&gt;Crazy idea: a chat server which anonymized the nicks of all users,
changing them around at frequent intervals. The server would require
authentication, but the results of that authentication are kept secret
from other users.  &lt;/p&gt;
&lt;p&gt;Would it be interesting? Would it work?&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;</summary></entry><entry><title>Everything You Always Wanted to Know About Twisted</title><link href="http://code.mumak.net/2008/12/everything-you-always-wanted-to-know.html" rel="alternate"></link><updated>2008-12-14T04:28:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-12-14:2008/12/everything-you-always-wanted-to-know.html</id><summary type="html">&lt;p&gt;A couple of months ago, all of the Launchpad developers met in London to
have an Epic. Some of us wrote technical papers which we presented at
the conference.  &lt;/p&gt;
&lt;p&gt;My paper was an &lt;a href="http://mumak.net/stuff/twisted-intro.html"&gt;introduction to
Twisted&lt;/a&gt;, co-written with
Michael Hudson and aimed specifically at the Launchpad developers, who
are often wary of Twisted's magical powers and raw animal charisma. The
paper got published in a neat booklet (thanks Matt!), and the talk went
fairly well. Since the paper is actually a fairly generic introduction,
I thought it might be worth in the &lt;a href="http://mumak.net/stuff"&gt;Stuff and
Nonsense&lt;/a&gt; section.  &lt;/p&gt;
&lt;p&gt;It assumes that you know how to write Python code, that you know roughly
what an event loop is, and that you are comfortable with network
programming in general. When you are finished, you should know enough
about Twisted to start investigating how you can use it to solve your
specific problems.  &lt;/p&gt;
&lt;p&gt;It doesn't cover Failures or returning Deferreds from callbacks or
errbacks, which is a fairly serious gap. If you think the paper is good
and you'd like to see these gaps filled, email me, or comment on this
post. Otherwise, let me know what you think!&lt;/p&gt;</summary></entry><entry><title>Repost</title><link href="http://code.mumak.net/2008/12/repost.html" rel="alternate"></link><updated>2008-12-14T03:27:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-12-14:2008/12/repost.html</id><summary type="html">&lt;p&gt;I've reposted my old &lt;span&gt;&lt;a href="http://mumak.net/stuff/twisted-disconnect.html"&gt;How to disconnect in Twisted,
really&lt;/a&gt;&lt;/span&gt; article
to the &lt;a href="http://mumak.net/stuff"&gt;Stuff and Nonsense&lt;/a&gt; section of my
website. Enjoy.&lt;/p&gt;</summary></entry><entry><title>Doctests</title><link href="http://code.mumak.net/2008/11/doctests.html" rel="alternate"></link><updated>2008-11-21T00:29:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-11-21:2008/11/doctests.html</id><summary type="html">&lt;p&gt;&lt;a href="http://andrew.puzzling.org/"&gt;Andrew&lt;/a&gt; has written about why &lt;a href="http://andrew.puzzling.org/diary/2008/October/23/narrative-tests"&gt;narrative
tests make lousy unit
tests&lt;/a&gt;
and &lt;a href="http://andrew.puzzling.org/diary/2008/October/24/more-doctest-problems"&gt;problems with the doctest
format&lt;/a&gt;.
In summary:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests work better if each one has a name that identifies it.&lt;/li&gt;
&lt;li&gt;Specific, isolated tests give clearer failures, and are easier to
    debug.&lt;/li&gt;
&lt;li&gt;Specific, narrow tests are better at communicating intended
    behaviour.&lt;/li&gt;
&lt;li&gt;Comparing two objects in doctests is hard.&lt;/li&gt;
&lt;li&gt;It's hard to get an overview of what's tested in a particular
    doctest file.&lt;/li&gt;
&lt;li&gt;Doctest is a mini-language that's worse than Python. It's got
    corner-cases and outright bugs.&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Tests are code, and code works better in .py files than .txt
    files.&lt;/span&gt; In particular:&lt;ul&gt;
&lt;li&gt;Python has better tool support. Syntax highlighting, code
    folding, pyflakes, 2to3 etc.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It's easier to build test infrastructure in Python.&lt;ul&gt;
&lt;li&gt;Test code benefits from refactoring as much as regular code, but
    doctests make it hard to do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, in the end, it comes down to this:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is just as possible to write incomprehensible tests using doctest
as it is using &lt;code&gt;TestCase&lt;/code&gt; classes with test methods.  &lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Review Thoughts</title><link href="http://code.mumak.net/2008/11/review-thoughts.html" rel="alternate"></link><updated>2008-11-15T02:09:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-11-15:2008/11/review-thoughts.html</id><summary type="html">&lt;p&gt;So, I think I've figured out what it is I dislike about Twisted's review
process: reviews aren't thorough enough.  &lt;/p&gt;
&lt;p&gt;This sounds a little weird, since it's actually &lt;span&gt;really hard&lt;/span&gt;
to get a patch into Twisted: it almost always takes me at least three
round trips just to get something in. But I think the number of
round-trips is actually a symptom of this lack of completeness.  &lt;/p&gt;
&lt;p&gt;In Launchpad, reviews are done as in-line replies to diffs. A reviewer
is obliged to note each chunk of code that needs to be changed, along
with exactly what needs to be changed. In Twisted, reviews are done as
Trac comments and generally provided as bullet points. In Launchpad, a
reviewer would say, "You need to change foo_bar to fooBar, because our
coding standards require camel case". In Twisted, a reviewer might say
"There are some naming convention issues".  &lt;/p&gt;
&lt;p&gt;This obviously varies between reviewers and even between reviews, but I
think that the difference in technologies encourages differences in
review style.  &lt;/p&gt;
&lt;p&gt;As a patch submitter, I find the in-line-comments-on-diff form much more
helpful. It provides me with a convenient todo list, and it lets me know
that the reviewer has looked through and tried to understand all of my
code. It essentially turns the review into a series of mini bug reports
with "observed, expected, how to reproduce" sections (where "how to
reproduce" is "where to find").  &lt;/p&gt;
&lt;p&gt;I also like it as a reviewer, since it means less typing.&lt;/p&gt;</summary></entry><entry><title>Papers and Talks</title><link href="http://code.mumak.net/2008/11/papers-and-talks.html" rel="alternate"></link><updated>2008-11-01T11:18:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-11-01:2008/11/papers-and-talks.html</id><summary type="html">&lt;p&gt;At the Launchpad Epic, I presented a paper on Twisted for the other
Launchpadders. I think that the paper itself is a good introduction to
how Twisted works and why, and I'll be publishing it here once I get a
chance to format it for the web.  &lt;/p&gt;
&lt;p&gt;I did two lightning talks that might be interesting to readers. One was
on &lt;a href="https://launchpad.net/testresources"&gt;testresources&lt;/a&gt; and the other
was on how to hack like an Evil Overlord. I think I'll try present the
second one at OSDC.&lt;/p&gt;</summary></entry><entry><title>Lange's Law</title><link href="http://code.mumak.net/2008/10/langes-law.html" rel="alternate"></link><updated>2008-10-30T10:40:00+00:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-30:2008/10/langes-law.html</id><summary type="html">&lt;p&gt;"With threads, all things are possible."&lt;/p&gt;</summary></entry><entry><title>Stacked branches in Launchpad</title><link href="http://code.mumak.net/2008/10/stacked-branches-in-launchpad.html" rel="alternate"></link><updated>2008-10-16T09:11:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-16:2008/10/stacked-branches-in-launchpad.html</id><summary type="html">&lt;p&gt;Via the medium of the charming &lt;a href="http://www.understated.co.uk/"&gt;Matthew
Revell&lt;/a&gt;, I've posted about &lt;a href="http://news.launchpad.net/cool-new-stuff/stacked-branches-holding-post"&gt;stacked
branches&lt;/a&gt;
on the Launchpad News blog. I'm so glad this is finally out.&lt;/p&gt;</summary></entry><entry><title>Super Happy?</title><link href="http://code.mumak.net/2008/10/super-happy.html" rel="alternate"></link><updated>2008-10-07T01:27:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-07:2008/10/super-happy.html</id><summary type="html">&lt;p&gt;Does Sydney have a Super Happy Dev House or Hacking Society or
&lt;span&gt;anything&lt;/span&gt; where a bunch of busy programmers can sit down
together and &lt;span&gt;hack&lt;/span&gt;?  &lt;/p&gt;
&lt;p&gt;If not, could you please organize one for me — that'd be great.&lt;/p&gt;</summary></entry><entry><title>More bzr hacking</title><link href="http://code.mumak.net/2008/10/more-bzr-hacking.html" rel="alternate"></link><updated>2008-10-06T06:39:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-06:2008/10/more-bzr-hacking.html</id><summary type="html">&lt;p&gt;I've extended bzr-establish to give it a new command: hack.  &lt;/p&gt;
&lt;p&gt;'bzr hack lp:foo' will create a repository with working trees called
'foo' and fetch the lp:foo branch into that repository.&lt;br /&gt;
'bzr hack --repository \~/repos lp:foo' will create a repository in
'\~/repos/foo', a working tree area in 'foo', fetch the branch into the
repo and make a light-weight checkout in the working tree area.  &lt;/p&gt;
&lt;p&gt;You can also specify a non-Launchpad branch, e.g. 'bzr hack
http://example.com/some/branch/trunk foo'. This will make a repository
called 'foo', put the branch in there and... well, you get the picture.  &lt;/p&gt;
&lt;p&gt;The plugin lives at lp:\~jml/+junk/bzr-establish. It's buggy, not
particularly well tested and rough as guts. Still, it's worth a play.&lt;/p&gt;</summary></entry><entry><title>Bazaar hacking</title><link href="http://code.mumak.net/2008/10/bazaar-hacking.html" rel="alternate"></link><updated>2008-10-04T13:05:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-04:2008/10/bazaar-hacking.html</id><summary type="html">&lt;p&gt;I spent a little bit of time mucking around with some Bazaar plugin
ideas I've had.  &lt;/p&gt;
&lt;p&gt;The first is a command that switches from "branches and trees together
inside a shared repository" to "treeless repository with lightweight
checkouts". I ran it against a couple of my local repositories and it
works out rather nicely. If you are thinking of using cbranch and the
like, you should have a look at this plugin. If you don't know why it's
a good idea, well, umm, maybe one of the &lt;a href="http://planet.bazaar-vcs.org"&gt;other people on the
Planet&lt;/a&gt; will blog an answer.  &lt;/p&gt;
&lt;p&gt;The second adds 'bzr new' to the command list.&lt;br /&gt;
\$ bzr new awesomer  &lt;/p&gt;
&lt;p&gt;will create a new shared repository called 'awesomer' and a new branch
in that repository called 'trunk'. If you think trunk is a terrible
name, you can do:&lt;br /&gt;
\$ bzr new awesomer devel  &lt;/p&gt;
&lt;p&gt;If you are like Tim or Aaron, you'll want your repository and branches
separated from your working tree:&lt;br /&gt;
\$ bzr --repository \~/repos/foo foo devel  &lt;/p&gt;
&lt;p&gt;I'd like to figure out a nice way of letting users specify a default
directory for repositories to go into, for those people who always use
the split model.  &lt;/p&gt;
&lt;p&gt;The plugin with both of these commands can be found at
https://code.edge.launchpad.net/\~jml/+junk/bzr-establish. As the "junk"
in the name indicates, it's really rough code.  &lt;/p&gt;
&lt;p&gt;If either of these features sound like good ideas to you, let me know!&lt;/p&gt;</summary></entry><entry><title>pyunit3k renamed to testtools</title><link href="http://code.mumak.net/2008/10/pyunit3k-renamed-to-testtools.html" rel="alternate"></link><updated>2008-10-04T04:04:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-04:2008/10/pyunit3k-renamed-to-testtools.html</id><summary type="html">&lt;p&gt;After thinking and talking about it for ages, I've renamed 'pyunit3k' to
'testtools'. You can now find it at https://launchpad.net/testtools or
get your copy by running 'bzr branch lp:testtools'.  &lt;/p&gt;
&lt;p&gt;This is the only major API change I plan to do without introducing some
sort of formal release process. The code as it stands is highly stable,
well tested and in use on production systems. Download it, use it, send
me patches.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Addendum&lt;/span&gt;&lt;br /&gt;
I forgot to mention that ITestResult has been removed, and thus the
undocumented dependency on zope.interfaces. If this matters to you,
please let me know.&lt;/p&gt;</summary></entry><entry><title>LCA 2008 Conference Report</title><link href="http://code.mumak.net/2008/10/lca-2008-conference-report.html" rel="alternate"></link><updated>2008-10-03T10:55:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-03:2008/10/lca-2008-conference-report.html</id><summary type="html">&lt;p&gt;Yeah, yeah, I know it's a bit late. I found this while emptying out my
Drafts folder and thought you guys might like it.  &lt;/p&gt;
&lt;p&gt;It's very much a personal, in-the-moment, opinionated account. I've only
edited it for formatting.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Sunday, January 27&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Arrived in Melbourne. Good. Next step, dump bags and get beer. Bump into
skinny guys with puns on their T-shirts and hunted expressions. Follow
them to pub. Rusty is buying free drinks for first-timers. I take two.  &lt;/p&gt;
&lt;p&gt;Go to Lygon Street. Eat pizza.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Monday, January 28&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Public holiday today. No coffee for sale on campus. The buzz so far is
that everyone loves Ubuntu, or at least takes it for granted — which can
sometimes pass for love.  &lt;/p&gt;
&lt;p&gt;The chatter about Bazaar is more interesting. Everyone says
"Bee-Zed-Ahh" and lists it along with Git and Mercurial. When I talk to
people, they don't seem to really care about VCS, they just fall in
whatever their project uses. Those who have used DVCS talk about "modern
version control" (distributed) and "legacy version control" (CVS, SVN).
Those who haven't aren't even aware of how much DVCS can help:  &lt;/p&gt;
&lt;p&gt;jml: [[ something about branches ]]&lt;br /&gt;
other_guy: yeah, I know what branches are.&lt;br /&gt;
jml: but we make a new branch for every single bug fix.&lt;br /&gt;
other_guy: what? how can you do that? isn't that an pain in the arse?&lt;br /&gt;
* jml takes other_guy aside and quietly explains.  &lt;/p&gt;
&lt;p&gt;The guy who talked about securing code — making sure the stuff you
release is the stuff you wrote — knew about Bazaar's GPG revision
signing, but didn't like it. I reckon there's some nice stuff we could
do here.  &lt;/p&gt;
&lt;p&gt;At the Debian miniconf, I sat down and listened to someone explain how
to use Git to make Debian packages. The speaker kept saying "... because
Git is stupid" and then showed us a diagram that had more lines than a
telephone exchange.  &lt;/p&gt;
&lt;p&gt;He also did an interactive demo. Before then, I hadn't seen git being
used. It's not a friendly application. I mentioned this to some people
on the way out and got answers that were too complex for a hallway.
Bazaar rocks, we just need to get people to &lt;span&gt;use&lt;/span&gt; it.  &lt;/p&gt;
&lt;p&gt;Went to the OpenSSH talk. It was packed, and the content was
interesting, strong and a little dry. Got some ideas for improving Conch
(the SSH server that Launchpad uses for codehosting).  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Tuesday, January 29&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;At the Gnome mini conf, trying to get a leg up into contributing. My
grand aim is to get a calendar on my desktop that is as beautiful and
pleasurable as iCal.  &lt;/p&gt;
&lt;p&gt;It seems that lots of others share my desire. I ended up chatting to Rob
Bradford from Opened Hand and a couple of other Gnome guys — it sounds
like it might be approaching possible.  &lt;/p&gt;
&lt;p&gt;Found my phone charger.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Wednesday, January 30&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Bruce Schneier keynoted. The talk had a few ideas but was light on
point. The tutorial on hardening Linux apps was cancelled, and I'm now
sitting here while Russell Coker talks about SELinux.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Thursday, January 31&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Tired and cranky. Decide to do some hacking.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Friday, February 1&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;It's 6:45pm now and all I can think about is signing off and zoning out.
Lots of cool talks today.  &lt;/p&gt;
&lt;p&gt;During the Speaker's Panel, someone asked "What was your favourite thing
that happened in Open Source last year?". One person put up their hand
and said "git".&lt;/p&gt;</summary></entry><entry><title>testresources overhaul</title><link href="http://code.mumak.net/2008/10/testresources-overhaul.html" rel="alternate"></link><updated>2008-10-02T12:34:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-10-02:2008/10/testresources-overhaul.html</id><summary type="html">&lt;p&gt;&lt;a href="https://launchpad.net/%7Elifeless"&gt;Rob&lt;/a&gt; has landed my overhaul of
&lt;a href="https://launchpad.net/testresources"&gt;testresources&lt;/a&gt;. testresources is
now a lot cleaner, with more tests, more documentation and fewer
classmethods. If you've looked at it before and found it a bit
confusing, now is a great time to have a fresh look.  &lt;/p&gt;
&lt;p&gt;The
&lt;a href="http://bazaar.launchpad.net/%7Elifeless/testresources/trunk/annotate/18?file_id=news-20080828110236-ku9h8n676vfwcwad-1"&gt;NEWS&lt;/a&gt;
file,
&lt;a href="http://bazaar.launchpad.net/%7Elifeless/testresources/trunk/annotate/18?file_id=README-20050904000703-ba3978635caa34f7"&gt;README&lt;/a&gt;
or
&lt;a href="http://bazaar.launchpad.net/%7Elifeless/testresources/trunk/annotate/18?file_id=todo-20080817122443-kaikqdedcg57lr4v-1"&gt;TODO&lt;/a&gt;
are all great places to start. Or, you could just download the
&lt;a href="https://code.edge.launchpad.net/%7Elifeless/testresources/trunk"&gt;branch&lt;/a&gt;
from Launchpad. 'bzr branch lp:testresources' should do the trick.  &lt;/p&gt;
&lt;p&gt;There's still so much I want to do, but this has been the big step:
getting a firm conceptual base to work from.&lt;/p&gt;</summary></entry><entry><title>Flow, Interruptions and Gold-Titanium Alloys</title><link href="http://code.mumak.net/2008/08/flow-interruptions-and-gold-titanium.html" rel="alternate"></link><updated>2008-08-18T03:52:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-08-18:2008/08/flow-interruptions-and-gold-titanium.html</id><summary type="html">&lt;p&gt;As I mentioned earlier, I've just had a very productive and fun weekend
of hacking on &lt;a href="https://launchpad.net/testresources"&gt;testresources&lt;/a&gt;. But
why was it so good?  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Fast Commits&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;Because I was working offline using Bazaar, I could make commits to
testresources and they'd be done before I could Alt-Tab back to Emacs.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Fast Tests&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;It takes about 0.15 seconds to run the test suite. This meant I was
running it all the time, which in turn meant that I was totally certain
about whether the code worked all the time.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;Clarity of Purpose&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;I knew where I was and where I wanted to go.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;No Rabbit Holes&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;The testresources code base is small enough that it is nearly impossible
to get distracted by &lt;span&gt;other&lt;/span&gt; systemic defects. If there is
such a defect, it's probably the one that you're working on right now.
This might be another way of saying...  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;No Blockers&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;I wasn't waiting on anyone to do anything. There weren't any other bugs
that needed to get fixed before I could continue.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;No Integration&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;The system is about as self-contained as it gets. No signals,
subprocesses or sockets: just Python. The only dependency is pyunit3k,
which is small, robust, well-tested and also pretty darn
self-contained.  &lt;/p&gt;
&lt;p&gt;&lt;span&gt;No Interruptions&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;I wasn't answering questions on IRC, taking Skype calls, handling
incoming email, doing the washing, checking Facebook, catching up on my
blogs, watching a film or wrestling a bear. "Fast Commits" and "Fast
Tests" probably fall into this category too.  &lt;/p&gt;
&lt;p&gt;In other words:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is nothing except this. There's no art opening, no charity,
nothing to sign. There's the next mission, and nothing else.&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>testresources: fresh blood</title><link href="http://code.mumak.net/2008/08/testresources-fresh-blood.html" rel="alternate"></link><updated>2008-08-18T01:50:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-08-18:2008/08/testresources-fresh-blood.html</id><summary type="html">&lt;p&gt;Last weekend I spent a bunch of timing hacking on
&lt;a href="https://launchpad.net/testresources"&gt;testresources&lt;/a&gt; with
&lt;a href="http://robertcollins.net/"&gt;Rob&lt;/a&gt; over at
&lt;a href="https://launchpad.net/%7Eraof"&gt;Chris&lt;/a&gt;'s place. testresources is an
extension to unittest that allows tests to specify the resources they
use declaratively, so that these resources can be cleanly shared between
tests. On Saturday, we talked a bit about direction and decided on some
goals. On Sunday, &lt;a href="https://code.launchpad.net/%7Ejml/testresources/tests-meaning-cleanup/+merge/767"&gt;I got
busy&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The idea isn't particularly new: zope.testing has had "layers" for a
long time. The key differences between testresources and Zope layers
are:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use more than one TestResource. You can only use one layer.
    Allowing tests to specify many resources makes it easier to use only
    the resources that you need, which in turn makes for a faster test
    suite.  &lt;/li&gt;
&lt;li&gt;A test that uses testresources can be used independently of other
    testresources machinery. With layers, you pretty much need the whole
    shebang. This means that you can use testresources with trial, bzr,
    nose, tribunal or unittest.TextTestRunner.  &lt;/li&gt;
&lt;li&gt;Layers have magical inheritance stuff. testresources has no magic.&lt;/li&gt;
&lt;li&gt;Layers do some work in subprocesses to accommodate some setUps that
    can have no tearDown. testresources doesn't know what a process is.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, I'm mainly familiar with layers from Zope 3.2—they may have
changed since then.  &lt;/p&gt;
&lt;p&gt;testresources itself is somewhat old. Rob hacked up the first version
about three years ago and little has happened to it since. I've always
agreed with the approach, but have also had a few qualms about
implementation details that made me reluctant to use it or to recommend
it. Now, it's well on its way to being something that I can trust and
perhaps, love.  &lt;/p&gt;
&lt;p&gt;If you are interested, check out &lt;a href="https://code.launchpad.net/%7Ejml/testresources/tests-meaning-cleanup"&gt;my
branch&lt;/a&gt;
or at least flick through the
&lt;a href="http://bazaar.launchpad.net/%7Ejml/testresources/tests-meaning-cleanup/annotate/77?file_id=todo-20080817122443-kaikqdedcg57lr4v-1"&gt;TODO&lt;/a&gt;
file.&lt;/p&gt;</summary></entry><entry><title>Cool Launchpad/Bazaar hack</title><link href="http://code.mumak.net/2008/07/cool-launchpadbazaar-hack.html" rel="alternate"></link><updated>2008-07-25T05:52:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-25:2008/07/cool-launchpadbazaar-hack.html</id><summary type="html">&lt;p&gt;If you push a lot of Bazaar branches to Launchpad, you might want to add
something like this to your .bazaar/locations.conf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="n"&gt;public_branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="n"&gt;jmlpublic_branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appendpathpush_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="n"&gt;jmlpush_location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;policy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appendpath&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once it's there, 'bzr push' will Just Work... as long as you want it to
do something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rhino&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyunit3k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunkjml&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;rhino&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyunit3k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;pushUsing&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="n"&gt;jml&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pyunit3k&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunkNo&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;revisions&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if I've got a branch in &lt;code&gt;~/Code/&amp;lt;project-name&amp;gt;/&amp;lt;branch-name&amp;gt;&lt;/code&gt;, it'll
be published at
&lt;code&gt;https://launchpad.net/~jml/&amp;lt;project-name&amp;gt;/&amp;lt;branch-name&amp;gt;&lt;/code&gt;. This is only
a default, of course: you can override it for a given branch by doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;bzr&lt;/span&gt; &lt;span class="nb"&gt;push&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;remember&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;new_location&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you can override it for a bunch of branches by hacking
locations.conf.  &lt;/p&gt;
&lt;p&gt;Neat huh?&lt;/p&gt;</summary></entry><entry><title>I Love Data</title><link href="http://code.mumak.net/2008/07/i-love-data.html" rel="alternate"></link><updated>2008-07-07T08:22:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-07:2008/07/i-love-data.html</id><summary type="html">&lt;p&gt;At work, we recently started to graph the time it takes to access a
branch in Launchpad via SSH, both on our staging and production
servers.  &lt;/p&gt;
&lt;p&gt;I love this so much. Having this data is &lt;span&gt;liberating&lt;/span&gt;. It's
like turning on a light in a dark room: suddenly I can go from
uncertain, careful, hesitant steps to bold, confident strides.  &lt;/p&gt;
&lt;p&gt;In fact, the metaphor stretches further. This new light has revealed
objects of interest (that is, spikes in the time taken) that I wasn't
aware of before. I need to know how long these spikes last, how they
correlate with load on the system and so forth. Soon there'll be more
graphs, and I'll be able to correlate them and analyze them and suck on
their delicious, numerical marrow (the light metaphor long abandoned).  &lt;/p&gt;
&lt;p&gt;Regardless of whether it's liberating illumination or nourishing,
savoury meat, this new graph makes me wonder why I don't chart other
things I care about. Having such graphs would help me see the
&lt;span&gt;impact&lt;/span&gt; of my actions. I could chart things like my bank
balance, my waistline or the number of Latin words I learned this week.
Then I could answer questions like "do I spend more on Tuesdays?" or
"can I afford this iPod/cake/gerund?". This is important, because when I
am tempted with a sleek/delicious/perplexing iPod/cake/gerund, I fall
back on my own judgment. I think it's time to confess, dear reader, that
my own judgment isn't very good. And yet I continue to trust it.  &lt;/p&gt;
&lt;p&gt;The reason I don't have such graphs is that they are inconvenient to
maintain. A graph of branch access times is &lt;span&gt;easy&lt;/span&gt;. All you
need to do is describe how to get the measurement, and then do a bit of
once-off set up. If you want to graph your body weight, you need to get
on the scales at a fixed time and then look at the dial and adjust for
parallax and then write a number down somewhere and maybe note down
whether this is before or after a meal and then take the number and then
add it to a spreadsheet. Most online banking sites I've seen are even
&lt;span&gt;less&lt;/span&gt; convenient than this.  &lt;/p&gt;
&lt;p&gt;Getting data on life is hard, but for programming it's easy. What things
do you care about on your project? Features, user experience, how fast
bugs get fixed? Can you quantify these things? Can you make a pretty
picture out of it? If so, do it now! Post your answers here, set up
something like&lt;span&gt;&lt;/span&gt; &lt;a href="http://cricket.sourceforge.net/"&gt;Cricket&lt;/a&gt;
and then profit!  &lt;/p&gt;
&lt;p&gt;P.S. I can't believe I got to the end of this post without saying how
awesome the Canonical sysadmins are. Let me correct that now. The
Canonical sysadmins are heck of awesome. They could &lt;a href="http://cdn-www.i-am-bored.com/media/95709_mordoranim8.gif"&gt;simply walk into
Mortor&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Heartbeats and Sails</title><link href="http://code.mumak.net/2008/07/heartbeats-and-sails.html" rel="alternate"></link><updated>2008-07-05T12:02:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/heartbeats-and-sails.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.markshuttleworth.com/archives/125"&gt;Mark Shuttleworth:&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What’s good enough performance? Well, I like to think in terms of
“heartbeat time”. If the major operations which I have to do regularly
(several times in an hour) take less than a heartbeat, then I don’t
ever feel like I’m waiting. Things which happen 3-5 times in a day can
take a bit longer, up to a minute, and those fit with regular
workbreaks that I would take anyhow to clear my head for the next
phase of work, or rest my aching fingers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Take this rule of thumb and apply it to unit tests:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tests for whatever chunk of code you are working on should take
    "less than a heartbeat".&lt;/li&gt;
&lt;li&gt;Your &lt;em&gt;entire&lt;/em&gt; testing suite (that you run 3-5 times in a day,
    right?) can take longer to run, up to a minute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Authors of tests and testing frameworks, there's your challenge.  &lt;/p&gt;
&lt;p&gt;Tests that take too long to run just won't get run. Programmers will
postpone running the suite until the last possible moment. When using
something like &lt;a href="https://launchpad.net/pqm"&gt;PQM&lt;/a&gt; or
&lt;a href="http://buildbot.net"&gt;Buildbot&lt;/a&gt;, this can be disastrous. Other
developers might have to wait hours for their code to land on trunk.  &lt;/p&gt;
&lt;p&gt;Gerard Mezsaros's new book, &lt;a href="http://xunitpatterns.com/"&gt;&lt;em&gt;xUnit Test
Patterns&lt;/em&gt;&lt;/a&gt; has some good ideas about what to
do and what &lt;em&gt;not&lt;/em&gt; to do to make your tests run in a couple of
heartbeats.&lt;/p&gt;</summary><category term="Testing"></category><category term="Hacking"></category></entry><entry><title>Tired Hippo</title><link href="http://code.mumak.net/2008/07/tired-hippo.html" rel="alternate"></link><updated>2008-07-05T12:01:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/tired-hippo.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Chronomancy... is generally a fictional and sensational school of
magic. Although the school is based on quantum physics and certain
scientific theories, there is no concrete evidence of the perfected
use of time manipulation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thank you Wikipedia.&lt;/p&gt;</summary></entry><entry><title>7</title><link href="http://code.mumak.net/2008/07/7.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/7.html</id><summary type="html">&lt;p&gt;My headphones broke and I'm chasing down an erratic test failure with no
real leads.  &lt;/p&gt;
&lt;p&gt;And yet Prince stands:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All 7 and well watch them fall&lt;br /&gt;
They stand in the way of love&lt;br /&gt;
And we will smoke them all&lt;br /&gt;
With an intellect and a savoir-faire&lt;br /&gt;
No one in the whole universe&lt;br /&gt;
Will ever compare&lt;br /&gt;
I am yours now and u are mine&lt;br /&gt;
And together well love through&lt;br /&gt;
All space and time, so dont cry&lt;br /&gt;
One day all 7 will die&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Uncategorized"></category></entry><entry><title>The Economist Index</title><link href="http://code.mumak.net/2008/07/economist-index_10.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/economist-index_10.html</id><summary type="html">&lt;p&gt;&lt;em&gt;The Economist&lt;/em&gt; occasionally publishes a "Big Mac Index" — how much the
world's favorite "burger" costs in each country, translated into a
common currency.  &lt;/p&gt;
&lt;p&gt;Why they don't publish an index of how much an issue of the Economist
costs?  All of my issues have the price of the newspaper in lots of
Asia-Pacific currencies. A small sample:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Australia, 9.39855 USD&lt;/li&gt;
&lt;li&gt;Cambodia, 6.00 USD&lt;/li&gt;
&lt;li&gt;China, 10.43655 USD&lt;/li&gt;
&lt;li&gt;Hong Kong, 7.6917 USD&lt;/li&gt;
&lt;li&gt;India, 5.0522 USD&lt;/li&gt;
&lt;li&gt;Japan, 10.70535 USD&lt;/li&gt;
&lt;li&gt;New Zealand, 8.6669 USD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Can anyone tell me why the price varies so much?&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Five Years</title><link href="http://code.mumak.net/2008/07/five-years.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/five-years.html</id><summary type="html">&lt;p&gt;That's not quite how long it took &lt;a href="glyf.livejournal.com"&gt;Glyph&lt;/a&gt; to write
a post explaining what he meant when he told me that &lt;a href="http://glyf.livejournal.com/72505.html"&gt;xUnit should use
the visitor pattern instead of the composite
pattern&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I'm going to write a more detailed response later, God willing. I just
wanted to flag the post and say thanks to Glyph for finally posting it —
the &lt;a href="http://mumak.net/2007/08/20/let-the-beat-drop/"&gt;hassling&lt;/a&gt; must have
worked.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Let the Beat Drop</title><link href="http://code.mumak.net/2008/07/let-beat-drop.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/let-beat-drop.html</id><summary type="html">&lt;p&gt;Didn't get around to posting last weekend, sorry. Next weekend I'll be
at a conference in the north of Tasmania, so no post then either.  &lt;/p&gt;
&lt;p&gt;Things in the works:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automated testing as a community builder&lt;/li&gt;
&lt;li&gt;Asynchronous functions&lt;/li&gt;
&lt;li&gt;Asynchronous development methodologies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, &lt;a href="http://glyf.livejournal.com"&gt;glyph&lt;/a&gt; thinks that xUnit sucks, but
hasn't bothered to explain why. So I want you to:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tell me why xUnit sucks&lt;/li&gt;
&lt;li&gt;Hassle glyph until he does 1.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Living for the City</title><link href="http://code.mumak.net/2008/07/living-for-city.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/living-for-city.html</id><summary type="html">&lt;p&gt;Isn't talking shop &lt;em&gt;fun&lt;/em&gt;? I know there's more to the world than
computers and programming and blah blah blah. Sometimes photography, the
election, real estate and the rediscovery of seventies pop music need to
be set aside to make way for a serious, meaty discussion on &lt;a href="http://xunitpatterns.com/Creation%20Method.html"&gt;anonymous
creation methods&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I've been up in Sydney for a couple of weeks, working with the other
Canonical guys. I hadn't realised how much I missed working with other
hackers &lt;em&gt;in the same room&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;Sydney has &lt;a href="http://www.camposcoffee.com/"&gt;good things besides
programmers&lt;/a&gt;, of course.  &lt;/p&gt;
&lt;p&gt;Not exactly sure when I'll be moving, but it'll happen eventually.&lt;/p&gt;</summary><category term="Personal"></category></entry><entry><title>Registration disabled</title><link href="http://code.mumak.net/2008/07/registration-disabled.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/registration-disabled.html</id><summary type="html">&lt;p&gt;You don't need to register to comment any more.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>That's Not Me</title><link href="http://code.mumak.net/2008/07/that-not-me.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/that-not-me.html</id><summary type="html">&lt;p&gt;This blog started life as "Petty Pace". Blech. Too wanky and too quiet.
"awesome radtastic ninjacore" is a stop-gap measure.  &lt;/p&gt;
&lt;p&gt;What do you reckon should be the name for this blog?&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Three-ways on Pidgin?</title><link href="http://code.mumak.net/2008/07/three-ways-on-pidgin.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/three-ways-on-pidgin.html</id><summary type="html">&lt;p&gt;Dear Lazyweb,  &lt;/p&gt;
&lt;p&gt;How do I initiate a three-way chat with Pidgin 2.2.1?  &lt;/p&gt;
&lt;p&gt;jml&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Within You Without You</title><link href="http://code.mumak.net/2008/07/within-you-without-you.html" rel="alternate"></link><updated>2008-07-05T11:21:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/within-you-without-you.html</id><summary type="html">&lt;p&gt;Testing is hard, writing testing frameworks is easy. In an effort to
make testing easier, big projects like Twisted, Bazaar and Zope write
their own testing frameworks. That way they control both the test runner
and the tests that are run. It's actually quite convenient.  &lt;/p&gt;
&lt;p&gt;However, it's led to a significant problem:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are many similar implementations of xUnit in Python, each with
subtle incompatibilities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Running Twisted tests in the Zope test runner? Watch out for the threads
that the reactor maintains between tests. Running Bazaar tests with
Trial? On my machine, I get told that elementtree doesn't have an
'ElementTree' attribute. Hmm.  &lt;/p&gt;
&lt;p&gt;When talking about this problem, I often refer loosely to "PyUnit
compatibilty". The idea is that:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every Python test runner should support running vanilla Python
    standard library &lt;code&gt;unittest.TestCase&lt;/code&gt; tests.&lt;/li&gt;
&lt;li&gt;Every Python unit test should be able to be run using the mechanisms
    in &lt;code&gt;unittest.py&lt;/code&gt; in the Python standard library.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, this code should Just Work:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;{lang="python"}
import unittestfrom yourframework import testingclass PythonTestCase(unittest.TestCase):    def test_something(self):        passclass FrameworkTestCase(testing.TestCase):    def test_something(self):        passif __name__ == '__main__':    python_test_result = unittest.TestResult()    framework_test_result = testing.TestResult()    FrameworkTestCase('test_something').run(python_test_result)    FrameworkTestCase('test_something').run(framework_test_result)    PythonTestCase('test_something').run(python_test_result)    PythonTestCase('test_something').run(framework_test_result)    # At this point, python_test_result and framework_test_result    # should hold equivalent data.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If your framework is PyUnit compatible then the above fragment should
give the same results if run directly or if run in your runner. Things
get a little bit hazier when it comes to test discovery.  &lt;/p&gt;
&lt;p&gt;So, if your unit test requires that it be run inside a special suite
(e.g. &lt;code&gt;TrialSuite&lt;/code&gt;) in order to work correctly, it is not PyUnit
compatible. If your test runner does some critical set up that enables
features that your tests need, then it is not PyUnit compatible.  &lt;/p&gt;
&lt;p&gt;This leads to a kind of thinking where certain features belong on the
base test case and others belong in the test runner. Putting features in
the wrong place might not lead to a strict incompatibility, but it can
lead to significant inconvenience. (And what are automated tests if not
a convenience?).  &lt;/p&gt;
&lt;p&gt;Two examples from Twisted:  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Temporary Working Directory&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Trial creates a &lt;code&gt;_trial_temp&lt;/code&gt; working directory and changes into that
directory to run tests. In Trial, this feature is provided by the test
runner. It should be provided by the base &lt;code&gt;TestCase&lt;/code&gt; class.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's not clear that every test needs this feature.&lt;/li&gt;
&lt;li&gt;Twisted tests now assume that they can create files with impunity.
    When Twisted tests are run in a different test runner, they leave
    garbage files everywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Timeouts&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;By default, any Trial test that runs for more than two minutes will fail
with a timeout error. The timeout period can be configured on a
per-test, per-test-class, per-module or per-package basis. Trial
implements this feature on &lt;code&gt;TestCase&lt;/code&gt;, it should be implemented on the
runner.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even in the Twisted test runner, this makes debugging more painful.
    You must do all of your debugging in under two minutes.&lt;/li&gt;
&lt;li&gt;Intuitively, you might think that the &lt;em&gt;runner&lt;/em&gt; should control how
    tests are &lt;em&gt;run&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Tests that don't descend from Trial's &lt;code&gt;TestCase&lt;/code&gt; can still hang.&lt;/li&gt;
&lt;li&gt;Two minutes might be good enough for me on a Monday, but I might be
    busier on Friday. I should be able to change the timeout without
    changing code.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Testing"></category><category term="Hacking"></category><category term="Twisted"></category></entry><entry><title>It's a Gibbon</title><link href="http://code.mumak.net/2008/07/it-gibbon.html" rel="alternate"></link><updated>2008-07-05T11:08:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/it-gibbon.html</id><summary type="html">&lt;p&gt;Over the weekend I upgraded my laptop to &lt;a href="http://www.ubuntu.com"&gt;Ubuntu
7.10&lt;/a&gt; aka "The Gutsy Gibbon".  &lt;/p&gt;
&lt;p&gt;Obvious improvements include having Pidgin installed and a much superior
version of Deskbar. There's also a swanky new panel to actually control
display settings (dual monitor and all that jazz). Unfortunately, I
can't quite get it to work just yet. My 22" 1680x1058 LCD will just have
to sit there, gathering dust :(  &lt;/p&gt;
&lt;p&gt;In another weirdness, all of my fonts are suddenly much, much bigger. I
had to resize everything down to 8 or 9 to make them sane.  &lt;/p&gt;
&lt;p&gt;My &lt;a href="http://peadrop.com/blog/2007/01/06/pretty-emacs/"&gt;pretty Emacs&lt;/a&gt; has
also stopped working, but that's to be expected. It's a third-party
package that hasn't yet been built for Gutsy.  &lt;/p&gt;
&lt;p&gt;Other than that, seems to be a fairly routine upgrade. Is there anything
exciting that I've missed?&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Merging New trunk Features to a Development Branch (redux)</title><link href="http://code.mumak.net/2008/07/merging-new-trunk-features-to.html" rel="alternate"></link><updated>2008-07-05T11:08:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/merging-new-trunk-features-to.html</id><summary type="html">&lt;p&gt;&lt;a href="http://oubiwann.blogspot.com/"&gt;Oubiwann&lt;/a&gt; has &lt;a href="http://oubiwann.blogspot.com/2007/09/merging-new-trunk-features-to.html"&gt;recently
posted&lt;/a&gt;
about the joys of using
&lt;a href="http://divmod.org/trac/wiki/DivmodCombinator"&gt;Combinator&lt;/a&gt; to do
branch-based development using Subversion. I thought it'd be fun to do
the same post, except this time with Bazaar.  &lt;/p&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;You're working on a project called "Project", you have a copy of the
mainline branch (i.e. 'trunk') in your &lt;code&gt;src&lt;/code&gt; directory.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;lstrunk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You want to implement a new feature, so you branch trunk to work on it:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt; &lt;span class="n"&gt;viking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;836&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bazaar is a version control system, not a PYTHONPATH-managing system, so
it doesn't maintain a global list of projects and the branches that are
currently active for each project.  &lt;/p&gt;
&lt;p&gt;Perhaps your company focuses on historical invasions of Britain. You
decide to start work on another feature:&lt;br /&gt;
lass objects.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt; &lt;span class="n"&gt;norman&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1066&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You multi-task for a bit, until you finish 'viking-feature'. You decide
to merge 'viking-feature-836' into trunk.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;viking&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;836&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, you begin to suspect that Bazaar treats branches as
first-class objects. However, at this point, a developer on the obverse
side of your continent calls you,  &lt;/p&gt;
&lt;p&gt;"Where's your viking feature? I need it to invade Britain!"  &lt;/p&gt;
&lt;p&gt;"I've just put it into trunk. Have you got the latest copy?"  &lt;/p&gt;
&lt;p&gt;"Yeah, I do, I just pulled from trunk."  &lt;/p&gt;
&lt;p&gt;"It's in trunk, you fool! ... Oh, wait, gimme a sec."  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;pushPushing&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//bzr.example.com/Project/trunk...~/src/Project/trunk$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;"Try now."  &lt;/p&gt;
&lt;h3&gt;Merging&lt;/h3&gt;
&lt;p&gt;OK, enough background, let's merge.  &lt;/p&gt;
&lt;p&gt;Say you need some of the changes in trunk in order to finish work on
your norman feature. No problems.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt; &lt;span class="n"&gt;norman&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1066&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Merge from trunk.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's hard not to feel smug at this point.  &lt;/p&gt;
&lt;p&gt;Wait a second, you also want to look at the experimental branch that a
friend is working on:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;norman&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1066&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//yourfriend.example.com/branches/sealion-1946~/src/Project/norman-feature-1066$ bzr diff | less # better double check this one~/src/Project/norman-feature-1066$ bzr revert # nope, doesn&amp;#39;t seem like a good idea&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Bazaar treats branches as first-class objects and treats trunk just like
any other branch. Although Combinator is great for branch-based
development in Subversion, it is more complex and less flexible than
doing branch-based development in Bazaar.  &lt;/p&gt;
&lt;p&gt;With Combinator, you lose history when you merge in changes from trunk,
with Bazaar you don't.  &lt;/p&gt;
&lt;p&gt;With Combinator, you can only merge in changes from trunk, with Bazaar
you can merge from any branch.  &lt;/p&gt;
&lt;p&gt;With Combinator, merging from trunk leaves a bunch of changed files in
the trunk checkout on your system (this has tripped me up more than
once). With Bazaar, this doesn't happen.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Around like Grover</title><link href="http://code.mumak.net/2008/07/around-like-grover.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/around-like-grover.html</id><summary type="html">&lt;p&gt;What's up hep-cats?  &lt;/p&gt;
&lt;p&gt;I've been travelling around the world, weaving in and out of timezones
like Jason Bourne navigates facial expressions. Last week's adventure
took me to tropical Dunedin — the southiest outpost of Canonical Ltd.
(I'm trying to get a mention on &lt;a href="http://itre.cis.upenn.edu/~myl/languagelog/"&gt;Language
Log&lt;/a&gt;.)  &lt;/p&gt;
&lt;p&gt;Those few Hobartians who keep reading will notice that Dunedin, well,
umm... here's a photo:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="View of
Dunedin" src="http://tusk.mumak.net/Blog-20071016/Dunedin-View.jpg" title="Dunedin during rush hour" /&gt;  &lt;/p&gt;
&lt;p&gt;Pay careful attention to the hills in the background.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Cracked Mac</title><link href="http://code.mumak.net/2008/07/cracked-mac.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/cracked-mac.html</id><summary type="html">&lt;p&gt;OK, I've started with this whole “photography” thing, I might as well
run with it.  &lt;/p&gt;
&lt;p&gt;My Mac cracked:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="Cracked
Macbook" src="http://tusk.mumak.net/Blog-20071016/Cracked-Laptop-2.jpg" title="Designed by Apple in California" /&gt;&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Fake Plastic Tests</title><link href="http://code.mumak.net/2008/07/fake-plastic-tests_22.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/fake-plastic-tests_22.html</id><summary type="html">&lt;p&gt;Ever wondered what's the difference between a &lt;code&gt;FakeReactor&lt;/code&gt;, a
&lt;code&gt;StubReactor&lt;/code&gt; and a &lt;code&gt;MockReactor&lt;/code&gt;? Find out in this brief article on
&lt;a href="http://mumak.net/test-doubles"&gt;test doubles&lt;/a&gt;.  &lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>The most retentive thing I've done</title><link href="http://code.mumak.net/2008/07/most-retentive-thing-i-done_16.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/most-retentive-thing-i-done_16.html</id><summary type="html">&lt;p&gt;&lt;img alt="I labelled my
pens" src="http://tusk.mumak.net/Blog-20071016/Retentive-Pens-2.jpg" title="I'm still not sure about publishing this" /&gt;&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Obligatory</title><link href="http://code.mumak.net/2008/07/obligatory_8590.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/obligatory_8590.html</id><summary type="html">&lt;p&gt;Not using Facebook anymore.  &lt;/p&gt;
&lt;p&gt;Have fun kids.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>User Experience — When Reality Attacks</title><link href="http://code.mumak.net/2008/07/user-experience-when-reality-attacks_12.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/user-experience-when-reality-attacks_12.html</id><summary type="html">&lt;p&gt;I've just got back from a hectic week in London, where members of the
Bazaar community got together and thrashed out a bunch of important
topics.  &lt;/p&gt;
&lt;p&gt;We talked about "user experience" and how we all want Bazaar to be a joy
to use. More than one person said that we have been focusing too much on
features and performance instead of user experience. The term was never
really pinned down, but it's fair to say that there are things other
than convenience and speed that affect how users feel while using Bazaar
and that we need to work on those things, once we figure out what they
are.  &lt;/p&gt;
&lt;p&gt;I think I might know the name of one of them: &lt;em&gt;errors&lt;/em&gt;. Next post:
"Notes on error".&lt;/p&gt;</summary><category term="Bazaar"></category><category term="Hacking"></category><category term="UI"></category></entry><entry><title>What I do all day</title><link href="http://code.mumak.net/2008/07/what-i-do-all-day_14.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/what-i-do-all-day_14.html</id><summary type="html">&lt;p&gt;Kick-arse summary here: &lt;a href="http://news.launchpad.net/general/the-great-source-code-supermarket"&gt;The great source code
supermarket.&lt;/a&gt; &lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>WoW account temporarily suspended</title><link href="http://code.mumak.net/2008/07/wow-account-temporarily-suspended_09.html" rel="alternate"></link><updated>2008-07-05T11:07:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/wow-account-temporarily-suspended_09.html</id><summary type="html">&lt;p&gt;Howdy Partners,  &lt;/p&gt;
&lt;p&gt;My World of Warcraft account is temporarily suspended for silly
administrative reasons. I'm not in any rush to clear those up, so don't
expect to see me on Khaz'goroth or Frostmourne any time soon.  &lt;/p&gt;
&lt;p&gt;Regards,  &lt;/p&gt;
&lt;p&gt;jml&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>bzr-removable</title><link href="http://code.mumak.net/2008/07/bzr-removable_20.html" rel="alternate"></link><updated>2008-07-05T10:40:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/bzr-removable_20.html</id><summary type="html">&lt;p&gt;The plugin I talked about in a previous post is now at
https://launchpad.net/bzr-removable. Please file bugs.  &lt;/p&gt;
&lt;p&gt;Thanks to Michael Hudson and Daniel Watkins for submitting patches.  &lt;/p&gt;
&lt;p&gt;You can get the plugin by typing 'bzr branch lp:bzr-removable' on the
command line.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Neat Bazaar feature</title><link href="http://code.mumak.net/2008/07/neat-bazaar-feature_9205.html" rel="alternate"></link><updated>2008-07-05T10:40:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/neat-bazaar-feature_9205.html</id><summary type="html">&lt;p&gt;Ever find yourself working away on a branch, enjoying yourself and
getting just a little carried away? Maybe you're working on a feature
and you notice and fix a bug that's not strictly related to that
feature.  &lt;/p&gt;
&lt;p&gt;If you catch yourself in time, there's a nice little feature in Bazaar
that can help with this: &lt;code&gt;bzr merge --uncommitted&lt;/code&gt;. It will merge in the
changes that you've made to your working tree but haven't committed
yet.  &lt;/p&gt;
&lt;p&gt;e.g.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;hack&lt;/span&gt; &lt;span class="n"&gt;hack&lt;/span&gt; &lt;span class="n"&gt;hack&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;oops&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fix&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2357&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fix&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2357&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;uncommitted&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fix up bug 2357. Found this while working on some-feature.&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't know what &lt;code&gt;bzr send&lt;/code&gt; does? Trust me, you want to find out.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Somebody Do This Please</title><link href="http://code.mumak.net/2008/07/somebody-do-this-please_9690.html" rel="alternate"></link><updated>2008-07-05T10:39:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/somebody-do-this-please_9690.html</id><summary type="html">&lt;p&gt;\&amp;lt;jml&gt; What's the difference between
&lt;a href="http://gobby.0x539.de/trac/"&gt;Gobby&lt;/a&gt; and a
&lt;a href="http://moinmo.in/" title="Moin Moin"&gt;wiki&lt;/a&gt;?&lt;br /&gt;
\&amp;lt;mwh&gt; NAT&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Another Bazaar story</title><link href="http://code.mumak.net/2008/07/another-bazaar-story.html" rel="alternate"></link><updated>2008-07-05T10:09:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/another-bazaar-story.html</id><summary type="html">&lt;p&gt;I'm currently hacking away on Launchpad's support for "&lt;a href="http://jam-bazaar.blogspot.com/2008/05/this-week-in-bazaar_29.html"&gt;stacked
branches&lt;/a&gt;",
something that will really make Launchpad's codehosting a joy to use.  &lt;/p&gt;
&lt;p&gt;At the moment, I'm writing some tests that require a user to login. This
was becoming a bit cumbersome, until I remembered something: Tim has
recently landed some code to make this easy. But how do I get these
changes without messing up all of the work I'm doing now? bzr shelve to
the rescue!  &lt;/p&gt;
&lt;p&gt;'shelve' interactively goes through each change you've made to your
current working tree and allows you to decide whether to keep a change
or shelve it. It comes with a twin command 'unshelve', which lets you
interactively restore your changes.  &lt;/p&gt;
&lt;p&gt;In this case, I don't even care about the interactivity, so here's what
I did:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Shelve my changesbzr shelve --all# Fetch the latest trunkcd ../trunkbzr pull# Merge it into my branchcd ../stackingbzr merge ../trunkbzr ci -m &amp;quot;Merge in changes from trunk to get login testing improvements.&amp;quot;# Restore my changesbzr unshelve --all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The 'shelve' command comes with the
&lt;a href="http://launchpad.net/bzrtools"&gt;bzrtools&lt;/a&gt; plugin, and I am basically in
love with it.  &lt;/p&gt;
&lt;p&gt;As a parting shot, I should mention that things like bzrtools aren't
accidents. They are natural and inevitable when you have &lt;a href="http://starship.python.net/crew/mwh/bzrlibapi/bzrlib.html"&gt;good
APIs&lt;/a&gt; in a
&lt;a href="http://python.org"&gt;high-level language&lt;/a&gt; and a &lt;a href="http://bazaar-vcs.org/WritingPlugins"&gt;very nice plugin
system&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;And now I'm off to keep working on this branch.  &lt;/p&gt;</summary><category term="Bazaar"></category></entry><entry><title>OK I lied</title><link href="http://code.mumak.net/2008/07/ok-i-lied_17.html" rel="alternate"></link><updated>2008-07-05T10:09:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/ok-i-lied_17.html</id><summary type="html">&lt;p&gt;The next post is actually about a Bazaar plugin that I've now got ready
to share. To get it, 'bzr branch lp:\~jml/+junk/merged-branches'.  &lt;/p&gt;
&lt;p&gt;Once you've got it, run 'bzr merged-branches' in the trunk of your
project. It will then show you all branches in sibling directories that
are safe to delete.  That is,  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They have no uncommitted changes.&lt;/li&gt;
&lt;li&gt;They have no "unknown" files. (Files outside of version control that
    haven't been explicitly ignored.)&lt;/li&gt;
&lt;li&gt;They have no shelved changes. The plugin will only check for this if
    it can find bzrtools.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The branch is now at the point where it works for me, but it still
belongs in '+junk' — here's why:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It assumes that you have a trunk branch in the same directory as all
    of your other branches.&lt;/li&gt;
&lt;li&gt;It assumes that branches and working trees are the same thing.&lt;/li&gt;
&lt;li&gt;It's called 'merged-branches' when it really means 'safe-to-delete'.&lt;/li&gt;
&lt;li&gt;It doesn't make it easy to see why a branch is &lt;em&gt;not&lt;/em&gt; safe to delete.&lt;/li&gt;
&lt;li&gt;It doesn't let you customize the conditions of the search. Maybe you
    want to see all branches with uncommitted changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still, if you are like me and make a lot of branches, it's quite useful.
I'll tolerate bugs, accept patches and welcome encouragement.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Real Life</title><link href="http://code.mumak.net/2008/07/real-life.html" rel="alternate"></link><updated>2008-07-05T10:09:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/real-life.html</id><summary type="html">&lt;p&gt;Inspired by &lt;a href="http://mikeylynch.blogspot.com"&gt;Mikey&lt;/a&gt;, I've set up my own
&lt;a href="http://life.mumak.net"&gt;real-life blog&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;I've done this one using Blogger's "upload to remote server" feature. It
looks nice, has the features I need and means less WordPress &amp;amp; PHP. I'm
hoping to migrate this sucker to the same technology.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>What I meant</title><link href="http://code.mumak.net/2008/07/what-i-meant_20.html" rel="alternate"></link><updated>2008-07-05T10:09:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/what-i-meant_20.html</id><summary type="html">&lt;p&gt;&lt;a href="http://z3p.tumblr.com/"&gt;z3p&lt;/a&gt; recently &lt;a href="http://z3p.tumblr.com/post/32324725"&gt;blogged
about&lt;/a&gt; a comment I made in &lt;a href="http://twistedmatrix.com/trac/ticket/2710"&gt;a code
review&lt;/a&gt;. In the review, I
linked to:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="The only measure of code quality is WTFs /
minute" src="http://74.54.212.169/2ERcULhJC81alpg64P4WN7Of_400.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;That's a negative and grumpy way of phrasing an idea that I've come to
value a lot: &lt;em&gt;good code expresses its intent clearly.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;When looking at a patch, the reviewer needs to understand two things:
the intent of the code and the intent of each &lt;em&gt;change&lt;/em&gt; to the code. To
be clear on the former, you need:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intent-revealing names.&lt;/li&gt;
&lt;li&gt;good abstractions / interfaces.&lt;/li&gt;
&lt;li&gt;good, small tests.&lt;/li&gt;
&lt;li&gt;simple implementations where possible.[1]&lt;/li&gt;
&lt;li&gt;docstrings where appropriate&lt;/li&gt;
&lt;li&gt;comments where appropriate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's not exhaustive, but it's in a rough order.  &lt;/p&gt;
&lt;p&gt;To be clear on the intent of your change to code, you need:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Small patches.&lt;/li&gt;
&lt;li&gt;A good bug / spec with a good, short summary.&lt;/li&gt;
&lt;li&gt;A review request letter, summarizing your implementation strategy,
    any compromises you made, gaps in testing, future work etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's not exhaustive either. In #2037, I didn't understand the
motivation for lots of the code, nor for some of the changes to the
code.  &lt;/p&gt;
&lt;p&gt;I'm indebted to &lt;a href="http://andrew.puzzling.org"&gt;Andrew Bennetts&lt;/a&gt; for
teaching me that the first duty of a reviewer is to ensure that the code
is clear and to &lt;a href="http://intellectronica.net/"&gt;Tom Berger&lt;/a&gt; for reminding
me that compromises are worth noting.  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[1] Actually, this reminds me of something I heard &lt;a href="http://en.wikipedia.org/wiki/Don_Carson"&gt;a
preacher&lt;/a&gt; say, "before I give a
sermon, I go through it, find everything clever, and take it out" (I
paraphrase, not having a reference on hand).  &lt;/p&gt;
&lt;p&gt;In as much as sermons and code should both be ego-free communications of
ideas, I think this is sound advice for hackers.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>2008</title><link href="http://code.mumak.net/2008/07/2008.html" rel="alternate"></link><updated>2008-07-05T09:24:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/2008.html</id><summary type="html">&lt;h1 color="#ff0000"&gt;Firefox 3 is awesome!&lt;/h1&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Aren't code reviews great?</title><link href="http://code.mumak.net/2008/07/aren-code-reviews-great.html" rel="alternate"></link><updated>2008-07-05T09:24:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/aren-code-reviews-great.html</id><summary type="html">&lt;p&gt;Ben Sussman-Collins writes about &lt;a href="http://blog.red-bean.com/sussman/?p=96"&gt;programmer
insecurity&lt;/a&gt; and how a lot of
programmers dread having others see their code.  &lt;/p&gt;
&lt;p&gt;Some of the &lt;a href="http://jcalderone.livejournal.com"&gt;best&lt;/a&gt;
&lt;a href="http://robertcollins.net"&gt;programmers&lt;/a&gt;
&lt;a href="http://radix.twistedmatrix.com"&gt;I've&lt;/a&gt; &lt;a href="http://sourcefrog.net"&gt;worked&lt;/a&gt;
&lt;a href="http://glyph.twistedmatrix.com"&gt;with&lt;/a&gt;
&lt;a href="http://python.net/crew/mwh/"&gt;are&lt;/a&gt; in love with code reviews, and all
great writers have editors. (The "linked list" is in no way exhaustive.)
Personally, I see reviews as being a great opportunity to learn.  &lt;/p&gt;
&lt;p&gt;Sussman-Collins also writes about how distributed version control can
exacerbate the "isolated genius" problem by shielding ones code from the
public eye. This is definitely a big potential drawback of DVCS, but one
that's largely mitigated by a culture of short-lived branches and &lt;a href="https://code.launchpad.net"&gt;an
easy-to-use public registry of all branches for a
project&lt;/a&gt;.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>GMail feature request</title><link href="http://code.mumak.net/2008/07/gmail-feature-request.html" rel="alternate"></link><updated>2008-07-05T09:24:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/gmail-feature-request.html</id><summary type="html">&lt;p&gt;First, where should I make these requests?  &lt;/p&gt;
&lt;p&gt;Second, I'd like to be able to open my GMail without seeing all the new
mail in my inbox. Very often, I open up GMail just to look up some fact
that I've forgotten, or to put a date to a particular event. Seeing new
mail and an unempty inbox distracts me, leading me down a rabbit hole of
processing.  &lt;/p&gt;
&lt;p&gt;I guess a GreaseMonkey hack wouldn't be &lt;em&gt;too&lt;/em&gt; hard.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry><entry><title>Really Satisfying</title><link href="http://code.mumak.net/2008/07/really-satisfying.html" rel="alternate"></link><updated>2008-07-05T09:24:00+01:00</updated><author><name>Jonathan Lange (noreply@blogger.com)</name></author><id>tag:code.mumak.net,2008-07-05:2008/07/really-satisfying.html</id><summary type="html">&lt;p&gt;I have just returned from the shops with a Snickers bar. The packet says
that one out of every six Snickers bars will instantly win me a free
Snickers bar.  &lt;/p&gt;
&lt;p&gt;So, &lt;em&gt;statistically speaking&lt;/em&gt;, how many Snickers bars do I have? Show
working.&lt;/p&gt;</summary><category term="Uncategorized"></category></entry></feed>